
medEle_13LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005500  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  080056b0  080056b0  000156b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800594c  0800594c  0001594c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000700  20000000  0800595c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020700  2**0
                  CONTENTS
  8 .bss          000006f4  20000700  20000700  00020700  2**2
                  ALLOC
  9 ._user_heap_stack 00000400  20000df4  20000df4  00020700  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020700  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000749d  00000000  00000000  00020730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000fce  00000000  00000000  00027bcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000008a0  00000000  00000000  00028ba0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000808  00000000  00000000  00029440  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00002cde  00000000  00000000  00029c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000303f  00000000  00000000  0002c926  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0002f965  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003124  00000000  00000000  0002f9e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000700 	.word	0x20000700
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005698 	.word	0x08005698

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000704 	.word	0x20000704
 80001ec:	08005698 	.word	0x08005698

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2f>:
 8000bc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc8:	bf24      	itt	cs
 8000bca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bd2:	d90d      	bls.n	8000bf0 <__aeabi_d2f+0x30>
 8000bd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be8:	bf08      	it	eq
 8000bea:	f020 0001 	biceq.w	r0, r0, #1
 8000bee:	4770      	bx	lr
 8000bf0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf4:	d121      	bne.n	8000c3a <__aeabi_d2f+0x7a>
 8000bf6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bfa:	bfbc      	itt	lt
 8000bfc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	4770      	bxlt	lr
 8000c02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c0a:	f1c2 0218 	rsb	r2, r2, #24
 8000c0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c16:	fa20 f002 	lsr.w	r0, r0, r2
 8000c1a:	bf18      	it	ne
 8000c1c:	f040 0001 	orrne.w	r0, r0, #1
 8000c20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c2c:	ea40 000c 	orr.w	r0, r0, ip
 8000c30:	fa23 f302 	lsr.w	r3, r3, r2
 8000c34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c38:	e7cc      	b.n	8000bd4 <__aeabi_d2f+0x14>
 8000c3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3e:	d107      	bne.n	8000c50 <__aeabi_d2f+0x90>
 8000c40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c44:	bf1e      	ittt	ne
 8000c46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4e:	4770      	bxne	lr
 8000c50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <__aeabi_uldivmod>:
 8000c60:	b953      	cbnz	r3, 8000c78 <__aeabi_uldivmod+0x18>
 8000c62:	b94a      	cbnz	r2, 8000c78 <__aeabi_uldivmod+0x18>
 8000c64:	2900      	cmp	r1, #0
 8000c66:	bf08      	it	eq
 8000c68:	2800      	cmpeq	r0, #0
 8000c6a:	bf1c      	itt	ne
 8000c6c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c70:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c74:	f000 b97a 	b.w	8000f6c <__aeabi_idiv0>
 8000c78:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c80:	f000 f806 	bl	8000c90 <__udivmoddi4>
 8000c84:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c8c:	b004      	add	sp, #16
 8000c8e:	4770      	bx	lr

08000c90 <__udivmoddi4>:
 8000c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c94:	468c      	mov	ip, r1
 8000c96:	460d      	mov	r5, r1
 8000c98:	4604      	mov	r4, r0
 8000c9a:	9e08      	ldr	r6, [sp, #32]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d151      	bne.n	8000d44 <__udivmoddi4+0xb4>
 8000ca0:	428a      	cmp	r2, r1
 8000ca2:	4617      	mov	r7, r2
 8000ca4:	d96d      	bls.n	8000d82 <__udivmoddi4+0xf2>
 8000ca6:	fab2 fe82 	clz	lr, r2
 8000caa:	f1be 0f00 	cmp.w	lr, #0
 8000cae:	d00b      	beq.n	8000cc8 <__udivmoddi4+0x38>
 8000cb0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cb4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cbc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cc0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cc4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cc8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ccc:	0c25      	lsrs	r5, r4, #16
 8000cce:	fbbc f8fa 	udiv	r8, ip, sl
 8000cd2:	fa1f f987 	uxth.w	r9, r7
 8000cd6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cda:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cde:	fb08 f309 	mul.w	r3, r8, r9
 8000ce2:	42ab      	cmp	r3, r5
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x6c>
 8000ce6:	19ed      	adds	r5, r5, r7
 8000ce8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000cec:	f080 8123 	bcs.w	8000f36 <__udivmoddi4+0x2a6>
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	f240 8120 	bls.w	8000f36 <__udivmoddi4+0x2a6>
 8000cf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cfa:	443d      	add	r5, r7
 8000cfc:	1aed      	subs	r5, r5, r3
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d04:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d0c:	fb00 f909 	mul.w	r9, r0, r9
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x98>
 8000d14:	19e4      	adds	r4, r4, r7
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1a:	f080 810a 	bcs.w	8000f32 <__udivmoddi4+0x2a2>
 8000d1e:	45a1      	cmp	r9, r4
 8000d20:	f240 8107 	bls.w	8000f32 <__udivmoddi4+0x2a2>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 0409 	sub.w	r4, r4, r9
 8000d2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d30:	2100      	movs	r1, #0
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d061      	beq.n	8000dfa <__udivmoddi4+0x16a>
 8000d36:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6034      	str	r4, [r6, #0]
 8000d3e:	6073      	str	r3, [r6, #4]
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0xc8>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d054      	beq.n	8000df6 <__udivmoddi4+0x166>
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d52:	4608      	mov	r0, r1
 8000d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d58:	fab3 f183 	clz	r1, r3
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	f040 808e 	bne.w	8000e7e <__udivmoddi4+0x1ee>
 8000d62:	42ab      	cmp	r3, r5
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xdc>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80fa 	bhi.w	8000f60 <__udivmoddi4+0x2d0>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	46ac      	mov	ip, r5
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	d03f      	beq.n	8000dfa <__udivmoddi4+0x16a>
 8000d7a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	b912      	cbnz	r2, 8000d8a <__udivmoddi4+0xfa>
 8000d84:	2701      	movs	r7, #1
 8000d86:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d8a:	fab7 fe87 	clz	lr, r7
 8000d8e:	f1be 0f00 	cmp.w	lr, #0
 8000d92:	d134      	bne.n	8000dfe <__udivmoddi4+0x16e>
 8000d94:	1beb      	subs	r3, r5, r7
 8000d96:	0c3a      	lsrs	r2, r7, #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000da2:	0c25      	lsrs	r5, r4, #16
 8000da4:	fb02 3318 	mls	r3, r2, r8, r3
 8000da8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dac:	fb0c f308 	mul.w	r3, ip, r8
 8000db0:	42ab      	cmp	r3, r5
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x134>
 8000db4:	19ed      	adds	r5, r5, r7
 8000db6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x132>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	f200 80d1 	bhi.w	8000f64 <__udivmoddi4+0x2d4>
 8000dc2:	4680      	mov	r8, r0
 8000dc4:	1aed      	subs	r5, r5, r3
 8000dc6:	b2a3      	uxth	r3, r4
 8000dc8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dcc:	fb02 5510 	mls	r5, r2, r0, r5
 8000dd0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dd4:	fb0c fc00 	mul.w	ip, ip, r0
 8000dd8:	45a4      	cmp	ip, r4
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x15c>
 8000ddc:	19e4      	adds	r4, r4, r7
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x15a>
 8000de4:	45a4      	cmp	ip, r4
 8000de6:	f200 80b8 	bhi.w	8000f5a <__udivmoddi4+0x2ca>
 8000dea:	4618      	mov	r0, r3
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df4:	e79d      	b.n	8000d32 <__udivmoddi4+0xa2>
 8000df6:	4631      	mov	r1, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	f1ce 0420 	rsb	r4, lr, #32
 8000e02:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e06:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e0a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e0e:	0c3a      	lsrs	r2, r7, #16
 8000e10:	fa25 f404 	lsr.w	r4, r5, r4
 8000e14:	ea48 0803 	orr.w	r8, r8, r3
 8000e18:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e1c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e20:	fb02 4411 	mls	r4, r2, r1, r4
 8000e24:	fa1f fc87 	uxth.w	ip, r7
 8000e28:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e2c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e36:	d909      	bls.n	8000e4c <__udivmoddi4+0x1bc>
 8000e38:	19ed      	adds	r5, r5, r7
 8000e3a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e3e:	f080 808a 	bcs.w	8000f56 <__udivmoddi4+0x2c6>
 8000e42:	42ab      	cmp	r3, r5
 8000e44:	f240 8087 	bls.w	8000f56 <__udivmoddi4+0x2c6>
 8000e48:	3902      	subs	r1, #2
 8000e4a:	443d      	add	r5, r7
 8000e4c:	1aeb      	subs	r3, r5, r3
 8000e4e:	fa1f f588 	uxth.w	r5, r8
 8000e52:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e56:	fb02 3310 	mls	r3, r2, r0, r3
 8000e5a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e5e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	d907      	bls.n	8000e76 <__udivmoddi4+0x1e6>
 8000e66:	19ed      	adds	r5, r5, r7
 8000e68:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6c:	d26f      	bcs.n	8000f4e <__udivmoddi4+0x2be>
 8000e6e:	42ab      	cmp	r3, r5
 8000e70:	d96d      	bls.n	8000f4e <__udivmoddi4+0x2be>
 8000e72:	3802      	subs	r0, #2
 8000e74:	443d      	add	r5, r7
 8000e76:	1aeb      	subs	r3, r5, r3
 8000e78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e7c:	e78f      	b.n	8000d9e <__udivmoddi4+0x10e>
 8000e7e:	f1c1 0720 	rsb	r7, r1, #32
 8000e82:	fa22 f807 	lsr.w	r8, r2, r7
 8000e86:	408b      	lsls	r3, r1
 8000e88:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8c:	ea48 0303 	orr.w	r3, r8, r3
 8000e90:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e94:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e98:	40fd      	lsrs	r5, r7
 8000e9a:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e9e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ea2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ea6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eaa:	fa1f f883 	uxth.w	r8, r3
 8000eae:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000eb2:	fb09 f408 	mul.w	r4, r9, r8
 8000eb6:	42ac      	cmp	r4, r5
 8000eb8:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x244>
 8000ec2:	18ed      	adds	r5, r5, r3
 8000ec4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ec8:	d243      	bcs.n	8000f52 <__udivmoddi4+0x2c2>
 8000eca:	42ac      	cmp	r4, r5
 8000ecc:	d941      	bls.n	8000f52 <__udivmoddi4+0x2c2>
 8000ece:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed2:	441d      	add	r5, r3
 8000ed4:	1b2d      	subs	r5, r5, r4
 8000ed6:	fa1f fe8e 	uxth.w	lr, lr
 8000eda:	fbb5 f0fc 	udiv	r0, r5, ip
 8000ede:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ee2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ee6:	fb00 f808 	mul.w	r8, r0, r8
 8000eea:	45a0      	cmp	r8, r4
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x26e>
 8000eee:	18e4      	adds	r4, r4, r3
 8000ef0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000ef4:	d229      	bcs.n	8000f4a <__udivmoddi4+0x2ba>
 8000ef6:	45a0      	cmp	r8, r4
 8000ef8:	d927      	bls.n	8000f4a <__udivmoddi4+0x2ba>
 8000efa:	3802      	subs	r0, #2
 8000efc:	441c      	add	r4, r3
 8000efe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f02:	eba4 0408 	sub.w	r4, r4, r8
 8000f06:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0a:	454c      	cmp	r4, r9
 8000f0c:	46c6      	mov	lr, r8
 8000f0e:	464d      	mov	r5, r9
 8000f10:	d315      	bcc.n	8000f3e <__udivmoddi4+0x2ae>
 8000f12:	d012      	beq.n	8000f3a <__udivmoddi4+0x2aa>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x29c>
 8000f16:	ebba 030e 	subs.w	r3, sl, lr
 8000f1a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40cb      	lsrs	r3, r1
 8000f24:	431f      	orrs	r7, r3
 8000f26:	40cc      	lsrs	r4, r1
 8000f28:	6037      	str	r7, [r6, #0]
 8000f2a:	6074      	str	r4, [r6, #4]
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	4618      	mov	r0, r3
 8000f34:	e6f8      	b.n	8000d28 <__udivmoddi4+0x98>
 8000f36:	4690      	mov	r8, r2
 8000f38:	e6e0      	b.n	8000cfc <__udivmoddi4+0x6c>
 8000f3a:	45c2      	cmp	sl, r8
 8000f3c:	d2ea      	bcs.n	8000f14 <__udivmoddi4+0x284>
 8000f3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f42:	eb69 0503 	sbc.w	r5, r9, r3
 8000f46:	3801      	subs	r0, #1
 8000f48:	e7e4      	b.n	8000f14 <__udivmoddi4+0x284>
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e7d7      	b.n	8000efe <__udivmoddi4+0x26e>
 8000f4e:	4640      	mov	r0, r8
 8000f50:	e791      	b.n	8000e76 <__udivmoddi4+0x1e6>
 8000f52:	4681      	mov	r9, r0
 8000f54:	e7be      	b.n	8000ed4 <__udivmoddi4+0x244>
 8000f56:	4601      	mov	r1, r0
 8000f58:	e778      	b.n	8000e4c <__udivmoddi4+0x1bc>
 8000f5a:	3802      	subs	r0, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	e745      	b.n	8000dec <__udivmoddi4+0x15c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e708      	b.n	8000d76 <__udivmoddi4+0xe6>
 8000f64:	f1a8 0802 	sub.w	r8, r8, #2
 8000f68:	443d      	add	r5, r7
 8000f6a:	e72b      	b.n	8000dc4 <__udivmoddi4+0x134>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	73bb      	strb	r3, [r7, #14]
 8000f80:	230f      	movs	r3, #15
 8000f82:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	78db      	ldrb	r3, [r3, #3]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d039      	beq.n	8001000 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <NVIC_Init+0xbc>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	f1c3 0304 	rsb	r3, r3, #4
 8000fa2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000fa4:	7b7a      	ldrb	r2, [r7, #13]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	fa42 f303 	asr.w	r3, r2, r3
 8000fac:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	789a      	ldrb	r2, [r3, #2]
 8000fc0:	7b7b      	ldrb	r3, [r7, #13]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000fd2:	4a17      	ldr	r2, [pc, #92]	; (8001030 <NVIC_Init+0xc0>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	7bfa      	ldrb	r2, [r7, #15]
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <NVIC_Init+0xc0>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	f003 031f 	and.w	r3, r3, #31
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000ffa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000ffe:	e00f      	b.n	8001020 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001000:	490b      	ldr	r1, [pc, #44]	; (8001030 <NVIC_Init+0xc0>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	095b      	lsrs	r3, r3, #5
 8001008:	b2db      	uxtb	r3, r3
 800100a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	f003 031f 	and.w	r3, r3, #31
 8001014:	2201      	movs	r2, #1
 8001016:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001018:	f100 0320 	add.w	r3, r0, #32
 800101c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00
 8001030:	e000e100 	.word	0xe000e100

08001034 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001056:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8001062:	4313      	orrs	r3, r2
 8001064:	68fa      	ldr	r2, [r7, #12]
 8001066:	4313      	orrs	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4b18      	ldr	r3, [pc, #96]	; (80010dc <ADC_Init+0xa8>)
 800107a:	4013      	ands	r3, r2
 800107c:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001086:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800108c:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	795b      	ldrb	r3, [r3, #5]
 8001092:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8001094:	4313      	orrs	r3, r2
 8001096:	68fa      	ldr	r2, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80010ae:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	7d1b      	ldrb	r3, [r3, #20]
 80010b4:	3b01      	subs	r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	7afb      	ldrb	r3, [r7, #11]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80010be:	7afb      	ldrb	r3, [r7, #11]
 80010c0:	051b      	lsls	r3, r3, #20
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010ce:	bf00      	nop
 80010d0:	3714      	adds	r7, #20
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	c0fff7fd 	.word	0xc0fff7fd

080010e0 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2201      	movs	r2, #1
 8001110:	751a      	strb	r2, [r3, #20]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <ADC_CommonInit+0x48>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <ADC_CommonInit+0x4c>)
 8001136:	4013      	ands	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001142:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8001148:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 800114e:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8001150:	68fa      	ldr	r2, [r7, #12]
 8001152:	4313      	orrs	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8001156:	4a04      	ldr	r2, [pc, #16]	; (8001168 <ADC_CommonInit+0x48>)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6053      	str	r3, [r2, #4]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40012300 	.word	0x40012300
 800116c:	fffc30e0 	.word	0xfffc30e0

08001170 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d006      	beq.n	80011bc <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f043 0201 	orr.w	r2, r3, #1
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 80011ba:	e005      	b.n	80011c8 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f023 0201 	bic.w	r2, r3, #1
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	609a      	str	r2, [r3, #8]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	4608      	mov	r0, r1
 80011de:	4611      	mov	r1, r2
 80011e0:	461a      	mov	r2, r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	70fb      	strb	r3, [r7, #3]
 80011e6:	460b      	mov	r3, r1
 80011e8:	70bb      	strb	r3, [r7, #2]
 80011ea:	4613      	mov	r3, r2
 80011ec:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80011fa:	78fb      	ldrb	r3, [r7, #3]
 80011fc:	2b09      	cmp	r3, #9
 80011fe:	d923      	bls.n	8001248 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	f1a3 020a 	sub.w	r2, r3, #10
 800120c:	4613      	mov	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	2207      	movs	r2, #7
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	43db      	mvns	r3, r3
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8001224:	7879      	ldrb	r1, [r7, #1]
 8001226:	78fb      	ldrb	r3, [r7, #3]
 8001228:	f1a3 020a 	sub.w	r2, r3, #10
 800122c:	4613      	mov	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	4413      	add	r3, r2
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	e01e      	b.n	8001286 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800124e:	78fa      	ldrb	r2, [r7, #3]
 8001250:	4613      	mov	r3, r2
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	4413      	add	r3, r2
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001268:	7879      	ldrb	r1, [r7, #1]
 800126a:	78fa      	ldrb	r2, [r7, #3]
 800126c:	4613      	mov	r3, r2
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4413      	add	r3, r2
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	0d1b      	lsrs	r3, r3, #20
 8001290:	f003 0303 	and.w	r3, r3, #3
 8001294:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	78ba      	ldrb	r2, [r7, #2]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	3302      	adds	r3, #2
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	461a      	mov	r2, r3
 80012a6:	4613      	mov	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	221f      	movs	r2, #31
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4013      	ands	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80012be:	78fa      	ldrb	r2, [r7, #3]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	78b9      	ldrb	r1, [r7, #2]
 80012c6:	1acb      	subs	r3, r1, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	3302      	adds	r3, #2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	460b      	mov	r3, r1
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b085      	sub	sp, #20
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	460b      	mov	r3, r1
 8001300:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001316:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	3b01      	subs	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	051b      	lsls	r3, r3, #20
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4313      	orrs	r3, r2
 8001326:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr

0800133a <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
 8001346:	4613      	mov	r3, r2
 8001348:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	461a      	mov	r2, r3
 800135e:	883b      	ldrh	r3, [r7, #0]
 8001360:	6013      	str	r3, [r2, #0]
}
 8001362:	bf00      	nop
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	609a      	str	r2, [r3, #8]
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr

0800138e <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 800138e:	b480      	push	{r7}
 8001390:	b085      	sub	sp, #20
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	460b      	mov	r3, r1
 8001398:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80013a2:	78fa      	ldrb	r2, [r7, #3]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	3328      	adds	r3, #40	; 0x28
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	b29b      	uxth	r3, r3
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
 80013c6:	460b      	mov	r3, r1
 80013c8:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	4013      	ands	r3, r2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e001      	b.n	80013e4 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 80013fe:	78fb      	ldrb	r3, [r7, #3]
 8001400:	43da      	mvns	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001412:	b480      	push	{r7}
 8001414:	b087      	sub	sp, #28
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	e076      	b.n	800151c <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800142e:	2201      	movs	r2, #1
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	429a      	cmp	r2, r3
 8001448:	d165      	bne.n	8001516 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2103      	movs	r1, #3
 8001454:	fa01 f303 	lsl.w	r3, r1, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	791b      	ldrb	r3, [r3, #4]
 8001468:	4619      	mov	r1, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	791b      	ldrb	r3, [r3, #4]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d003      	beq.n	8001488 <GPIO_Init+0x76>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	791b      	ldrb	r3, [r3, #4]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d12e      	bne.n	80014e6 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	2103      	movs	r1, #3
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43db      	mvns	r3, r3
 8001498:	401a      	ands	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	689a      	ldr	r2, [r3, #8]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	795b      	ldrb	r3, [r3, #5]
 80014a6:	4619      	mov	r1, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	2301      	movs	r3, #1
 80014c2:	408b      	lsls	r3, r1
 80014c4:	43db      	mvns	r3, r3
 80014c6:	401a      	ands	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	7992      	ldrb	r2, [r2, #6]
 80014d4:	4611      	mov	r1, r2
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	b292      	uxth	r2, r2
 80014da:	fa01 f202 	lsl.w	r2, r1, r2
 80014de:	b292      	uxth	r2, r2
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2103      	movs	r1, #3
 80014f2:	fa01 f303 	lsl.w	r3, r1, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	79db      	ldrb	r3, [r3, #7]
 8001506:	4619      	mov	r1, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	3301      	adds	r3, #1
 800151a:	617b      	str	r3, [r7, #20]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	2b0f      	cmp	r3, #15
 8001520:	d985      	bls.n	800142e <GPIO_Init+0x1c>
    }
  }
}
 8001522:	bf00      	nop
 8001524:	371c      	adds	r7, #28
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800153c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	71da      	strb	r2, [r3, #7]
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d006      	beq.n	8001584 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001576:	490a      	ldr	r1, [pc, #40]	; (80015a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800157a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4313      	orrs	r3, r2
 8001580:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8001582:	e006      	b.n	8001592 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8001584:	4906      	ldr	r1, [pc, #24]	; (80015a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	43db      	mvns	r3, r3
 800158e:	4013      	ands	r3, r2
 8001590:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d006      	beq.n	80015c4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80015b6:	490a      	ldr	r1, [pc, #40]	; (80015e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80015ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4313      	orrs	r3, r2
 80015c0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80015c2:	e006      	b.n	80015d2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80015c4:	4906      	ldr	r1, [pc, #24]	; (80015e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <RCC_APB1PeriphClockCmd+0x3c>)
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4013      	ands	r3, r2
 80015d0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80015f0:	78fb      	ldrb	r3, [r7, #3]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80015f6:	490a      	ldr	r1, [pc, #40]	; (8001620 <RCC_APB2PeriphClockCmd+0x3c>)
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <RCC_APB2PeriphClockCmd+0x3c>)
 80015fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4313      	orrs	r3, r2
 8001600:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001602:	e006      	b.n	8001612 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001604:	4906      	ldr	r1, [pc, #24]	; (8001620 <RCC_APB2PeriphClockCmd+0x3c>)
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <RCC_APB2PeriphClockCmd+0x3c>)
 8001608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	43db      	mvns	r3, r3
 800160e:	4013      	ands	r3, r2
 8001610:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <TIM_TimeBaseInit+0xbc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <TIM_TimeBaseInit+0x44>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <TIM_TimeBaseInit+0xc0>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00f      	beq.n	8001668 <TIM_TimeBaseInit+0x44>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800164e:	d00b      	beq.n	8001668 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a25      	ldr	r2, [pc, #148]	; (80016e8 <TIM_TimeBaseInit+0xc4>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d007      	beq.n	8001668 <TIM_TimeBaseInit+0x44>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a24      	ldr	r2, [pc, #144]	; (80016ec <TIM_TimeBaseInit+0xc8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d003      	beq.n	8001668 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <TIM_TimeBaseInit+0xcc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d108      	bne.n	800167a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001668:	89fb      	ldrh	r3, [r7, #14]
 800166a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800166e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	885a      	ldrh	r2, [r3, #2]
 8001674:	89fb      	ldrh	r3, [r7, #14]
 8001676:	4313      	orrs	r3, r2
 8001678:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <TIM_TimeBaseInit+0xd0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00c      	beq.n	800169c <TIM_TimeBaseInit+0x78>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1c      	ldr	r2, [pc, #112]	; (80016f8 <TIM_TimeBaseInit+0xd4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d008      	beq.n	800169c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800168a:	89fb      	ldrh	r3, [r7, #14]
 800168c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001690:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	891a      	ldrh	r2, [r3, #8]
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	4313      	orrs	r3, r2
 800169a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	89fa      	ldrh	r2, [r7, #14]
 80016a0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <TIM_TimeBaseInit+0xbc>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d003      	beq.n	80016c2 <TIM_TimeBaseInit+0x9e>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a09      	ldr	r2, [pc, #36]	; (80016e4 <TIM_TimeBaseInit+0xc0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d104      	bne.n	80016cc <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	7a9b      	ldrb	r3, [r3, #10]
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2201      	movs	r2, #1
 80016d0:	829a      	strh	r2, [r3, #20]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40010000 	.word	0x40010000
 80016e4:	40010400 	.word	0x40010400
 80016e8:	40000400 	.word	0x40000400
 80016ec:	40000800 	.word	0x40000800
 80016f0:	40000c00 	.word	0x40000c00
 80016f4:	40001000 	.word	0x40001000
 80016f8:	40001400 	.word	0x40001400

080016fc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	b29a      	uxth	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800171e:	e007      	b.n	8001730 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	b29b      	uxth	r3, r3
 8001726:	f023 0301 	bic.w	r3, r3, #1
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	801a      	strh	r2, [r3, #0]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	460b      	mov	r3, r1
 8001746:	807b      	strh	r3, [r7, #2]
 8001748:	4613      	mov	r3, r2
 800174a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800174c:	787b      	ldrb	r3, [r7, #1]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	899b      	ldrh	r3, [r3, #12]
 8001756:	b29a      	uxth	r2, r3
 8001758:	887b      	ldrh	r3, [r7, #2]
 800175a:	4313      	orrs	r3, r2
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001762:	e009      	b.n	8001778 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	899b      	ldrh	r3, [r3, #12]
 8001768:	b29a      	uxth	r2, r3
 800176a:	887b      	ldrh	r3, [r7, #2]
 800176c:	43db      	mvns	r3, r3
 800176e:	b29b      	uxth	r3, r3
 8001770:	4013      	ands	r3, r2
 8001772:	b29a      	uxth	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	819a      	strh	r2, [r3, #12]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001794:	2300      	movs	r3, #0
 8001796:	81bb      	strh	r3, [r7, #12]
 8001798:	2300      	movs	r3, #0
 800179a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	8a1b      	ldrh	r3, [r3, #16]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	4013      	ands	r3, r2
 80017a6:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	899b      	ldrh	r3, [r3, #12]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	4013      	ands	r3, r2
 80017b2:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80017b4:	89bb      	ldrh	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d005      	beq.n	80017c6 <TIM_GetITStatus+0x42>
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e001      	b.n	80017ca <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	821a      	strh	r2, [r3, #16]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <INIT_ADC>:
		- Pin		Pin del ADC a inicializar. Ej: GPIO_Pin_X
	* @ej
		- INIT_ADC(GPIOX, GPIO_Pin_X);
******************************************************************************/
/*Inicializacion de dos ADC:*/
void INIT_ADC(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08c      	sub	sp, #48	; 0x30
 8001800:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;

	/* Puerto C -------------------------------------------------------------*/
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8001802:	2101      	movs	r1, #1
 8001804:	2004      	movs	r0, #4
 8001806:	f7ff fead 	bl	8001564 <RCC_AHB1PeriphClockCmd>

	/* PC1 para entrada analógica */
	GPIO_StructInit(&GPIO_InitStructure);
 800180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fe8d 	bl	800152e <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3;
 8001814:	2309      	movs	r3, #9
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8001818:	2303      	movs	r3, #3
 800181a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800181e:	2300      	movs	r3, #0
 8001820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001824:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001828:	4619      	mov	r1, r3
 800182a:	4833      	ldr	r0, [pc, #204]	; (80018f8 <INIT_ADC+0xfc>)
 800182c:	f7ff fdf1 	bl	8001412 <GPIO_Init>

	/* Activar ADC1 ----------------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8001830:	2101      	movs	r1, #1
 8001832:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001836:	f7ff fed5 	bl	80015e4 <RCC_APB2PeriphClockCmd>
	/* Activar ADC2 ----------------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 800183a:	2101      	movs	r1, #1
 800183c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001840:	f7ff fed0 	bl	80015e4 <RCC_APB2PeriphClockCmd>

	/* ADC Common Init -------------------------------------------------------*/
	ADC_CommonStructInit(&ADC_CommonInitStructure);
 8001844:	463b      	mov	r3, r7
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff fc92 	bl	8001170 <ADC_CommonStructInit>
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 800184c:	2300      	movs	r3, #0
 800184e:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4; // max 36 MHz segun datasheet
 8001850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001854:	607b      	str	r3, [r7, #4]
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
	ADC_CommonInit(&ADC_CommonInitStructure);
 800185e:	463b      	mov	r3, r7
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fc5d 	bl	8001120 <ADC_CommonInit>

	/* ADC Init ---------------------------------------------------------------*/
	ADC_StructInit(&ADC_InitStructure);
 8001866:	f107 0310 	add.w	r3, r7, #16
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fc38 	bl	80010e0 <ADC_StructInit>
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8001870:	2300      	movs	r3, #0
 8001872:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	753b      	strb	r3, [r7, #20]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	757b      	strb	r3, [r7, #21]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8001884:	2301      	movs	r3, #1
 8001886:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ADC_Init(ADC1, &ADC_InitStructure);
 800188a:	f107 0310 	add.w	r3, r7, #16
 800188e:	4619      	mov	r1, r3
 8001890:	481a      	ldr	r0, [pc, #104]	; (80018fc <INIT_ADC+0x100>)
 8001892:	f7ff fbcf 	bl	8001034 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	4818      	ldr	r0, [pc, #96]	; (8001900 <INIT_ADC+0x104>)
 800189e:	f7ff fbc9 	bl	8001034 <ADC_Init>

	/* Establecer la configuración de conversión ------------------------------*/
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
 80018a2:	2101      	movs	r1, #1
 80018a4:	4815      	ldr	r0, [pc, #84]	; (80018fc <INIT_ADC+0x100>)
 80018a6:	f7ff fd26 	bl	80012f6 <ADC_InjectedSequencerLengthConfig>
	ADC_SetInjectedOffset(ADC1, ADC_InjectedChannel_1, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2114      	movs	r1, #20
 80018ae:	4813      	ldr	r0, [pc, #76]	; (80018fc <INIT_ADC+0x100>)
 80018b0:	f7ff fd43 	bl	800133a <ADC_SetInjectedOffset>
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_10, 1,
 80018b4:	2307      	movs	r3, #7
 80018b6:	2201      	movs	r2, #1
 80018b8:	210a      	movs	r1, #10
 80018ba:	4810      	ldr	r0, [pc, #64]	; (80018fc <INIT_ADC+0x100>)
 80018bc:	f7ff fc8a 	bl	80011d4 <ADC_InjectedChannelConfig>
			ADC_SampleTime_480Cycles);

	/* Establecer la configuración de conversión ------------------------------*/
	ADC_InjectedSequencerLengthConfig(ADC2, 1);
 80018c0:	2101      	movs	r1, #1
 80018c2:	480f      	ldr	r0, [pc, #60]	; (8001900 <INIT_ADC+0x104>)
 80018c4:	f7ff fd17 	bl	80012f6 <ADC_InjectedSequencerLengthConfig>
	ADC_SetInjectedOffset(ADC2, ADC_InjectedChannel_1, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	2114      	movs	r1, #20
 80018cc:	480c      	ldr	r0, [pc, #48]	; (8001900 <INIT_ADC+0x104>)
 80018ce:	f7ff fd34 	bl	800133a <ADC_SetInjectedOffset>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_13, 1,
 80018d2:	2307      	movs	r3, #7
 80018d4:	2201      	movs	r2, #1
 80018d6:	210d      	movs	r1, #13
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <INIT_ADC+0x104>)
 80018da:	f7ff fc7b 	bl	80011d4 <ADC_InjectedChannelConfig>
			ADC_SampleTime_480Cycles);

	/* Poner en marcha ADC ----------------------------------------------------*/
	ADC_Cmd(ADC1, ENABLE);
 80018de:	2101      	movs	r1, #1
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <INIT_ADC+0x100>)
 80018e2:	f7ff fc5b 	bl	800119c <ADC_Cmd>

	/* Poner en marcha ADC ----------------------------------------------------*/
	ADC_Cmd(ADC2, ENABLE);
 80018e6:	2101      	movs	r1, #1
 80018e8:	4805      	ldr	r0, [pc, #20]	; (8001900 <INIT_ADC+0x104>)
 80018ea:	f7ff fc57 	bl	800119c <ADC_Cmd>
}
 80018ee:	bf00      	nop
 80018f0:	3730      	adds	r7, #48	; 0x30
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40012000 	.word	0x40012000
 8001900:	40012100 	.word	0x40012100

08001904 <READ_ADC1>:

/*Lectura del ADC1:*/
int32_t READ_ADC1(void) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0

	uint32_t valor_adc;

	ADC_ClearFlag(ADC1, ADC_FLAG_JEOC);      // borrar flag de fin conversion
 800190a:	2104      	movs	r1, #4
 800190c:	480c      	ldr	r0, [pc, #48]	; (8001940 <READ_ADC1+0x3c>)
 800190e:	f7ff fd70 	bl	80013f2 <ADC_ClearFlag>

	ADC_SoftwareStartInjectedConv(ADC1);    // iniciar conversion
 8001912:	480b      	ldr	r0, [pc, #44]	; (8001940 <READ_ADC1+0x3c>)
 8001914:	f7ff fd2b 	bl	800136e <ADC_SoftwareStartInjectedConv>

	while (ADC_GetFlagStatus(ADC1, ADC_FLAG_JEOC) == RESET)
 8001918:	bf00      	nop
 800191a:	2104      	movs	r1, #4
 800191c:	4808      	ldr	r0, [pc, #32]	; (8001940 <READ_ADC1+0x3c>)
 800191e:	f7ff fd4e 	bl	80013be <ADC_GetFlagStatus>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f8      	beq.n	800191a <READ_ADC1+0x16>
		; // Espera fin de conversion

	valor_adc = ADC_GetInjectedConversionValue(ADC1, ADC_InjectedChannel_1); // obtiene Valor A-D
 8001928:	2114      	movs	r1, #20
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <READ_ADC1+0x3c>)
 800192c:	f7ff fd2f 	bl	800138e <ADC_GetInjectedConversionValue>
 8001930:	4603      	mov	r3, r0
 8001932:	607b      	str	r3, [r7, #4]

	return valor_adc;
 8001934:	687b      	ldr	r3, [r7, #4]
}
 8001936:	4618      	mov	r0, r3
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40012000 	.word	0x40012000

08001944 <INIT_TIM3>:
	* @param
	* @ej
		- INIT_TIM4();
******************************************************************************/
void INIT_TIM3()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* TIM3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 800194a:	2101      	movs	r1, #1
 800194c:	2002      	movs	r0, #2
 800194e:	f7ff fe29 	bl	80015a4 <RCC_APB1PeriphClockCmd>

	/* Enable the TIM3 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8001952:	231d      	movs	r3, #29
 8001954:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800195e:	2301      	movs	r3, #1
 8001960:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fb03 	bl	8000f70 <NVIC_Init>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <SET_TIM3>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void SET_TIM3(uint32_t TimeBase, uint32_t Freq)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
	uint16_t PrescalerValue = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	81fb      	strh	r3, [r7, #14]

	//Actualización de los valores del TIM4:
	SystemCoreClockUpdate();
 8001982:	f000 fd61 	bl	8002448 <SystemCoreClockUpdate>
	TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE);
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	4818      	ldr	r0, [pc, #96]	; (80019ec <SET_TIM3+0x78>)
 800198c:	f7ff fed6 	bl	800173c <TIM_ITConfig>
	TIM_Cmd(TIM3, DISABLE);
 8001990:	2100      	movs	r1, #0
 8001992:	4816      	ldr	r0, [pc, #88]	; (80019ec <SET_TIM3+0x78>)
 8001994:	f7ff feb2 	bl	80016fc <TIM_Cmd>

	/* Compute the prescaler value */
	PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / TimeBase) - 1;
 8001998:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <SET_TIM3+0x7c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	085a      	lsrs	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3b01      	subs	r3, #1
 80019a8:	81fb      	strh	r3, [r7, #14]

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = TimeBase / Freq - 1;
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	3b01      	subs	r3, #1
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <SET_TIM3+0x80>)
 80019b6:	6053      	str	r3, [r2, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 80019b8:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <SET_TIM3+0x80>)
 80019ba:	89fb      	ldrh	r3, [r7, #14]
 80019bc:	8013      	strh	r3, [r2, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 80019be:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <SET_TIM3+0x80>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <SET_TIM3+0x80>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 80019ca:	490a      	ldr	r1, [pc, #40]	; (80019f4 <SET_TIM3+0x80>)
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <SET_TIM3+0x78>)
 80019ce:	f7ff fe29 	bl	8001624 <TIM_TimeBaseInit>

	/* TIM Interrupts enable */
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2101      	movs	r1, #1
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <SET_TIM3+0x78>)
 80019d8:	f7ff feb0 	bl	800173c <TIM_ITConfig>

	/* TIM3 enable counter */
	TIM_Cmd(TIM3, ENABLE);
 80019dc:	2101      	movs	r1, #1
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <SET_TIM3+0x78>)
 80019e0:	f7ff fe8c 	bl	80016fc <TIM_Cmd>
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40000400 	.word	0x40000400
 80019f0:	20000078 	.word	0x20000078
 80019f4:	2000076c 	.word	0x2000076c

080019f8 <INIT_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- INIT_LCD_2x16(LCD_2X16);
******************************************************************************/
void INIT_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	  //Inicialización de los pines del LCD:
	  P_LCD_2x16_InitIO(LCD_2X16);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f852 	bl	8001aaa <P_LCD_2x16_InitIO>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_INIT_PAUSE);
 8001a06:	480f      	ldr	r0, [pc, #60]	; (8001a44 <INIT_LCD_2x16+0x4c>)
 8001a08:	f000 f8e2 	bl	8001bd0 <P_LCD_2x16_Delay>
	  // Init Sequenz starten
	  P_LCD_2x16_InitSequenz(LCD_2X16);
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 f8ef 	bl	8001bf0 <P_LCD_2x16_InitSequenz>
	  // LCD-Settings einstellen
	  P_LCD_2x16_Cmd(TLCD_CMD_INIT_DISPLAY, LCD_2X16);
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	2028      	movs	r0, #40	; 0x28
 8001a16:	f000 f947 	bl	8001ca8 <P_LCD_2x16_Cmd>
	  P_LCD_2x16_Cmd(TLCD_CMD_ENTRY_MODE, LCD_2X16);
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	2006      	movs	r0, #6
 8001a1e:	f000 f943 	bl	8001ca8 <P_LCD_2x16_Cmd>
	  // Display einschalten
	  P_LCD_2x16_Cmd(TLCD_CMD_DISP_M1, LCD_2X16);
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	200c      	movs	r0, #12
 8001a26:	f000 f93f 	bl	8001ca8 <P_LCD_2x16_Cmd>
	  // Display l�schen
	  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f000 f93b 	bl	8001ca8 <P_LCD_2x16_Cmd>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001a32:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a36:	f000 f8cb 	bl	8001bd0 <P_LCD_2x16_Delay>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	000186a0 	.word	0x000186a0

08001a48 <CLEAR_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- UB_LCD_2x16_Clear(LCD_2X16);
******************************************************************************/
void CLEAR_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  // Display l�schen
  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8001a50:	6879      	ldr	r1, [r7, #4]
 8001a52:	2001      	movs	r0, #1
 8001a54:	f000 f928 	bl	8001ca8 <P_LCD_2x16_Cmd>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001a58:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001a5c:	f000 f8b8 	bl	8001bd0 <P_LCD_2x16_Delay>
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <PRINT_LCD_2x16>:

	* @ej
		- PRINT_LCD_2x16(LCD_2X16, 0, 0, STR);
******************************************************************************/
void PRINT_LCD_2x16(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y, char *ptr)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	460b      	mov	r3, r1
 8001a74:	72fb      	strb	r3, [r7, #11]
 8001a76:	4613      	mov	r3, r2
 8001a78:	72bb      	strb	r3, [r7, #10]
  // Cursor setzen
  P_LCD_2x16_Cursor(LCD_2X16,x,y);
 8001a7a:	7aba      	ldrb	r2, [r7, #10]
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f994 	bl	8001dae <P_LCD_2x16_Cursor>
  // kompletten String ausgeben
  while (*ptr != 0) {
 8001a86:	e008      	b.n	8001a9a <PRINT_LCD_2x16+0x32>
    P_LCD_2x16_Data(*ptr, LCD_2X16);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	68f9      	ldr	r1, [r7, #12]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 f9b3 	bl	8001dfa <P_LCD_2x16_Data>
    ptr++;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	607b      	str	r3, [r7, #4]
  while (*ptr != 0) {
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f2      	bne.n	8001a88 <PRINT_LCD_2x16+0x20>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <P_LCD_2x16_InitIO>:
	else return 0;
}

//LCD:
void P_LCD_2x16_InitIO(LCD_2X16_t* LCD_2X16)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	TLCD_NAME_t lcd_pin;

	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	75fb      	strb	r3, [r7, #23]
 8001ab6:	e046      	b.n	8001b46 <P_LCD_2x16_InitIO+0x9c>
	{
		//Habilitacion del Clock para cada PIN:
		RCC_AHB1PeriphClockCmd(LCD_2X16[lcd_pin].TLCD_CLK, ENABLE);
 8001ab8:	7dfa      	ldrb	r2, [r7, #23]
 8001aba:	4613      	mov	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	2101      	movs	r1, #1
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd49 	bl	8001564 <RCC_AHB1PeriphClockCmd>

		//Configuracion como salidas digitales:
		GPIO_InitStructure.GPIO_Pin = LCD_2X16[lcd_pin].TLCD_PIN;
 8001ad2:	7dfa      	ldrb	r2, [r7, #23]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	461a      	mov	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	891b      	ldrh	r3, [r3, #8]
 8001ae4:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	743b      	strb	r3, [r7, #16]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001aea:	2300      	movs	r3, #0
 8001aec:	74bb      	strb	r3, [r7, #18]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	74fb      	strb	r3, [r7, #19]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001af2:	2302      	movs	r3, #2
 8001af4:	747b      	strb	r3, [r7, #17]
		GPIO_Init(LCD_2X16[lcd_pin].TLCD_PORT, &GPIO_InitStructure);
 8001af6:	7dfa      	ldrb	r2, [r7, #23]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	461a      	mov	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f107 020c 	add.w	r2, r7, #12
 8001b0c:	4611      	mov	r1, r2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fc7f 	bl	8001412 <GPIO_Init>

		//Default Wert einstellen
		if(LCD_2X16[lcd_pin].TLCD_INIT == Bit_RESET)
 8001b14:	7dfa      	ldrb	r2, [r7, #23]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4413      	add	r3, r2
 8001b24:	7c1b      	ldrb	r3, [r3, #16]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d105      	bne.n	8001b36 <P_LCD_2x16_InitIO+0x8c>
			P_LCD_2x16_PinLo(lcd_pin, LCD_2X16);
 8001b2a:	7dfb      	ldrb	r3, [r7, #23]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f810 	bl	8001b54 <P_LCD_2x16_PinLo>
 8001b34:	e004      	b.n	8001b40 <P_LCD_2x16_InitIO+0x96>
		else
			P_LCD_2x16_PinHi(lcd_pin, LCD_2X16);
 8001b36:	7dfb      	ldrb	r3, [r7, #23]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f829 	bl	8001b92 <P_LCD_2x16_PinHi>
	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	3301      	adds	r3, #1
 8001b44:	75fb      	strb	r3, [r7, #23]
 8001b46:	7dfb      	ldrb	r3, [r7, #23]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d9b5      	bls.n	8001ab8 <P_LCD_2x16_InitIO+0xe>
	}
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <P_LCD_2x16_PinLo>:

void P_LCD_2x16_PinLo(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRH = LCD_2X16[lcd_pin].TLCD_PIN;
 8001b60:	79fa      	ldrb	r2, [r7, #7]
 8001b62:	4613      	mov	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	6859      	ldr	r1, [r3, #4]
 8001b72:	79fa      	ldrb	r2, [r7, #7]
 8001b74:	4613      	mov	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4413      	add	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	891b      	ldrh	r3, [r3, #8]
 8001b84:	834b      	strh	r3, [r1, #26]
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <P_LCD_2x16_PinHi>:

void P_LCD_2x16_PinHi(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8001b92:	b480      	push	{r7}
 8001b94:	b083      	sub	sp, #12
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	6039      	str	r1, [r7, #0]
 8001b9c:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRL = LCD_2X16[lcd_pin].TLCD_PIN;
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4413      	add	r3, r2
 8001bae:	6859      	ldr	r1, [r3, #4]
 8001bb0:	79fa      	ldrb	r2, [r7, #7]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	461a      	mov	r2, r3
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	891b      	ldrh	r3, [r3, #8]
 8001bc2:	830b      	strh	r3, [r1, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <P_LCD_2x16_Delay>:

void P_LCD_2x16_Delay(volatile uint32_t nCount)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8001bd8:	bf00      	nop
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1fa      	bne.n	8001bda <P_LCD_2x16_Delay+0xa>
  {
  }
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <P_LCD_2x16_InitSequenz>:

void P_LCD_2x16_InitSequenz(LCD_2X16_t* LCD_2X16)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  //Inicializacion de la secuencia:
  P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16);
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7ff ffc9 	bl	8001b92 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	2003      	movs	r0, #3
 8001c04:	f7ff ffc5 	bl	8001b92 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	2004      	movs	r0, #4
 8001c0c:	f7ff ffa2 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001c10:	6879      	ldr	r1, [r7, #4]
 8001c12:	2005      	movs	r0, #5
 8001c14:	f7ff ff9e 	bl	8001b54 <P_LCD_2x16_PinLo>
  // Erster Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 f82d 	bl	8001c78 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001c1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c22:	f7ff ffd5 	bl	8001bd0 <P_LCD_2x16_Delay>
  // Zweiter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f826 	bl	8001c78 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001c2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c30:	f7ff ffce 	bl	8001bd0 <P_LCD_2x16_Delay>
  // Dritter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f81f 	bl	8001c78 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001c3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c3e:	f7ff ffc7 	bl	8001bd0 <P_LCD_2x16_Delay>
  // LCD-Modus einstellen (4Bit-Mode)
  P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	2002      	movs	r0, #2
 8001c46:	f7ff ff85 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f7ff ffa0 	bl	8001b92 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	2004      	movs	r0, #4
 8001c56:	f7ff ff7d 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	2005      	movs	r0, #5
 8001c5e:	f7ff ff79 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f808 	bl	8001c78 <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8001c68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c6c:	f7ff ffb0 	bl	8001bd0 <P_LCD_2x16_Delay>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <P_LCD_2x16_Clk>:

void P_LCD_2x16_Clk(LCD_2X16_t* LCD_2X16)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  // Pin-E auf Hi
  P_LCD_2x16_PinHi(TLCD_E, LCD_2X16);
 8001c80:	6879      	ldr	r1, [r7, #4]
 8001c82:	2001      	movs	r0, #1
 8001c84:	f7ff ff85 	bl	8001b92 <P_LCD_2x16_PinHi>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8001c88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8c:	f7ff ffa0 	bl	8001bd0 <P_LCD_2x16_Delay>
  // Pin-E auf Lo
  P_LCD_2x16_PinLo(TLCD_E, LCD_2X16);
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	2001      	movs	r0, #1
 8001c94:	f7ff ff5e 	bl	8001b54 <P_LCD_2x16_PinLo>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8001c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c9c:	f7ff ff98 	bl	8001bd0 <P_LCD_2x16_Delay>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <P_LCD_2x16_Cmd>:

void P_LCD_2x16_Cmd(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
  // RS=Lo (Command)
  P_LCD_2x16_PinLo(TLCD_RS, LCD_2X16);
 8001cb4:	6839      	ldr	r1, [r7, #0]
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff ff4c 	bl	8001b54 <P_LCD_2x16_PinLo>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	da04      	bge.n	8001cce <P_LCD_2x16_Cmd+0x26>
 8001cc4:	6839      	ldr	r1, [r7, #0]
 8001cc6:	2005      	movs	r0, #5
 8001cc8:	f7ff ff63 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001ccc:	e003      	b.n	8001cd6 <P_LCD_2x16_Cmd+0x2e>
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	2005      	movs	r0, #5
 8001cd2:	f7ff ff3f 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <P_LCD_2x16_Cmd+0x42>
 8001ce0:	6839      	ldr	r1, [r7, #0]
 8001ce2:	2004      	movs	r0, #4
 8001ce4:	f7ff ff55 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001ce8:	e003      	b.n	8001cf2 <P_LCD_2x16_Cmd+0x4a>
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	2004      	movs	r0, #4
 8001cee:	f7ff ff31 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d004      	beq.n	8001d06 <P_LCD_2x16_Cmd+0x5e>
 8001cfc:	6839      	ldr	r1, [r7, #0]
 8001cfe:	2003      	movs	r0, #3
 8001d00:	f7ff ff47 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001d04:	e003      	b.n	8001d0e <P_LCD_2x16_Cmd+0x66>
 8001d06:	6839      	ldr	r1, [r7, #0]
 8001d08:	2003      	movs	r0, #3
 8001d0a:	f7ff ff23 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 0310 	and.w	r3, r3, #16
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <P_LCD_2x16_Cmd+0x7a>
 8001d18:	6839      	ldr	r1, [r7, #0]
 8001d1a:	2002      	movs	r0, #2
 8001d1c:	f7ff ff39 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001d20:	e003      	b.n	8001d2a <P_LCD_2x16_Cmd+0x82>
 8001d22:	6839      	ldr	r1, [r7, #0]
 8001d24:	2002      	movs	r0, #2
 8001d26:	f7ff ff15 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8001d2a:	6838      	ldr	r0, [r7, #0]
 8001d2c:	f7ff ffa4 	bl	8001c78 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 0308 	and.w	r3, r3, #8
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d004      	beq.n	8001d44 <P_LCD_2x16_Cmd+0x9c>
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	2005      	movs	r0, #5
 8001d3e:	f7ff ff28 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001d42:	e003      	b.n	8001d4c <P_LCD_2x16_Cmd+0xa4>
 8001d44:	6839      	ldr	r1, [r7, #0]
 8001d46:	2005      	movs	r0, #5
 8001d48:	f7ff ff04 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d004      	beq.n	8001d60 <P_LCD_2x16_Cmd+0xb8>
 8001d56:	6839      	ldr	r1, [r7, #0]
 8001d58:	2004      	movs	r0, #4
 8001d5a:	f7ff ff1a 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001d5e:	e003      	b.n	8001d68 <P_LCD_2x16_Cmd+0xc0>
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	2004      	movs	r0, #4
 8001d64:	f7ff fef6 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d004      	beq.n	8001d7c <P_LCD_2x16_Cmd+0xd4>
 8001d72:	6839      	ldr	r1, [r7, #0]
 8001d74:	2003      	movs	r0, #3
 8001d76:	f7ff ff0c 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001d7a:	e003      	b.n	8001d84 <P_LCD_2x16_Cmd+0xdc>
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f7ff fee8 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <P_LCD_2x16_Cmd+0xf0>
 8001d8e:	6839      	ldr	r1, [r7, #0]
 8001d90:	2002      	movs	r0, #2
 8001d92:	f7ff fefe 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001d96:	e003      	b.n	8001da0 <P_LCD_2x16_Cmd+0xf8>
 8001d98:	6839      	ldr	r1, [r7, #0]
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f7ff feda 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8001da0:	6838      	ldr	r0, [r7, #0]
 8001da2:	f7ff ff69 	bl	8001c78 <P_LCD_2x16_Clk>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <P_LCD_2x16_Cursor>:

void P_LCD_2x16_Cursor(LCD_2X16_t* LCD_2X16, uint8_t x, uint8_t y)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b084      	sub	sp, #16
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	70fb      	strb	r3, [r7, #3]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	70bb      	strb	r3, [r7, #2]
  uint8_t wert;

  if(x>=TLCD_MAXX) x=0;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d901      	bls.n	8001dc8 <P_LCD_2x16_Cursor+0x1a>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	70fb      	strb	r3, [r7, #3]
  if(y>=TLCD_MAXY) y=0;
 8001dc8:	78bb      	ldrb	r3, [r7, #2]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d901      	bls.n	8001dd2 <P_LCD_2x16_Cursor+0x24>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	70bb      	strb	r3, [r7, #2]

  wert=(y<<6);
 8001dd2:	78bb      	ldrb	r3, [r7, #2]
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	73fb      	strb	r3, [r7, #15]
  wert|=x;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	78fb      	ldrb	r3, [r7, #3]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	73fb      	strb	r3, [r7, #15]
  wert|=0x80;
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001de6:	73fb      	strb	r3, [r7, #15]
  P_LCD_2x16_Cmd(wert,LCD_2X16);
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5b 	bl	8001ca8 <P_LCD_2x16_Cmd>
}
 8001df2:	bf00      	nop
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <P_LCD_2x16_Data>:

void P_LCD_2x16_Data(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	6039      	str	r1, [r7, #0]
 8001e04:	71fb      	strb	r3, [r7, #7]
  // RS=Hi (Data)
  P_LCD_2x16_PinHi(TLCD_RS, LCD_2X16);
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff fec2 	bl	8001b92 <P_LCD_2x16_PinHi>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da04      	bge.n	8001e20 <P_LCD_2x16_Data+0x26>
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	2005      	movs	r0, #5
 8001e1a:	f7ff feba 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001e1e:	e003      	b.n	8001e28 <P_LCD_2x16_Data+0x2e>
 8001e20:	6839      	ldr	r1, [r7, #0]
 8001e22:	2005      	movs	r0, #5
 8001e24:	f7ff fe96 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <P_LCD_2x16_Data+0x42>
 8001e32:	6839      	ldr	r1, [r7, #0]
 8001e34:	2004      	movs	r0, #4
 8001e36:	f7ff feac 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001e3a:	e003      	b.n	8001e44 <P_LCD_2x16_Data+0x4a>
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	2004      	movs	r0, #4
 8001e40:	f7ff fe88 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	f003 0320 	and.w	r3, r3, #32
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <P_LCD_2x16_Data+0x5e>
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	2003      	movs	r0, #3
 8001e52:	f7ff fe9e 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001e56:	e003      	b.n	8001e60 <P_LCD_2x16_Data+0x66>
 8001e58:	6839      	ldr	r1, [r7, #0]
 8001e5a:	2003      	movs	r0, #3
 8001e5c:	f7ff fe7a 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <P_LCD_2x16_Data+0x7a>
 8001e6a:	6839      	ldr	r1, [r7, #0]
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f7ff fe90 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001e72:	e003      	b.n	8001e7c <P_LCD_2x16_Data+0x82>
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	2002      	movs	r0, #2
 8001e78:	f7ff fe6c 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8001e7c:	6838      	ldr	r0, [r7, #0]
 8001e7e:	f7ff fefb 	bl	8001c78 <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f003 0308 	and.w	r3, r3, #8
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d004      	beq.n	8001e96 <P_LCD_2x16_Data+0x9c>
 8001e8c:	6839      	ldr	r1, [r7, #0]
 8001e8e:	2005      	movs	r0, #5
 8001e90:	f7ff fe7f 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001e94:	e003      	b.n	8001e9e <P_LCD_2x16_Data+0xa4>
 8001e96:	6839      	ldr	r1, [r7, #0]
 8001e98:	2005      	movs	r0, #5
 8001e9a:	f7ff fe5b 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <P_LCD_2x16_Data+0xb8>
 8001ea8:	6839      	ldr	r1, [r7, #0]
 8001eaa:	2004      	movs	r0, #4
 8001eac:	f7ff fe71 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001eb0:	e003      	b.n	8001eba <P_LCD_2x16_Data+0xc0>
 8001eb2:	6839      	ldr	r1, [r7, #0]
 8001eb4:	2004      	movs	r0, #4
 8001eb6:	f7ff fe4d 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d004      	beq.n	8001ece <P_LCD_2x16_Data+0xd4>
 8001ec4:	6839      	ldr	r1, [r7, #0]
 8001ec6:	2003      	movs	r0, #3
 8001ec8:	f7ff fe63 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001ecc:	e003      	b.n	8001ed6 <P_LCD_2x16_Data+0xdc>
 8001ece:	6839      	ldr	r1, [r7, #0]
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f7ff fe3f 	bl	8001b54 <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <P_LCD_2x16_Data+0xf0>
 8001ee0:	6839      	ldr	r1, [r7, #0]
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f7ff fe55 	bl	8001b92 <P_LCD_2x16_PinHi>
 8001ee8:	e003      	b.n	8001ef2 <P_LCD_2x16_Data+0xf8>
 8001eea:	6839      	ldr	r1, [r7, #0]
 8001eec:	2002      	movs	r0, #2
 8001eee:	f7ff fe31 	bl	8001b54 <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8001ef2:	6838      	ldr	r0, [r7, #0]
 8001ef4:	f7ff fec0 	bl	8001c78 <P_LCD_2x16_Clk>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <main>:

/*Variable para almacenar el cos(theta):*/
float	cosTheta 	= 0.0f;

int main(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
/*------------------------------------------------------------------------------
CONFIGURACION DEL MICRO:
------------------------------------------------------------------------------*/
	SystemInit();
 8001f04:	f000 fa6a 	bl	80023dc <SystemInit>

	/*Inicializacion del DISPLAY LCD:*/
	INIT_LCD_2x16(LCD_2X16);
 8001f08:	480a      	ldr	r0, [pc, #40]	; (8001f34 <main+0x34>)
 8001f0a:	f7ff fd75 	bl	80019f8 <INIT_LCD_2x16>

	/*Inicializacion del ADC:*/
	INIT_ADC();
 8001f0e:	f7ff fc75 	bl	80017fc <INIT_ADC>

	/*Inicialización del TIM3:*/
	INIT_TIM3();
 8001f12:	f7ff fd17 	bl	8001944 <INIT_TIM3>
	SET_TIM3(timeBase, FS);
 8001f16:	f241 3188 	movw	r1, #5000	; 0x1388
 8001f1a:	4807      	ldr	r0, [pc, #28]	; (8001f38 <main+0x38>)
 8001f1c:	f7ff fd2a 	bl	8001974 <SET_TIM3>
BUCLE PRINCIPAL:
------------------------------------------------------------------------------*/
	while(1)
	{
		/*Refresco del LCD cada 200mseg:*/
		if (lcd == ticksLCD)
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <main+0x3c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d1f9      	bne.n	8001f20 <main+0x20>
			LCD();
 8001f2c:	f000 f822 	bl	8001f74 <LCD>
		if (lcd == ticksLCD)
 8001f30:	e7f6      	b.n	8001f20 <main+0x20>
 8001f32:	bf00      	nop
 8001f34:	20000000 	.word	0x20000000
 8001f38:	00030d40 	.word	0x00030d40
 8001f3c:	2000071c 	.word	0x2000071c

08001f40 <TIM3_IRQHandler>:
}
/*------------------------------------------------------------------------------
INTERRUPCIONES:
------------------------------------------------------------------------------*/
/*Interrupcion al vencimiento de cuenta de TIM3 cada 1/FS:*/
void TIM3_IRQHandler(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) {
 8001f44:	2101      	movs	r1, #1
 8001f46:	4809      	ldr	r0, [pc, #36]	; (8001f6c <TIM3_IRQHandler+0x2c>)
 8001f48:	f7ff fc1c 	bl	8001784 <TIM_GetITStatus>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d00a      	beq.n	8001f68 <TIM3_IRQHandler+0x28>

		/*Se aumenta la variable para controlar el refresco del LCD:*/
		lcd++;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <TIM3_IRQHandler+0x30>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <TIM3_IRQHandler+0x30>)
 8001f5a:	6013      	str	r3, [r2, #0]

		/*Se toma una muestra en el ADC:*/
		ADC_PROCESSING();
 8001f5c:	f000 f896 	bl	800208c <ADC_PROCESSING>

		/*Actualizar flag TIM3:*/
        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8001f60:	2101      	movs	r1, #1
 8001f62:	4802      	ldr	r0, [pc, #8]	; (8001f6c <TIM3_IRQHandler+0x2c>)
 8001f64:	f7ff fc38 	bl	80017d8 <TIM_ClearITPendingBit>
	}
}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	2000071c 	.word	0x2000071c

08001f74 <LCD>:
/*------------------------------------------------------------------------------
TAREAS:
------------------------------------------------------------------------------*/
/*Mostrar datos en el LCD:*/
void LCD(void)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b095      	sub	sp, #84	; 0x54
 8001f78:	af00      	add	r7, sp, #0
	/*Reseteo de la variable del TS:*/
	lcd = 0;
 8001f7a:	4b3a      	ldr	r3, [pc, #232]	; (8002064 <LCD+0xf0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
	char buffApparentPow[lcdBufferLen];
	char buffReactivePow[lcdBufferLen];
	char buffCosTheta	[lcdBufferLen];

	/*Refresco del LCD:*/
	CLEAR_LCD_2x16(LCD_2X16);
 8001f80:	4839      	ldr	r0, [pc, #228]	; (8002068 <LCD+0xf4>)
 8001f82:	f7ff fd61 	bl	8001a48 <CLEAR_LCD_2x16>

	/*Calculo de la potencia activa:*/
	P();
 8001f86:	f000 f8d7 	bl	8002138 <P>

	/*Mostrar potencia activa:*/
	sprintf(buffActivePow, "P=%.1f W", activePow);
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <LCD+0xf8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe faea 	bl	8000568 <__aeabi_f2d>
 8001f94:	4603      	mov	r3, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	4933      	ldr	r1, [pc, #204]	; (8002070 <LCD+0xfc>)
 8001fa2:	f000 fb6d 	bl	8002680 <sprintf>
	PRINT_LCD_2x16(LCD_2X16, 0, 0, buffActivePow);
 8001fa6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001faa:	2200      	movs	r2, #0
 8001fac:	2100      	movs	r1, #0
 8001fae:	482e      	ldr	r0, [pc, #184]	; (8002068 <LCD+0xf4>)
 8001fb0:	f7ff fd5a 	bl	8001a68 <PRINT_LCD_2x16>

	/*Calculo de la potencia aparente:*/
	S();
 8001fb4:	f000 f8f0 	bl	8002198 <S>

	/*Mostrar potencia aparente:*/
	sprintf(buffApparentPow, "S=%.1f VA", apparentPow);
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <LCD+0x100>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7fe fad3 	bl	8000568 <__aeabi_f2d>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	460c      	mov	r4, r1
 8001fc6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001fca:	461a      	mov	r2, r3
 8001fcc:	4623      	mov	r3, r4
 8001fce:	492a      	ldr	r1, [pc, #168]	; (8002078 <LCD+0x104>)
 8001fd0:	f000 fb56 	bl	8002680 <sprintf>
	PRINT_LCD_2x16(LCD_2X16, 0, 1, buffApparentPow);
 8001fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fd8:	2201      	movs	r2, #1
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4822      	ldr	r0, [pc, #136]	; (8002068 <LCD+0xf4>)
 8001fde:	f7ff fd43 	bl	8001a68 <PRINT_LCD_2x16>

	/*Calculo de la potencia reactiva:*/
	Q();
 8001fe2:	f000 f95b 	bl	800229c <Q>

	/*Mostrar potencia reactiva:*/
	sprintf(buffReactivePow, "Q=%.1f VAR", reactivePow);
 8001fe6:	4b25      	ldr	r3, [pc, #148]	; (800207c <LCD+0x108>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fabc 	bl	8000568 <__aeabi_f2d>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	460c      	mov	r4, r1
 8001ff4:	f107 0014 	add.w	r0, r7, #20
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4623      	mov	r3, r4
 8001ffc:	4920      	ldr	r1, [pc, #128]	; (8002080 <LCD+0x10c>)
 8001ffe:	f000 fb3f 	bl	8002680 <sprintf>
	PRINT_LCD_2x16(LCD_2X16, 8, 0, buffReactivePow);
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	2200      	movs	r2, #0
 8002008:	2108      	movs	r1, #8
 800200a:	4817      	ldr	r0, [pc, #92]	; (8002068 <LCD+0xf4>)
 800200c:	f7ff fd2c 	bl	8001a68 <PRINT_LCD_2x16>

	/*Calculo del cos(theta):*/
	COS_THETA();
 8002010:	f000 f974 	bl	80022fc <COS_THETA>

	/*Mostrar cos(theta):*/
	sprintf(buffCosTheta, "fdp=%.1f", cosTheta);
 8002014:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <LCD+0x110>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe faa5 	bl	8000568 <__aeabi_f2d>
 800201e:	4603      	mov	r3, r0
 8002020:	460c      	mov	r4, r1
 8002022:	4638      	mov	r0, r7
 8002024:	461a      	mov	r2, r3
 8002026:	4623      	mov	r3, r4
 8002028:	4917      	ldr	r1, [pc, #92]	; (8002088 <LCD+0x114>)
 800202a:	f000 fb29 	bl	8002680 <sprintf>
	PRINT_LCD_2x16(LCD_2X16, 8, 1, buffCosTheta);
 800202e:	463b      	mov	r3, r7
 8002030:	2201      	movs	r2, #1
 8002032:	2108      	movs	r1, #8
 8002034:	480c      	ldr	r0, [pc, #48]	; (8002068 <LCD+0xf4>)
 8002036:	f7ff fd17 	bl	8001a68 <PRINT_LCD_2x16>

	/*Reseteo de las variables de calculo de potencia:*/
	activePow 	= 0.0f;
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <LCD+0xf8>)
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	601a      	str	r2, [r3, #0]
	apparentPow = 0.0f;
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <LCD+0x100>)
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
	reactivePow = 0.0f;
 800204a:	4b0c      	ldr	r3, [pc, #48]	; (800207c <LCD+0x108>)
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
	cosTheta	= 0.0f;
 8002052:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <LCD+0x110>)
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
}
 800205a:	bf00      	nop
 800205c:	3754      	adds	r7, #84	; 0x54
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}
 8002062:	bf00      	nop
 8002064:	2000071c 	.word	0x2000071c
 8002068:	20000000 	.word	0x20000000
 800206c:	20000724 	.word	0x20000724
 8002070:	080056b0 	.word	0x080056b0
 8002074:	20000728 	.word	0x20000728
 8002078:	080056bc 	.word	0x080056bc
 800207c:	2000072c 	.word	0x2000072c
 8002080:	080056c8 	.word	0x080056c8
 8002084:	20000730 	.word	0x20000730
 8002088:	080056d4 	.word	0x080056d4

0800208c <ADC_PROCESSING>:

/*Tomar muestras de tension y corriente mediante los ADC:*/
void ADC_PROCESSING(void)
{
 800208c:	b598      	push	{r3, r4, r7, lr}
 800208e:	af00      	add	r7, sp, #0
	/*Almacenar dato de tension digital instantanea:*/
	voltValueDig[instant] = READ_ADC1();
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <ADC_PROCESSING+0x88>)
 8002092:	681c      	ldr	r4, [r3, #0]
 8002094:	f7ff fc36 	bl	8001904 <READ_ADC1>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <ADC_PROCESSING+0x8c>)
 800209e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]

	/*Conversion y almacenamiento de dato de tension analogico de 0 a 310 Vpp:*/
	voltValueAna[instant] = (float) voltValueDig[instant] * maxVoltValue / maxDigValue - 311;
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <ADC_PROCESSING+0x88>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <ADC_PROCESSING+0x88>)
 80020a8:	6812      	ldr	r2, [r2, #0]
 80020aa:	491b      	ldr	r1, [pc, #108]	; (8002118 <ADC_PROCESSING+0x8c>)
 80020ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80020b0:	ee07 2a90 	vmov	s15, r2
 80020b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020b8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800211c <ADC_PROCESSING+0x90>
 80020bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 8002120 <ADC_PROCESSING+0x94>
 80020c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020c8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002124 <ADC_PROCESSING+0x98>
 80020cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020d0:	4a15      	ldr	r2, [pc, #84]	; (8002128 <ADC_PROCESSING+0x9c>)
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	edc3 7a00 	vstr	s15, [r3]

	/*Almacenar dato de corriente digital instantanea:*/
	//currValueDig[instant] = READ_ADC2();
	currValueDig[instant] = 4095 / 2;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <ADC_PROCESSING+0x88>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <ADC_PROCESSING+0xa0>)
 80020e0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80020e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	/*TODO: BUSCAR EL VALOR MAXIMO DE CORRIENTE PARA LA CONVERSION.*/

	/*Conversion y almacenamiento de dato de corriente analogica:*/
//	currValueAna[instant] = (float) currValueDig[instant] * maxCurrValue / maxDigValue;
	currValueAna[instant] = (float) 277.5e-3;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <ADC_PROCESSING+0x88>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a10      	ldr	r2, [pc, #64]	; (8002130 <ADC_PROCESSING+0xa4>)
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <ADC_PROCESSING+0xa8>)
 80020f4:	601a      	str	r2, [r3, #0]

	/*Control de la variable para almacenar datos instantaneos:*/
	/*Si esta en el maximo instante de muestreo se resetea:*/
	if (instant == maxSampling)
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <ADC_PROCESSING+0x88>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b64      	cmp	r3, #100	; 0x64
 80020fc:	d103      	bne.n	8002106 <ADC_PROCESSING+0x7a>
		instant = 0;
 80020fe:	4b05      	ldr	r3, [pc, #20]	; (8002114 <ADC_PROCESSING+0x88>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
	/*Sino, se sigue aumentando:*/
	else
		instant++;
}
 8002104:	e004      	b.n	8002110 <ADC_PROCESSING+0x84>
		instant++;
 8002106:	4b03      	ldr	r3, [pc, #12]	; (8002114 <ADC_PROCESSING+0x88>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3301      	adds	r3, #1
 800210c:	4a01      	ldr	r2, [pc, #4]	; (8002114 <ADC_PROCESSING+0x88>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	bd98      	pop	{r3, r4, r7, pc}
 8002114:	20000720 	.word	0x20000720
 8002118:	20000934 	.word	0x20000934
 800211c:	441b8000 	.word	0x441b8000
 8002120:	457ff000 	.word	0x457ff000
 8002124:	439b8000 	.word	0x439b8000
 8002128:	20000ac4 	.word	0x20000ac4
 800212c:	20000c54 	.word	0x20000c54
 8002130:	200007a4 	.word	0x200007a4
 8002134:	3e8e147b 	.word	0x3e8e147b

08002138 <P>:

/*Calculo de la potencia activa:*/
void P(void)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
	/*Variable para el conteo de ciclos:*/
	uint32_t i = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	607b      	str	r3, [r7, #4]

	/*P es la sumatoria del producto de valores instantaneos de tension y corriente:*/
	for (i = 0; i < maxSampling; i++)
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
 8002146:	e018      	b.n	800217a <P+0x42>
		activePow += (float) voltValueAna[i]*currValueAna[i];
 8002148:	4a10      	ldr	r2, [pc, #64]	; (800218c <P+0x54>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	ed93 7a00 	vldr	s14, [r3]
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <P+0x58>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4413      	add	r3, r2
 800215c:	edd3 7a00 	vldr	s15, [r3]
 8002160:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <P+0x5c>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <P+0x5c>)
 8002170:	edc3 7a00 	vstr	s15, [r3]
	for (i = 0; i < maxSampling; i++)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b63      	cmp	r3, #99	; 0x63
 800217e:	d9e3      	bls.n	8002148 <P+0x10>
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	20000ac4 	.word	0x20000ac4
 8002190:	200007a4 	.word	0x200007a4
 8002194:	20000724 	.word	0x20000724

08002198 <S>:

/*Calculo de la potencia aparente:*/
void S(void)
{
 8002198:	b590      	push	{r4, r7, lr}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
	/*Variable para el conteo de ciclos:*/
	uint32_t i = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
	uint32_t k = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]

	/*Modulo de la tension:*/
	float	 voltMod = 0.0f;
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	607b      	str	r3, [r7, #4]
	float 	 sumVoltElem = 0.0f;
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]

	/*Modulo de la corriente:*/
	float 	 currMod = 0.0f;
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	603b      	str	r3, [r7, #0]
	float 	 sumCurrElem = 0.0f;
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]

	/*Suma de los cuadrados de cada elemento de tension y corriente:*/
	for (i = 0; i < maxSampling; i++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e02a      	b.n	800221a <S+0x82>
	{
		sumVoltElem += voltValueAna[i]*voltValueAna[i];
 80021c4:	4a32      	ldr	r2, [pc, #200]	; (8002290 <S+0xf8>)
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	ed93 7a00 	vldr	s14, [r3]
 80021d0:	4a2f      	ldr	r2, [pc, #188]	; (8002290 <S+0xf8>)
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	4413      	add	r3, r2
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e0:	ed97 7a03 	vldr	s14, [r7, #12]
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	edc7 7a03 	vstr	s15, [r7, #12]
		sumCurrElem += currValueAna[i]*currValueAna[i];
 80021ec:	4a29      	ldr	r2, [pc, #164]	; (8002294 <S+0xfc>)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	ed93 7a00 	vldr	s14, [r3]
 80021f8:	4a26      	ldr	r2, [pc, #152]	; (8002294 <S+0xfc>)
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002208:	ed97 7a02 	vldr	s14, [r7, #8]
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	edc7 7a02 	vstr	s15, [r7, #8]
	for (i = 0; i < maxSampling; i++)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b63      	cmp	r3, #99	; 0x63
 800221e:	d9d1      	bls.n	80021c4 <S+0x2c>
	}

	/*Se calculan los modulos y la potencia reactiva:*/
	for(k = 0; k < maxSampling; k++)
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	e02d      	b.n	8002282 <S+0xea>
	{
		/*Modulo de la tension:*/
		voltMod = sqrt(sumVoltElem);
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f7fe f99e 	bl	8000568 <__aeabi_f2d>
 800222c:	4603      	mov	r3, r0
 800222e:	460c      	mov	r4, r1
 8002230:	ec44 3b10 	vmov	d0, r3, r4
 8002234:	f003 f910 	bl	8005458 <sqrt>
 8002238:	ec54 3b10 	vmov	r3, r4, d0
 800223c:	4618      	mov	r0, r3
 800223e:	4621      	mov	r1, r4
 8002240:	f7fe fcbe 	bl	8000bc0 <__aeabi_d2f>
 8002244:	4603      	mov	r3, r0
 8002246:	607b      	str	r3, [r7, #4]

		/*Modulo de la corriente:*/
		currMod = sqrt(sumCurrElem);
 8002248:	68b8      	ldr	r0, [r7, #8]
 800224a:	f7fe f98d 	bl	8000568 <__aeabi_f2d>
 800224e:	4603      	mov	r3, r0
 8002250:	460c      	mov	r4, r1
 8002252:	ec44 3b10 	vmov	d0, r3, r4
 8002256:	f003 f8ff 	bl	8005458 <sqrt>
 800225a:	ec54 3b10 	vmov	r3, r4, d0
 800225e:	4618      	mov	r0, r3
 8002260:	4621      	mov	r1, r4
 8002262:	f7fe fcad 	bl	8000bc0 <__aeabi_d2f>
 8002266:	4603      	mov	r3, r0
 8002268:	603b      	str	r3, [r7, #0]

		/*S es el producto de los modulos de tension y corriente:*/
		apparentPow = voltMod*currMod;
 800226a:	ed97 7a01 	vldr	s14, [r7, #4]
 800226e:	edd7 7a00 	vldr	s15, [r7]
 8002272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002276:	4b08      	ldr	r3, [pc, #32]	; (8002298 <S+0x100>)
 8002278:	edc3 7a00 	vstr	s15, [r3]
	for(k = 0; k < maxSampling; k++)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	3301      	adds	r3, #1
 8002280:	613b      	str	r3, [r7, #16]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b63      	cmp	r3, #99	; 0x63
 8002286:	d9ce      	bls.n	8002226 <S+0x8e>
	}
}
 8002288:	bf00      	nop
 800228a:	371c      	adds	r7, #28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	20000ac4 	.word	0x20000ac4
 8002294:	200007a4 	.word	0x200007a4
 8002298:	20000728 	.word	0x20000728

0800229c <Q>:

/*Calculo de la potencia reactiva:*/
void Q(void)
{
 800229c:	b598      	push	{r3, r4, r7, lr}
 800229e:	af00      	add	r7, sp, #0
	/*Q se calcula a partir del triangulo de potencias:*/
	/*S^2 = P^2 + Q^2*/
	reactivePow = sqrt(apparentPow*apparentPow - activePow*activePow);
 80022a0:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <Q+0x54>)
 80022a2:	ed93 7a00 	vldr	s14, [r3]
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <Q+0x54>)
 80022a8:	edd3 7a00 	vldr	s15, [r3]
 80022ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <Q+0x58>)
 80022b2:	edd3 6a00 	vldr	s13, [r3]
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <Q+0x58>)
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c4:	ee17 0a90 	vmov	r0, s15
 80022c8:	f7fe f94e 	bl	8000568 <__aeabi_f2d>
 80022cc:	4603      	mov	r3, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	ec44 3b10 	vmov	d0, r3, r4
 80022d4:	f003 f8c0 	bl	8005458 <sqrt>
 80022d8:	ec54 3b10 	vmov	r3, r4, d0
 80022dc:	4618      	mov	r0, r3
 80022de:	4621      	mov	r1, r4
 80022e0:	f7fe fc6e 	bl	8000bc0 <__aeabi_d2f>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <Q+0x5c>)
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	bd98      	pop	{r3, r4, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000728 	.word	0x20000728
 80022f4:	20000724 	.word	0x20000724
 80022f8:	2000072c 	.word	0x2000072c

080022fc <COS_THETA>:

/*Calculo del coseno de theta:*/
void COS_THETA(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	/*P = S * cos(theta):*/
	cosTheta = activePow / apparentPow;
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <COS_THETA+0x24>)
 8002302:	edd3 6a00 	vldr	s13, [r3]
 8002306:	4b07      	ldr	r3, [pc, #28]	; (8002324 <COS_THETA+0x28>)
 8002308:	ed93 7a00 	vldr	s14, [r3]
 800230c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <COS_THETA+0x2c>)
 8002312:	edc3 7a00 	vstr	s15, [r3]
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	20000724 	.word	0x20000724
 8002324:	20000728 	.word	0x20000728
 8002328:	20000730 	.word	0x20000730

0800232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002364 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002332:	e003      	b.n	800233c <LoopCopyDataInit>

08002334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002334:	4b0c      	ldr	r3, [pc, #48]	; (8002368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800233a:	3104      	adds	r1, #4

0800233c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800233c:	480b      	ldr	r0, [pc, #44]	; (800236c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002344:	d3f6      	bcc.n	8002334 <CopyDataInit>
  ldr  r2, =_sbss
 8002346:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002348:	e002      	b.n	8002350 <LoopFillZerobss>

0800234a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800234a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800234c:	f842 3b04 	str.w	r3, [r2], #4

08002350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002354:	d3f9      	bcc.n	800234a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002356:	f000 f841 	bl	80023dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800235a:	f000 f96d 	bl	8002638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800235e:	f7ff fdcf 	bl	8001f00 <main>
  bx  lr    
 8002362:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002364:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002368:	0800595c 	.word	0x0800595c
  ldr  r0, =_sdata
 800236c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002370:	20000700 	.word	0x20000700
  ldr  r2, =_sbss
 8002374:	20000700 	.word	0x20000700
  ldr  r3, = _ebss
 8002378:	20000df4 	.word	0x20000df4

0800237c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800237c:	e7fe      	b.n	800237c <ADC_IRQHandler>

0800237e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002390:	e7fe      	b.n	8002390 <HardFault_Handler+0x4>

08002392 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002396:	e7fe      	b.n	8002396 <MemManage_Handler+0x4>

08002398 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800239c:	e7fe      	b.n	800239c <BusFault_Handler+0x4>

0800239e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <UsageFault_Handler+0x4>

080023a4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80023d2:	bf00      	nop
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023e0:	4a16      	ldr	r2, [pc, #88]	; (800243c <SystemInit+0x60>)
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <SystemInit+0x60>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <SystemInit+0x64>)
 80023f2:	4b13      	ldr	r3, [pc, #76]	; (8002440 <SystemInit+0x64>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <SystemInit+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <SystemInit+0x64>)
 8002404:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <SystemInit+0x64>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800240c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <SystemInit+0x64>)
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <SystemInit+0x68>)
 8002416:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002418:	4a09      	ldr	r2, [pc, #36]	; (8002440 <SystemInit+0x64>)
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <SystemInit+0x64>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002422:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <SystemInit+0x64>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800242a:	f000 f889 	bl	8002540 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800242e:	4b03      	ldr	r3, [pc, #12]	; (800243c <SystemInit+0x60>)
 8002430:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002434:	609a      	str	r2, [r3, #8]
#endif
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000ed00 	.word	0xe000ed00
 8002440:	40023800 	.word	0x40023800
 8002444:	24003010 	.word	0x24003010

08002448 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	2302      	movs	r3, #2
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	2300      	movs	r3, #0
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	2302      	movs	r3, #2
 8002460:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002462:	4b32      	ldr	r3, [pc, #200]	; (800252c <SystemCoreClockUpdate+0xe4>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	2b04      	cmp	r3, #4
 8002470:	d007      	beq.n	8002482 <SystemCoreClockUpdate+0x3a>
 8002472:	2b08      	cmp	r3, #8
 8002474:	d009      	beq.n	800248a <SystemCoreClockUpdate+0x42>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d13d      	bne.n	80024f6 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <SystemCoreClockUpdate+0xe8>)
 800247c:	4a2d      	ldr	r2, [pc, #180]	; (8002534 <SystemCoreClockUpdate+0xec>)
 800247e:	601a      	str	r2, [r3, #0]
      break;
 8002480:	e03d      	b.n	80024fe <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002482:	4b2b      	ldr	r3, [pc, #172]	; (8002530 <SystemCoreClockUpdate+0xe8>)
 8002484:	4a2c      	ldr	r2, [pc, #176]	; (8002538 <SystemCoreClockUpdate+0xf0>)
 8002486:	601a      	str	r2, [r3, #0]
      break;
 8002488:	e039      	b.n	80024fe <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <SystemCoreClockUpdate+0xe4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	0d9b      	lsrs	r3, r3, #22
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002496:	4b25      	ldr	r3, [pc, #148]	; (800252c <SystemCoreClockUpdate+0xe4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800249e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80024a6:	4a24      	ldr	r2, [pc, #144]	; (8002538 <SystemCoreClockUpdate+0xf0>)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4a1f      	ldr	r2, [pc, #124]	; (800252c <SystemCoreClockUpdate+0xe4>)
 80024b0:	6852      	ldr	r2, [r2, #4]
 80024b2:	0992      	lsrs	r2, r2, #6
 80024b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b8:	fb02 f303 	mul.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	e00b      	b.n	80024d8 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80024c0:	4a1c      	ldr	r2, [pc, #112]	; (8002534 <SystemCoreClockUpdate+0xec>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <SystemCoreClockUpdate+0xe4>)
 80024ca:	6852      	ldr	r2, [r2, #4]
 80024cc:	0992      	lsrs	r2, r2, #6
 80024ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <SystemCoreClockUpdate+0xe4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f0:	4a0f      	ldr	r2, [pc, #60]	; (8002530 <SystemCoreClockUpdate+0xe8>)
 80024f2:	6013      	str	r3, [r2, #0]
      break;
 80024f4:	e003      	b.n	80024fe <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <SystemCoreClockUpdate+0xe8>)
 80024f8:	4a0e      	ldr	r2, [pc, #56]	; (8002534 <SystemCoreClockUpdate+0xec>)
 80024fa:	601a      	str	r2, [r3, #0]
      break;
 80024fc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <SystemCoreClockUpdate+0xe4>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	f003 030f 	and.w	r3, r3, #15
 8002508:	4a0c      	ldr	r2, [pc, #48]	; (800253c <SystemCoreClockUpdate+0xf4>)
 800250a:	5cd3      	ldrb	r3, [r2, r3]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <SystemCoreClockUpdate+0xe8>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	fa22 f303 	lsr.w	r3, r2, r3
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <SystemCoreClockUpdate+0xe8>)
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	371c      	adds	r7, #28
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40023800 	.word	0x40023800
 8002530:	20000078 	.word	0x20000078
 8002534:	00f42400 	.word	0x00f42400
 8002538:	007a1200 	.word	0x007a1200
 800253c:	2000007c 	.word	0x2000007c

08002540 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	2300      	movs	r3, #0
 800254c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800254e:	4a36      	ldr	r2, [pc, #216]	; (8002628 <SetSysClock+0xe8>)
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <SetSysClock+0xe8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <SetSysClock+0xe8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002562:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3301      	adds	r3, #1
 8002568:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d103      	bne.n	8002578 <SetSysClock+0x38>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002576:	d1f0      	bne.n	800255a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <SetSysClock+0xe8>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d002      	beq.n	800258a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002584:	2301      	movs	r3, #1
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	e001      	b.n	800258e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d142      	bne.n	800261a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002594:	4a24      	ldr	r2, [pc, #144]	; (8002628 <SetSysClock+0xe8>)
 8002596:	4b24      	ldr	r3, [pc, #144]	; (8002628 <SetSysClock+0xe8>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <SetSysClock+0xec>)
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <SetSysClock+0xec>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025aa:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80025ac:	4a1e      	ldr	r2, [pc, #120]	; (8002628 <SetSysClock+0xe8>)
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <SetSysClock+0xe8>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80025b4:	4a1c      	ldr	r2, [pc, #112]	; (8002628 <SetSysClock+0xe8>)
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <SetSysClock+0xe8>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025be:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80025c0:	4a19      	ldr	r2, [pc, #100]	; (8002628 <SetSysClock+0xe8>)
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <SetSysClock+0xe8>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80025ca:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <SetSysClock+0xe8>)
 80025ce:	4a18      	ldr	r2, [pc, #96]	; (8002630 <SetSysClock+0xf0>)
 80025d0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <SetSysClock+0xe8>)
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <SetSysClock+0xe8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025dc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80025de:	bf00      	nop
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <SetSysClock+0xe8>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f9      	beq.n	80025e0 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <SetSysClock+0xf4>)
 80025ee:	f240 7205 	movw	r2, #1797	; 0x705
 80025f2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <SetSysClock+0xe8>)
 80025f6:	4b0c      	ldr	r3, [pc, #48]	; (8002628 <SetSysClock+0xe8>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f023 0303 	bic.w	r3, r3, #3
 80025fe:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002600:	4a09      	ldr	r2, [pc, #36]	; (8002628 <SetSysClock+0xe8>)
 8002602:	4b09      	ldr	r3, [pc, #36]	; (8002628 <SetSysClock+0xe8>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f043 0302 	orr.w	r3, r3, #2
 800260a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800260c:	bf00      	nop
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <SetSysClock+0xe8>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b08      	cmp	r3, #8
 8002618:	d1f9      	bne.n	800260e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800261a:	bf00      	nop
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000
 8002630:	07402d04 	.word	0x07402d04
 8002634:	40023c00 	.word	0x40023c00

08002638 <__libc_init_array>:
 8002638:	b570      	push	{r4, r5, r6, lr}
 800263a:	4e0d      	ldr	r6, [pc, #52]	; (8002670 <__libc_init_array+0x38>)
 800263c:	4c0d      	ldr	r4, [pc, #52]	; (8002674 <__libc_init_array+0x3c>)
 800263e:	1ba4      	subs	r4, r4, r6
 8002640:	10a4      	asrs	r4, r4, #2
 8002642:	2500      	movs	r5, #0
 8002644:	42a5      	cmp	r5, r4
 8002646:	d109      	bne.n	800265c <__libc_init_array+0x24>
 8002648:	4e0b      	ldr	r6, [pc, #44]	; (8002678 <__libc_init_array+0x40>)
 800264a:	4c0c      	ldr	r4, [pc, #48]	; (800267c <__libc_init_array+0x44>)
 800264c:	f003 f824 	bl	8005698 <_init>
 8002650:	1ba4      	subs	r4, r4, r6
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	2500      	movs	r5, #0
 8002656:	42a5      	cmp	r5, r4
 8002658:	d105      	bne.n	8002666 <__libc_init_array+0x2e>
 800265a:	bd70      	pop	{r4, r5, r6, pc}
 800265c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002660:	4798      	blx	r3
 8002662:	3501      	adds	r5, #1
 8002664:	e7ee      	b.n	8002644 <__libc_init_array+0xc>
 8002666:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800266a:	4798      	blx	r3
 800266c:	3501      	adds	r5, #1
 800266e:	e7f2      	b.n	8002656 <__libc_init_array+0x1e>
 8002670:	08005954 	.word	0x08005954
 8002674:	08005954 	.word	0x08005954
 8002678:	08005954 	.word	0x08005954
 800267c:	08005958 	.word	0x08005958

08002680 <sprintf>:
 8002680:	b40e      	push	{r1, r2, r3}
 8002682:	b500      	push	{lr}
 8002684:	b09c      	sub	sp, #112	; 0x70
 8002686:	f44f 7102 	mov.w	r1, #520	; 0x208
 800268a:	ab1d      	add	r3, sp, #116	; 0x74
 800268c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8002690:	9002      	str	r0, [sp, #8]
 8002692:	9006      	str	r0, [sp, #24]
 8002694:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002698:	480a      	ldr	r0, [pc, #40]	; (80026c4 <sprintf+0x44>)
 800269a:	9104      	str	r1, [sp, #16]
 800269c:	9107      	str	r1, [sp, #28]
 800269e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80026a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80026a6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80026aa:	6800      	ldr	r0, [r0, #0]
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	a902      	add	r1, sp, #8
 80026b0:	f000 f80a 	bl	80026c8 <_svfprintf_r>
 80026b4:	9b02      	ldr	r3, [sp, #8]
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	b01c      	add	sp, #112	; 0x70
 80026bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80026c0:	b003      	add	sp, #12
 80026c2:	4770      	bx	lr
 80026c4:	2000008c 	.word	0x2000008c

080026c8 <_svfprintf_r>:
 80026c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026cc:	b0bd      	sub	sp, #244	; 0xf4
 80026ce:	468a      	mov	sl, r1
 80026d0:	4615      	mov	r5, r2
 80026d2:	461f      	mov	r7, r3
 80026d4:	4683      	mov	fp, r0
 80026d6:	f001 fe25 	bl	8004324 <_localeconv_r>
 80026da:	6803      	ldr	r3, [r0, #0]
 80026dc:	930d      	str	r3, [sp, #52]	; 0x34
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fdd6 	bl	8000290 <strlen>
 80026e4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80026e8:	9008      	str	r0, [sp, #32]
 80026ea:	061b      	lsls	r3, r3, #24
 80026ec:	d518      	bpl.n	8002720 <_svfprintf_r+0x58>
 80026ee:	f8da 3010 	ldr.w	r3, [sl, #16]
 80026f2:	b9ab      	cbnz	r3, 8002720 <_svfprintf_r+0x58>
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4658      	mov	r0, fp
 80026f8:	f001 fe2a 	bl	8004350 <_malloc_r>
 80026fc:	f8ca 0000 	str.w	r0, [sl]
 8002700:	f8ca 0010 	str.w	r0, [sl, #16]
 8002704:	b948      	cbnz	r0, 800271a <_svfprintf_r+0x52>
 8002706:	230c      	movs	r3, #12
 8002708:	f8cb 3000 	str.w	r3, [fp]
 800270c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002710:	9309      	str	r3, [sp, #36]	; 0x24
 8002712:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002714:	b03d      	add	sp, #244	; 0xf4
 8002716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800271a:	2340      	movs	r3, #64	; 0x40
 800271c:	f8ca 3014 	str.w	r3, [sl, #20]
 8002720:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002988 <_svfprintf_r+0x2c0>
 8002724:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002728:	2300      	movs	r3, #0
 800272a:	ac2c      	add	r4, sp, #176	; 0xb0
 800272c:	941f      	str	r4, [sp, #124]	; 0x7c
 800272e:	9321      	str	r3, [sp, #132]	; 0x84
 8002730:	9320      	str	r3, [sp, #128]	; 0x80
 8002732:	9505      	str	r5, [sp, #20]
 8002734:	9303      	str	r3, [sp, #12]
 8002736:	9311      	str	r3, [sp, #68]	; 0x44
 8002738:	9310      	str	r3, [sp, #64]	; 0x40
 800273a:	9309      	str	r3, [sp, #36]	; 0x24
 800273c:	9d05      	ldr	r5, [sp, #20]
 800273e:	462b      	mov	r3, r5
 8002740:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002744:	b112      	cbz	r2, 800274c <_svfprintf_r+0x84>
 8002746:	2a25      	cmp	r2, #37	; 0x25
 8002748:	f040 8083 	bne.w	8002852 <_svfprintf_r+0x18a>
 800274c:	9b05      	ldr	r3, [sp, #20]
 800274e:	1aee      	subs	r6, r5, r3
 8002750:	d00d      	beq.n	800276e <_svfprintf_r+0xa6>
 8002752:	e884 0048 	stmia.w	r4, {r3, r6}
 8002756:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002758:	4433      	add	r3, r6
 800275a:	9321      	str	r3, [sp, #132]	; 0x84
 800275c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800275e:	3301      	adds	r3, #1
 8002760:	2b07      	cmp	r3, #7
 8002762:	9320      	str	r3, [sp, #128]	; 0x80
 8002764:	dc77      	bgt.n	8002856 <_svfprintf_r+0x18e>
 8002766:	3408      	adds	r4, #8
 8002768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800276a:	4433      	add	r3, r6
 800276c:	9309      	str	r3, [sp, #36]	; 0x24
 800276e:	782b      	ldrb	r3, [r5, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8729 	beq.w	80035c8 <_svfprintf_r+0xf00>
 8002776:	2300      	movs	r3, #0
 8002778:	1c69      	adds	r1, r5, #1
 800277a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800277e:	461a      	mov	r2, r3
 8002780:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8002784:	930a      	str	r3, [sp, #40]	; 0x28
 8002786:	461d      	mov	r5, r3
 8002788:	200a      	movs	r0, #10
 800278a:	1c4e      	adds	r6, r1, #1
 800278c:	7809      	ldrb	r1, [r1, #0]
 800278e:	9605      	str	r6, [sp, #20]
 8002790:	9102      	str	r1, [sp, #8]
 8002792:	9902      	ldr	r1, [sp, #8]
 8002794:	3920      	subs	r1, #32
 8002796:	2958      	cmp	r1, #88	; 0x58
 8002798:	f200 8418 	bhi.w	8002fcc <_svfprintf_r+0x904>
 800279c:	e8df f011 	tbh	[pc, r1, lsl #1]
 80027a0:	041600a6 	.word	0x041600a6
 80027a4:	00ab0416 	.word	0x00ab0416
 80027a8:	04160416 	.word	0x04160416
 80027ac:	04160416 	.word	0x04160416
 80027b0:	04160416 	.word	0x04160416
 80027b4:	006500ae 	.word	0x006500ae
 80027b8:	00b70416 	.word	0x00b70416
 80027bc:	041600ba 	.word	0x041600ba
 80027c0:	00da00d7 	.word	0x00da00d7
 80027c4:	00da00da 	.word	0x00da00da
 80027c8:	00da00da 	.word	0x00da00da
 80027cc:	00da00da 	.word	0x00da00da
 80027d0:	00da00da 	.word	0x00da00da
 80027d4:	04160416 	.word	0x04160416
 80027d8:	04160416 	.word	0x04160416
 80027dc:	04160416 	.word	0x04160416
 80027e0:	04160416 	.word	0x04160416
 80027e4:	04160416 	.word	0x04160416
 80027e8:	012b0115 	.word	0x012b0115
 80027ec:	012b0416 	.word	0x012b0416
 80027f0:	04160416 	.word	0x04160416
 80027f4:	04160416 	.word	0x04160416
 80027f8:	041600ed 	.word	0x041600ed
 80027fc:	03400416 	.word	0x03400416
 8002800:	04160416 	.word	0x04160416
 8002804:	04160416 	.word	0x04160416
 8002808:	03a80416 	.word	0x03a80416
 800280c:	04160416 	.word	0x04160416
 8002810:	04160086 	.word	0x04160086
 8002814:	04160416 	.word	0x04160416
 8002818:	04160416 	.word	0x04160416
 800281c:	04160416 	.word	0x04160416
 8002820:	04160416 	.word	0x04160416
 8002824:	01070416 	.word	0x01070416
 8002828:	012b006b 	.word	0x012b006b
 800282c:	012b012b 	.word	0x012b012b
 8002830:	006b00f0 	.word	0x006b00f0
 8002834:	04160416 	.word	0x04160416
 8002838:	041600fa 	.word	0x041600fa
 800283c:	03420322 	.word	0x03420322
 8002840:	01010376 	.word	0x01010376
 8002844:	03870416 	.word	0x03870416
 8002848:	03aa0416 	.word	0x03aa0416
 800284c:	04160416 	.word	0x04160416
 8002850:	03c2      	.short	0x03c2
 8002852:	461d      	mov	r5, r3
 8002854:	e773      	b.n	800273e <_svfprintf_r+0x76>
 8002856:	aa1f      	add	r2, sp, #124	; 0x7c
 8002858:	4651      	mov	r1, sl
 800285a:	4658      	mov	r0, fp
 800285c:	f002 fa7e 	bl	8004d5c <__ssprint_r>
 8002860:	2800      	cmp	r0, #0
 8002862:	f040 8692 	bne.w	800358a <_svfprintf_r+0xec2>
 8002866:	ac2c      	add	r4, sp, #176	; 0xb0
 8002868:	e77e      	b.n	8002768 <_svfprintf_r+0xa0>
 800286a:	2301      	movs	r3, #1
 800286c:	222b      	movs	r2, #43	; 0x2b
 800286e:	9905      	ldr	r1, [sp, #20]
 8002870:	e78b      	b.n	800278a <_svfprintf_r+0xc2>
 8002872:	460f      	mov	r7, r1
 8002874:	e7fb      	b.n	800286e <_svfprintf_r+0x1a6>
 8002876:	b10b      	cbz	r3, 800287c <_svfprintf_r+0x1b4>
 8002878:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800287c:	06ae      	lsls	r6, r5, #26
 800287e:	f140 80aa 	bpl.w	80029d6 <_svfprintf_r+0x30e>
 8002882:	3707      	adds	r7, #7
 8002884:	f027 0707 	bic.w	r7, r7, #7
 8002888:	f107 0308 	add.w	r3, r7, #8
 800288c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002890:	9304      	str	r3, [sp, #16]
 8002892:	2e00      	cmp	r6, #0
 8002894:	f177 0300 	sbcs.w	r3, r7, #0
 8002898:	da06      	bge.n	80028a8 <_svfprintf_r+0x1e0>
 800289a:	4276      	negs	r6, r6
 800289c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80028a0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80028a4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80028a8:	2301      	movs	r3, #1
 80028aa:	e2ca      	b.n	8002e42 <_svfprintf_r+0x77a>
 80028ac:	b10b      	cbz	r3, 80028b2 <_svfprintf_r+0x1ea>
 80028ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <_svfprintf_r+0x2c8>)
 80028b4:	9311      	str	r3, [sp, #68]	; 0x44
 80028b6:	06ab      	lsls	r3, r5, #26
 80028b8:	f140 8339 	bpl.w	8002f2e <_svfprintf_r+0x866>
 80028bc:	3707      	adds	r7, #7
 80028be:	f027 0707 	bic.w	r7, r7, #7
 80028c2:	f107 0308 	add.w	r3, r7, #8
 80028c6:	e9d7 6700 	ldrd	r6, r7, [r7]
 80028ca:	9304      	str	r3, [sp, #16]
 80028cc:	07e8      	lsls	r0, r5, #31
 80028ce:	d50b      	bpl.n	80028e8 <_svfprintf_r+0x220>
 80028d0:	ea56 0307 	orrs.w	r3, r6, r7
 80028d4:	d008      	beq.n	80028e8 <_svfprintf_r+0x220>
 80028d6:	2330      	movs	r3, #48	; 0x30
 80028d8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80028dc:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80028e0:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80028e4:	f045 0502 	orr.w	r5, r5, #2
 80028e8:	2302      	movs	r3, #2
 80028ea:	e2a7      	b.n	8002e3c <_svfprintf_r+0x774>
 80028ec:	2a00      	cmp	r2, #0
 80028ee:	d1be      	bne.n	800286e <_svfprintf_r+0x1a6>
 80028f0:	2301      	movs	r3, #1
 80028f2:	2220      	movs	r2, #32
 80028f4:	e7bb      	b.n	800286e <_svfprintf_r+0x1a6>
 80028f6:	f045 0501 	orr.w	r5, r5, #1
 80028fa:	e7b8      	b.n	800286e <_svfprintf_r+0x1a6>
 80028fc:	683e      	ldr	r6, [r7, #0]
 80028fe:	960a      	str	r6, [sp, #40]	; 0x28
 8002900:	2e00      	cmp	r6, #0
 8002902:	f107 0104 	add.w	r1, r7, #4
 8002906:	dab4      	bge.n	8002872 <_svfprintf_r+0x1aa>
 8002908:	4276      	negs	r6, r6
 800290a:	960a      	str	r6, [sp, #40]	; 0x28
 800290c:	460f      	mov	r7, r1
 800290e:	f045 0504 	orr.w	r5, r5, #4
 8002912:	e7ac      	b.n	800286e <_svfprintf_r+0x1a6>
 8002914:	9905      	ldr	r1, [sp, #20]
 8002916:	1c4e      	adds	r6, r1, #1
 8002918:	7809      	ldrb	r1, [r1, #0]
 800291a:	9102      	str	r1, [sp, #8]
 800291c:	292a      	cmp	r1, #42	; 0x2a
 800291e:	d010      	beq.n	8002942 <_svfprintf_r+0x27a>
 8002920:	f04f 0900 	mov.w	r9, #0
 8002924:	9605      	str	r6, [sp, #20]
 8002926:	9902      	ldr	r1, [sp, #8]
 8002928:	3930      	subs	r1, #48	; 0x30
 800292a:	2909      	cmp	r1, #9
 800292c:	f63f af31 	bhi.w	8002792 <_svfprintf_r+0xca>
 8002930:	fb00 1909 	mla	r9, r0, r9, r1
 8002934:	9905      	ldr	r1, [sp, #20]
 8002936:	460e      	mov	r6, r1
 8002938:	f816 1b01 	ldrb.w	r1, [r6], #1
 800293c:	9102      	str	r1, [sp, #8]
 800293e:	9605      	str	r6, [sp, #20]
 8002940:	e7f1      	b.n	8002926 <_svfprintf_r+0x25e>
 8002942:	6839      	ldr	r1, [r7, #0]
 8002944:	9605      	str	r6, [sp, #20]
 8002946:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 800294a:	3704      	adds	r7, #4
 800294c:	e78f      	b.n	800286e <_svfprintf_r+0x1a6>
 800294e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002952:	e78c      	b.n	800286e <_svfprintf_r+0x1a6>
 8002954:	2100      	movs	r1, #0
 8002956:	910a      	str	r1, [sp, #40]	; 0x28
 8002958:	9902      	ldr	r1, [sp, #8]
 800295a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800295c:	3930      	subs	r1, #48	; 0x30
 800295e:	fb00 1106 	mla	r1, r0, r6, r1
 8002962:	910a      	str	r1, [sp, #40]	; 0x28
 8002964:	9905      	ldr	r1, [sp, #20]
 8002966:	460e      	mov	r6, r1
 8002968:	f816 1b01 	ldrb.w	r1, [r6], #1
 800296c:	9102      	str	r1, [sp, #8]
 800296e:	9902      	ldr	r1, [sp, #8]
 8002970:	9605      	str	r6, [sp, #20]
 8002972:	3930      	subs	r1, #48	; 0x30
 8002974:	2909      	cmp	r1, #9
 8002976:	d9ef      	bls.n	8002958 <_svfprintf_r+0x290>
 8002978:	e70b      	b.n	8002792 <_svfprintf_r+0xca>
 800297a:	f045 0508 	orr.w	r5, r5, #8
 800297e:	e776      	b.n	800286e <_svfprintf_r+0x1a6>
 8002980:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002984:	e773      	b.n	800286e <_svfprintf_r+0x1a6>
 8002986:	bf00      	nop
	...
 8002990:	080056ed 	.word	0x080056ed
 8002994:	9905      	ldr	r1, [sp, #20]
 8002996:	7809      	ldrb	r1, [r1, #0]
 8002998:	296c      	cmp	r1, #108	; 0x6c
 800299a:	d105      	bne.n	80029a8 <_svfprintf_r+0x2e0>
 800299c:	9905      	ldr	r1, [sp, #20]
 800299e:	3101      	adds	r1, #1
 80029a0:	9105      	str	r1, [sp, #20]
 80029a2:	f045 0520 	orr.w	r5, r5, #32
 80029a6:	e762      	b.n	800286e <_svfprintf_r+0x1a6>
 80029a8:	f045 0510 	orr.w	r5, r5, #16
 80029ac:	e75f      	b.n	800286e <_svfprintf_r+0x1a6>
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	9304      	str	r3, [sp, #16]
 80029b2:	2600      	movs	r6, #0
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80029ba:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80029be:	f04f 0901 	mov.w	r9, #1
 80029c2:	4637      	mov	r7, r6
 80029c4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80029c8:	e11b      	b.n	8002c02 <_svfprintf_r+0x53a>
 80029ca:	b10b      	cbz	r3, 80029d0 <_svfprintf_r+0x308>
 80029cc:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80029d0:	f045 0510 	orr.w	r5, r5, #16
 80029d4:	e752      	b.n	800287c <_svfprintf_r+0x1b4>
 80029d6:	f015 0f10 	tst.w	r5, #16
 80029da:	f107 0304 	add.w	r3, r7, #4
 80029de:	d003      	beq.n	80029e8 <_svfprintf_r+0x320>
 80029e0:	683e      	ldr	r6, [r7, #0]
 80029e2:	9304      	str	r3, [sp, #16]
 80029e4:	17f7      	asrs	r7, r6, #31
 80029e6:	e754      	b.n	8002892 <_svfprintf_r+0x1ca>
 80029e8:	683e      	ldr	r6, [r7, #0]
 80029ea:	9304      	str	r3, [sp, #16]
 80029ec:	f015 0f40 	tst.w	r5, #64	; 0x40
 80029f0:	bf18      	it	ne
 80029f2:	b236      	sxthne	r6, r6
 80029f4:	e7f6      	b.n	80029e4 <_svfprintf_r+0x31c>
 80029f6:	b10b      	cbz	r3, 80029fc <_svfprintf_r+0x334>
 80029f8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80029fc:	3707      	adds	r7, #7
 80029fe:	f027 0707 	bic.w	r7, r7, #7
 8002a02:	f107 0308 	add.w	r3, r7, #8
 8002a06:	9304      	str	r3, [sp, #16]
 8002a08:	ed97 7b00 	vldr	d7, [r7]
 8002a0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002a10:	9b06      	ldr	r3, [sp, #24]
 8002a12:	9312      	str	r3, [sp, #72]	; 0x48
 8002a14:	9b07      	ldr	r3, [sp, #28]
 8002a16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	9313      	str	r3, [sp, #76]	; 0x4c
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a20:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <_svfprintf_r+0x484>)
 8002a22:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002a26:	f7fe f88d 	bl	8000b44 <__aeabi_dcmpun>
 8002a2a:	2800      	cmp	r0, #0
 8002a2c:	f040 85d5 	bne.w	80035da <_svfprintf_r+0xf12>
 8002a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a34:	4b45      	ldr	r3, [pc, #276]	; (8002b4c <_svfprintf_r+0x484>)
 8002a36:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002a3a:	f7fe f865 	bl	8000b08 <__aeabi_dcmple>
 8002a3e:	2800      	cmp	r0, #0
 8002a40:	f040 85cb 	bne.w	80035da <_svfprintf_r+0xf12>
 8002a44:	2200      	movs	r2, #0
 8002a46:	2300      	movs	r3, #0
 8002a48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002a4c:	f7fe f852 	bl	8000af4 <__aeabi_dcmplt>
 8002a50:	b110      	cbz	r0, 8002a58 <_svfprintf_r+0x390>
 8002a52:	232d      	movs	r3, #45	; 0x2d
 8002a54:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002a58:	4b3d      	ldr	r3, [pc, #244]	; (8002b50 <_svfprintf_r+0x488>)
 8002a5a:	4a3e      	ldr	r2, [pc, #248]	; (8002b54 <_svfprintf_r+0x48c>)
 8002a5c:	9902      	ldr	r1, [sp, #8]
 8002a5e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8002a62:	2947      	cmp	r1, #71	; 0x47
 8002a64:	bfcc      	ite	gt
 8002a66:	4690      	movgt	r8, r2
 8002a68:	4698      	movle	r8, r3
 8002a6a:	f04f 0903 	mov.w	r9, #3
 8002a6e:	2600      	movs	r6, #0
 8002a70:	4637      	mov	r7, r6
 8002a72:	e0c6      	b.n	8002c02 <_svfprintf_r+0x53a>
 8002a74:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002a78:	d022      	beq.n	8002ac0 <_svfprintf_r+0x3f8>
 8002a7a:	9b02      	ldr	r3, [sp, #8]
 8002a7c:	f023 0320 	bic.w	r3, r3, #32
 8002a80:	2b47      	cmp	r3, #71	; 0x47
 8002a82:	d104      	bne.n	8002a8e <_svfprintf_r+0x3c6>
 8002a84:	f1b9 0f00 	cmp.w	r9, #0
 8002a88:	bf08      	it	eq
 8002a8a:	f04f 0901 	moveq.w	r9, #1
 8002a8e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002a92:	930c      	str	r3, [sp, #48]	; 0x30
 8002a94:	9b07      	ldr	r3, [sp, #28]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da15      	bge.n	8002ac6 <_svfprintf_r+0x3fe>
 8002a9a:	9b06      	ldr	r3, [sp, #24]
 8002a9c:	930e      	str	r3, [sp, #56]	; 0x38
 8002a9e:	9b07      	ldr	r3, [sp, #28]
 8002aa0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002aa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8002aa6:	232d      	movs	r3, #45	; 0x2d
 8002aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8002aaa:	9b02      	ldr	r3, [sp, #8]
 8002aac:	f023 0720 	bic.w	r7, r3, #32
 8002ab0:	2f46      	cmp	r7, #70	; 0x46
 8002ab2:	d00e      	beq.n	8002ad2 <_svfprintf_r+0x40a>
 8002ab4:	2f45      	cmp	r7, #69	; 0x45
 8002ab6:	d146      	bne.n	8002b46 <_svfprintf_r+0x47e>
 8002ab8:	f109 0601 	add.w	r6, r9, #1
 8002abc:	2102      	movs	r1, #2
 8002abe:	e00a      	b.n	8002ad6 <_svfprintf_r+0x40e>
 8002ac0:	f04f 0906 	mov.w	r9, #6
 8002ac4:	e7e3      	b.n	8002a8e <_svfprintf_r+0x3c6>
 8002ac6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002aca:	2300      	movs	r3, #0
 8002acc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002ad0:	e7ea      	b.n	8002aa8 <_svfprintf_r+0x3e0>
 8002ad2:	464e      	mov	r6, r9
 8002ad4:	2103      	movs	r1, #3
 8002ad6:	ab1d      	add	r3, sp, #116	; 0x74
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	ab1a      	add	r3, sp, #104	; 0x68
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4632      	mov	r2, r6
 8002ae0:	ab19      	add	r3, sp, #100	; 0x64
 8002ae2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8002ae6:	4658      	mov	r0, fp
 8002ae8:	f000 fe4e 	bl	8003788 <_dtoa_r>
 8002aec:	2f47      	cmp	r7, #71	; 0x47
 8002aee:	4680      	mov	r8, r0
 8002af0:	d102      	bne.n	8002af8 <_svfprintf_r+0x430>
 8002af2:	07e8      	lsls	r0, r5, #31
 8002af4:	f140 857e 	bpl.w	80035f4 <_svfprintf_r+0xf2c>
 8002af8:	eb08 0306 	add.w	r3, r8, r6
 8002afc:	2f46      	cmp	r7, #70	; 0x46
 8002afe:	9303      	str	r3, [sp, #12]
 8002b00:	d111      	bne.n	8002b26 <_svfprintf_r+0x45e>
 8002b02:	f898 3000 	ldrb.w	r3, [r8]
 8002b06:	2b30      	cmp	r3, #48	; 0x30
 8002b08:	d109      	bne.n	8002b1e <_svfprintf_r+0x456>
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002b12:	f7fd ffe5 	bl	8000ae0 <__aeabi_dcmpeq>
 8002b16:	b910      	cbnz	r0, 8002b1e <_svfprintf_r+0x456>
 8002b18:	f1c6 0601 	rsb	r6, r6, #1
 8002b1c:	9619      	str	r6, [sp, #100]	; 0x64
 8002b1e:	9a03      	ldr	r2, [sp, #12]
 8002b20:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b22:	441a      	add	r2, r3
 8002b24:	9203      	str	r2, [sp, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002b2e:	f7fd ffd7 	bl	8000ae0 <__aeabi_dcmpeq>
 8002b32:	b988      	cbnz	r0, 8002b58 <_svfprintf_r+0x490>
 8002b34:	2230      	movs	r2, #48	; 0x30
 8002b36:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002b38:	9903      	ldr	r1, [sp, #12]
 8002b3a:	4299      	cmp	r1, r3
 8002b3c:	d90e      	bls.n	8002b5c <_svfprintf_r+0x494>
 8002b3e:	1c59      	adds	r1, r3, #1
 8002b40:	911d      	str	r1, [sp, #116]	; 0x74
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e7f7      	b.n	8002b36 <_svfprintf_r+0x46e>
 8002b46:	464e      	mov	r6, r9
 8002b48:	e7b8      	b.n	8002abc <_svfprintf_r+0x3f4>
 8002b4a:	bf00      	nop
 8002b4c:	7fefffff 	.word	0x7fefffff
 8002b50:	080056dd 	.word	0x080056dd
 8002b54:	080056e1 	.word	0x080056e1
 8002b58:	9b03      	ldr	r3, [sp, #12]
 8002b5a:	931d      	str	r3, [sp, #116]	; 0x74
 8002b5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002b5e:	2f47      	cmp	r7, #71	; 0x47
 8002b60:	eba3 0308 	sub.w	r3, r3, r8
 8002b64:	9303      	str	r3, [sp, #12]
 8002b66:	f040 80fa 	bne.w	8002d5e <_svfprintf_r+0x696>
 8002b6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002b6c:	1cd9      	adds	r1, r3, #3
 8002b6e:	db02      	blt.n	8002b76 <_svfprintf_r+0x4ae>
 8002b70:	4599      	cmp	r9, r3
 8002b72:	f280 8120 	bge.w	8002db6 <_svfprintf_r+0x6ee>
 8002b76:	9b02      	ldr	r3, [sp, #8]
 8002b78:	3b02      	subs	r3, #2
 8002b7a:	9302      	str	r3, [sp, #8]
 8002b7c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002b7e:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8002b82:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8002b86:	1e53      	subs	r3, r2, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	9319      	str	r3, [sp, #100]	; 0x64
 8002b8c:	bfb6      	itet	lt
 8002b8e:	f1c2 0301 	rsblt	r3, r2, #1
 8002b92:	222b      	movge	r2, #43	; 0x2b
 8002b94:	222d      	movlt	r2, #45	; 0x2d
 8002b96:	2b09      	cmp	r3, #9
 8002b98:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8002b9c:	f340 80fb 	ble.w	8002d96 <_svfprintf_r+0x6ce>
 8002ba0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8002ba4:	260a      	movs	r6, #10
 8002ba6:	fb93 f0f6 	sdiv	r0, r3, r6
 8002baa:	fb06 3310 	mls	r3, r6, r0, r3
 8002bae:	3330      	adds	r3, #48	; 0x30
 8002bb0:	2809      	cmp	r0, #9
 8002bb2:	f802 3c01 	strb.w	r3, [r2, #-1]
 8002bb6:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f300 80e4 	bgt.w	8002d88 <_svfprintf_r+0x6c0>
 8002bc0:	3330      	adds	r3, #48	; 0x30
 8002bc2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8002bc6:	3a02      	subs	r2, #2
 8002bc8:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8002bcc:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8002bd0:	4282      	cmp	r2, r0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f0c0 80da 	bcc.w	8002d8c <_svfprintf_r+0x6c4>
 8002bd8:	9a03      	ldr	r2, [sp, #12]
 8002bda:	ab1b      	add	r3, sp, #108	; 0x6c
 8002bdc:	1acb      	subs	r3, r1, r3
 8002bde:	2a01      	cmp	r2, #1
 8002be0:	9310      	str	r3, [sp, #64]	; 0x40
 8002be2:	eb03 0902 	add.w	r9, r3, r2
 8002be6:	dc02      	bgt.n	8002bee <_svfprintf_r+0x526>
 8002be8:	f015 0701 	ands.w	r7, r5, #1
 8002bec:	d002      	beq.n	8002bf4 <_svfprintf_r+0x52c>
 8002bee:	9b08      	ldr	r3, [sp, #32]
 8002bf0:	2700      	movs	r7, #0
 8002bf2:	4499      	add	r9, r3
 8002bf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bf6:	b113      	cbz	r3, 8002bfe <_svfprintf_r+0x536>
 8002bf8:	232d      	movs	r3, #45	; 0x2d
 8002bfa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c00:	2600      	movs	r6, #0
 8002c02:	454e      	cmp	r6, r9
 8002c04:	4633      	mov	r3, r6
 8002c06:	bfb8      	it	lt
 8002c08:	464b      	movlt	r3, r9
 8002c0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c0c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002c10:	b113      	cbz	r3, 8002c18 <_svfprintf_r+0x550>
 8002c12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c14:	3301      	adds	r3, #1
 8002c16:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c18:	f015 0302 	ands.w	r3, r5, #2
 8002c1c:	9314      	str	r3, [sp, #80]	; 0x50
 8002c1e:	bf1e      	ittt	ne
 8002c20:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002c22:	3302      	addne	r3, #2
 8002c24:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002c26:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002c2a:	9315      	str	r3, [sp, #84]	; 0x54
 8002c2c:	d118      	bne.n	8002c60 <_svfprintf_r+0x598>
 8002c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	930c      	str	r3, [sp, #48]	; 0x30
 8002c38:	dd12      	ble.n	8002c60 <_svfprintf_r+0x598>
 8002c3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	4ba9      	ldr	r3, [pc, #676]	; (8002ee4 <_svfprintf_r+0x81c>)
 8002c40:	6023      	str	r3, [r4, #0]
 8002c42:	f300 81d5 	bgt.w	8002ff0 <_svfprintf_r+0x928>
 8002c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c48:	6063      	str	r3, [r4, #4]
 8002c4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c4e:	4413      	add	r3, r2
 8002c50:	9321      	str	r3, [sp, #132]	; 0x84
 8002c52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c54:	3301      	adds	r3, #1
 8002c56:	2b07      	cmp	r3, #7
 8002c58:	9320      	str	r3, [sp, #128]	; 0x80
 8002c5a:	f300 81e2 	bgt.w	8003022 <_svfprintf_r+0x95a>
 8002c5e:	3408      	adds	r4, #8
 8002c60:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002c64:	b173      	cbz	r3, 8002c84 <_svfprintf_r+0x5bc>
 8002c66:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002c6a:	6023      	str	r3, [r4, #0]
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	6063      	str	r3, [r4, #4]
 8002c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c72:	3301      	adds	r3, #1
 8002c74:	9321      	str	r3, [sp, #132]	; 0x84
 8002c76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c78:	3301      	adds	r3, #1
 8002c7a:	2b07      	cmp	r3, #7
 8002c7c:	9320      	str	r3, [sp, #128]	; 0x80
 8002c7e:	f300 81da 	bgt.w	8003036 <_svfprintf_r+0x96e>
 8002c82:	3408      	adds	r4, #8
 8002c84:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002c86:	b16b      	cbz	r3, 8002ca4 <_svfprintf_r+0x5dc>
 8002c88:	ab18      	add	r3, sp, #96	; 0x60
 8002c8a:	6023      	str	r3, [r4, #0]
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	6063      	str	r3, [r4, #4]
 8002c90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002c92:	3302      	adds	r3, #2
 8002c94:	9321      	str	r3, [sp, #132]	; 0x84
 8002c96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002c98:	3301      	adds	r3, #1
 8002c9a:	2b07      	cmp	r3, #7
 8002c9c:	9320      	str	r3, [sp, #128]	; 0x80
 8002c9e:	f300 81d4 	bgt.w	800304a <_svfprintf_r+0x982>
 8002ca2:	3408      	adds	r4, #8
 8002ca4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002ca6:	2b80      	cmp	r3, #128	; 0x80
 8002ca8:	d114      	bne.n	8002cd4 <_svfprintf_r+0x60c>
 8002caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002cac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	dd0f      	ble.n	8002cd4 <_svfprintf_r+0x60c>
 8002cb4:	4a8c      	ldr	r2, [pc, #560]	; (8002ee8 <_svfprintf_r+0x820>)
 8002cb6:	6022      	str	r2, [r4, #0]
 8002cb8:	2b10      	cmp	r3, #16
 8002cba:	f300 81d0 	bgt.w	800305e <_svfprintf_r+0x996>
 8002cbe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002cc0:	6063      	str	r3, [r4, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	9321      	str	r3, [sp, #132]	; 0x84
 8002cc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002cc8:	3301      	adds	r3, #1
 8002cca:	2b07      	cmp	r3, #7
 8002ccc:	9320      	str	r3, [sp, #128]	; 0x80
 8002cce:	f300 81df 	bgt.w	8003090 <_svfprintf_r+0x9c8>
 8002cd2:	3408      	adds	r4, #8
 8002cd4:	eba6 0609 	sub.w	r6, r6, r9
 8002cd8:	2e00      	cmp	r6, #0
 8002cda:	dd0f      	ble.n	8002cfc <_svfprintf_r+0x634>
 8002cdc:	4b82      	ldr	r3, [pc, #520]	; (8002ee8 <_svfprintf_r+0x820>)
 8002cde:	6023      	str	r3, [r4, #0]
 8002ce0:	2e10      	cmp	r6, #16
 8002ce2:	f300 81df 	bgt.w	80030a4 <_svfprintf_r+0x9dc>
 8002ce6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ce8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002cea:	6066      	str	r6, [r4, #4]
 8002cec:	3301      	adds	r3, #1
 8002cee:	4406      	add	r6, r0
 8002cf0:	2b07      	cmp	r3, #7
 8002cf2:	9621      	str	r6, [sp, #132]	; 0x84
 8002cf4:	9320      	str	r3, [sp, #128]	; 0x80
 8002cf6:	f300 81ec 	bgt.w	80030d2 <_svfprintf_r+0xa0a>
 8002cfa:	3408      	adds	r4, #8
 8002cfc:	05eb      	lsls	r3, r5, #23
 8002cfe:	f100 81f2 	bmi.w	80030e6 <_svfprintf_r+0xa1e>
 8002d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d04:	e884 0300 	stmia.w	r4, {r8, r9}
 8002d08:	444b      	add	r3, r9
 8002d0a:	9321      	str	r3, [sp, #132]	; 0x84
 8002d0c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002d0e:	3301      	adds	r3, #1
 8002d10:	2b07      	cmp	r3, #7
 8002d12:	9320      	str	r3, [sp, #128]	; 0x80
 8002d14:	f340 8419 	ble.w	800354a <_svfprintf_r+0xe82>
 8002d18:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d1a:	4651      	mov	r1, sl
 8002d1c:	4658      	mov	r0, fp
 8002d1e:	f002 f81d 	bl	8004d5c <__ssprint_r>
 8002d22:	2800      	cmp	r0, #0
 8002d24:	f040 8431 	bne.w	800358a <_svfprintf_r+0xec2>
 8002d28:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d2a:	076b      	lsls	r3, r5, #29
 8002d2c:	f100 8410 	bmi.w	8003550 <_svfprintf_r+0xe88>
 8002d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002d36:	428a      	cmp	r2, r1
 8002d38:	bfac      	ite	ge
 8002d3a:	189b      	addge	r3, r3, r2
 8002d3c:	185b      	addlt	r3, r3, r1
 8002d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002d42:	b13b      	cbz	r3, 8002d54 <_svfprintf_r+0x68c>
 8002d44:	aa1f      	add	r2, sp, #124	; 0x7c
 8002d46:	4651      	mov	r1, sl
 8002d48:	4658      	mov	r0, fp
 8002d4a:	f002 f807 	bl	8004d5c <__ssprint_r>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	f040 841b 	bne.w	800358a <_svfprintf_r+0xec2>
 8002d54:	2300      	movs	r3, #0
 8002d56:	9320      	str	r3, [sp, #128]	; 0x80
 8002d58:	9f04      	ldr	r7, [sp, #16]
 8002d5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8002d5c:	e4ee      	b.n	800273c <_svfprintf_r+0x74>
 8002d5e:	9b02      	ldr	r3, [sp, #8]
 8002d60:	2b65      	cmp	r3, #101	; 0x65
 8002d62:	f77f af0b 	ble.w	8002b7c <_svfprintf_r+0x4b4>
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	2b66      	cmp	r3, #102	; 0x66
 8002d6a:	d124      	bne.n	8002db6 <_svfprintf_r+0x6ee>
 8002d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	dd19      	ble.n	8002da6 <_svfprintf_r+0x6de>
 8002d72:	f1b9 0f00 	cmp.w	r9, #0
 8002d76:	d101      	bne.n	8002d7c <_svfprintf_r+0x6b4>
 8002d78:	07ea      	lsls	r2, r5, #31
 8002d7a:	d502      	bpl.n	8002d82 <_svfprintf_r+0x6ba>
 8002d7c:	9a08      	ldr	r2, [sp, #32]
 8002d7e:	4413      	add	r3, r2
 8002d80:	444b      	add	r3, r9
 8002d82:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8002d84:	4699      	mov	r9, r3
 8002d86:	e735      	b.n	8002bf4 <_svfprintf_r+0x52c>
 8002d88:	460a      	mov	r2, r1
 8002d8a:	e70c      	b.n	8002ba6 <_svfprintf_r+0x4de>
 8002d8c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002d90:	f803 1b01 	strb.w	r1, [r3], #1
 8002d94:	e71c      	b.n	8002bd0 <_svfprintf_r+0x508>
 8002d96:	2230      	movs	r2, #48	; 0x30
 8002d98:	4413      	add	r3, r2
 8002d9a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8002d9e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8002da2:	a91c      	add	r1, sp, #112	; 0x70
 8002da4:	e718      	b.n	8002bd8 <_svfprintf_r+0x510>
 8002da6:	f1b9 0f00 	cmp.w	r9, #0
 8002daa:	d101      	bne.n	8002db0 <_svfprintf_r+0x6e8>
 8002dac:	07eb      	lsls	r3, r5, #31
 8002dae:	d515      	bpl.n	8002ddc <_svfprintf_r+0x714>
 8002db0:	9b08      	ldr	r3, [sp, #32]
 8002db2:	3301      	adds	r3, #1
 8002db4:	e7e4      	b.n	8002d80 <_svfprintf_r+0x6b8>
 8002db6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8002db8:	9b03      	ldr	r3, [sp, #12]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	db06      	blt.n	8002dcc <_svfprintf_r+0x704>
 8002dbe:	07ef      	lsls	r7, r5, #31
 8002dc0:	d50e      	bpl.n	8002de0 <_svfprintf_r+0x718>
 8002dc2:	9b08      	ldr	r3, [sp, #32]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	2267      	movs	r2, #103	; 0x67
 8002dc8:	9202      	str	r2, [sp, #8]
 8002dca:	e7da      	b.n	8002d82 <_svfprintf_r+0x6ba>
 8002dcc:	9b03      	ldr	r3, [sp, #12]
 8002dce:	9908      	ldr	r1, [sp, #32]
 8002dd0:	2a00      	cmp	r2, #0
 8002dd2:	440b      	add	r3, r1
 8002dd4:	dcf7      	bgt.n	8002dc6 <_svfprintf_r+0x6fe>
 8002dd6:	f1c2 0201 	rsb	r2, r2, #1
 8002dda:	e7f3      	b.n	8002dc4 <_svfprintf_r+0x6fc>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e7d0      	b.n	8002d82 <_svfprintf_r+0x6ba>
 8002de0:	4613      	mov	r3, r2
 8002de2:	e7f0      	b.n	8002dc6 <_svfprintf_r+0x6fe>
 8002de4:	b10b      	cbz	r3, 8002dea <_svfprintf_r+0x722>
 8002de6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002dea:	f015 0f20 	tst.w	r5, #32
 8002dee:	f107 0304 	add.w	r3, r7, #4
 8002df2:	d008      	beq.n	8002e06 <_svfprintf_r+0x73e>
 8002df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	17ce      	asrs	r6, r1, #31
 8002dfa:	4608      	mov	r0, r1
 8002dfc:	4631      	mov	r1, r6
 8002dfe:	e9c2 0100 	strd	r0, r1, [r2]
 8002e02:	461f      	mov	r7, r3
 8002e04:	e49a      	b.n	800273c <_svfprintf_r+0x74>
 8002e06:	06ee      	lsls	r6, r5, #27
 8002e08:	d503      	bpl.n	8002e12 <_svfprintf_r+0x74a>
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e0e:	6011      	str	r1, [r2, #0]
 8002e10:	e7f7      	b.n	8002e02 <_svfprintf_r+0x73a>
 8002e12:	0668      	lsls	r0, r5, #25
 8002e14:	d5f9      	bpl.n	8002e0a <_svfprintf_r+0x742>
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8002e1c:	8011      	strh	r1, [r2, #0]
 8002e1e:	e7f0      	b.n	8002e02 <_svfprintf_r+0x73a>
 8002e20:	f045 0510 	orr.w	r5, r5, #16
 8002e24:	f015 0320 	ands.w	r3, r5, #32
 8002e28:	d022      	beq.n	8002e70 <_svfprintf_r+0x7a8>
 8002e2a:	3707      	adds	r7, #7
 8002e2c:	f027 0707 	bic.w	r7, r7, #7
 8002e30:	f107 0308 	add.w	r3, r7, #8
 8002e34:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002e38:	9304      	str	r3, [sp, #16]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002e42:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002e46:	f000 83db 	beq.w	8003600 <_svfprintf_r+0xf38>
 8002e4a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8002e4e:	920b      	str	r2, [sp, #44]	; 0x2c
 8002e50:	ea56 0207 	orrs.w	r2, r6, r7
 8002e54:	f040 83d9 	bne.w	800360a <_svfprintf_r+0xf42>
 8002e58:	f1b9 0f00 	cmp.w	r9, #0
 8002e5c:	f000 80aa 	beq.w	8002fb4 <_svfprintf_r+0x8ec>
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d076      	beq.n	8002f52 <_svfprintf_r+0x88a>
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	f000 8091 	beq.w	8002f8c <_svfprintf_r+0x8c4>
 8002e6a:	2600      	movs	r6, #0
 8002e6c:	2700      	movs	r7, #0
 8002e6e:	e3d2      	b.n	8003616 <_svfprintf_r+0xf4e>
 8002e70:	1d3a      	adds	r2, r7, #4
 8002e72:	f015 0110 	ands.w	r1, r5, #16
 8002e76:	9204      	str	r2, [sp, #16]
 8002e78:	d002      	beq.n	8002e80 <_svfprintf_r+0x7b8>
 8002e7a:	683e      	ldr	r6, [r7, #0]
 8002e7c:	2700      	movs	r7, #0
 8002e7e:	e7dd      	b.n	8002e3c <_svfprintf_r+0x774>
 8002e80:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002e84:	d0f9      	beq.n	8002e7a <_svfprintf_r+0x7b2>
 8002e86:	883e      	ldrh	r6, [r7, #0]
 8002e88:	2700      	movs	r7, #0
 8002e8a:	e7d6      	b.n	8002e3a <_svfprintf_r+0x772>
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	9304      	str	r3, [sp, #16]
 8002e90:	2330      	movs	r3, #48	; 0x30
 8002e92:	2278      	movs	r2, #120	; 0x78
 8002e94:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <_svfprintf_r+0x824>)
 8002e9a:	683e      	ldr	r6, [r7, #0]
 8002e9c:	9311      	str	r3, [sp, #68]	; 0x44
 8002e9e:	2700      	movs	r7, #0
 8002ea0:	f045 0502 	orr.w	r5, r5, #2
 8002ea4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	9202      	str	r2, [sp, #8]
 8002eac:	e7c6      	b.n	8002e3c <_svfprintf_r+0x774>
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2600      	movs	r6, #0
 8002eb2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8002eb6:	9304      	str	r3, [sp, #16]
 8002eb8:	f8d7 8000 	ldr.w	r8, [r7]
 8002ebc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002ec0:	d00a      	beq.n	8002ed8 <_svfprintf_r+0x810>
 8002ec2:	464a      	mov	r2, r9
 8002ec4:	4631      	mov	r1, r6
 8002ec6:	4640      	mov	r0, r8
 8002ec8:	f7fd f992 	bl	80001f0 <memchr>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	f000 808d 	beq.w	8002fec <_svfprintf_r+0x924>
 8002ed2:	eba0 0908 	sub.w	r9, r0, r8
 8002ed6:	e5cb      	b.n	8002a70 <_svfprintf_r+0x3a8>
 8002ed8:	4640      	mov	r0, r8
 8002eda:	f7fd f9d9 	bl	8000290 <strlen>
 8002ede:	4681      	mov	r9, r0
 8002ee0:	e5c6      	b.n	8002a70 <_svfprintf_r+0x3a8>
 8002ee2:	bf00      	nop
 8002ee4:	08005711 	.word	0x08005711
 8002ee8:	08005721 	.word	0x08005721
 8002eec:	080056fe 	.word	0x080056fe
 8002ef0:	f045 0510 	orr.w	r5, r5, #16
 8002ef4:	06a9      	lsls	r1, r5, #26
 8002ef6:	d509      	bpl.n	8002f0c <_svfprintf_r+0x844>
 8002ef8:	3707      	adds	r7, #7
 8002efa:	f027 0707 	bic.w	r7, r7, #7
 8002efe:	f107 0308 	add.w	r3, r7, #8
 8002f02:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002f06:	9304      	str	r3, [sp, #16]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e797      	b.n	8002e3c <_svfprintf_r+0x774>
 8002f0c:	1d3b      	adds	r3, r7, #4
 8002f0e:	f015 0f10 	tst.w	r5, #16
 8002f12:	9304      	str	r3, [sp, #16]
 8002f14:	d001      	beq.n	8002f1a <_svfprintf_r+0x852>
 8002f16:	683e      	ldr	r6, [r7, #0]
 8002f18:	e002      	b.n	8002f20 <_svfprintf_r+0x858>
 8002f1a:	066a      	lsls	r2, r5, #25
 8002f1c:	d5fb      	bpl.n	8002f16 <_svfprintf_r+0x84e>
 8002f1e:	883e      	ldrh	r6, [r7, #0]
 8002f20:	2700      	movs	r7, #0
 8002f22:	e7f1      	b.n	8002f08 <_svfprintf_r+0x840>
 8002f24:	b10b      	cbz	r3, 8002f2a <_svfprintf_r+0x862>
 8002f26:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002f2a:	4ba3      	ldr	r3, [pc, #652]	; (80031b8 <_svfprintf_r+0xaf0>)
 8002f2c:	e4c2      	b.n	80028b4 <_svfprintf_r+0x1ec>
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	f015 0f10 	tst.w	r5, #16
 8002f34:	9304      	str	r3, [sp, #16]
 8002f36:	d001      	beq.n	8002f3c <_svfprintf_r+0x874>
 8002f38:	683e      	ldr	r6, [r7, #0]
 8002f3a:	e002      	b.n	8002f42 <_svfprintf_r+0x87a>
 8002f3c:	066e      	lsls	r6, r5, #25
 8002f3e:	d5fb      	bpl.n	8002f38 <_svfprintf_r+0x870>
 8002f40:	883e      	ldrh	r6, [r7, #0]
 8002f42:	2700      	movs	r7, #0
 8002f44:	e4c2      	b.n	80028cc <_svfprintf_r+0x204>
 8002f46:	4643      	mov	r3, r8
 8002f48:	e366      	b.n	8003618 <_svfprintf_r+0xf50>
 8002f4a:	2f00      	cmp	r7, #0
 8002f4c:	bf08      	it	eq
 8002f4e:	2e0a      	cmpeq	r6, #10
 8002f50:	d205      	bcs.n	8002f5e <_svfprintf_r+0x896>
 8002f52:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002f56:	3630      	adds	r6, #48	; 0x30
 8002f58:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002f5c:	e377      	b.n	800364e <_svfprintf_r+0xf86>
 8002f5e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002f62:	4630      	mov	r0, r6
 8002f64:	4639      	mov	r1, r7
 8002f66:	220a      	movs	r2, #10
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f7fd fe79 	bl	8000c60 <__aeabi_uldivmod>
 8002f6e:	3230      	adds	r2, #48	; 0x30
 8002f70:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8002f74:	2300      	movs	r3, #0
 8002f76:	4630      	mov	r0, r6
 8002f78:	4639      	mov	r1, r7
 8002f7a:	220a      	movs	r2, #10
 8002f7c:	f7fd fe70 	bl	8000c60 <__aeabi_uldivmod>
 8002f80:	4606      	mov	r6, r0
 8002f82:	460f      	mov	r7, r1
 8002f84:	ea56 0307 	orrs.w	r3, r6, r7
 8002f88:	d1eb      	bne.n	8002f62 <_svfprintf_r+0x89a>
 8002f8a:	e360      	b.n	800364e <_svfprintf_r+0xf86>
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	2700      	movs	r7, #0
 8002f90:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002f94:	f006 030f 	and.w	r3, r6, #15
 8002f98:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002f9a:	5cd3      	ldrb	r3, [r2, r3]
 8002f9c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002fa0:	0933      	lsrs	r3, r6, #4
 8002fa2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002fa6:	093a      	lsrs	r2, r7, #4
 8002fa8:	461e      	mov	r6, r3
 8002faa:	4617      	mov	r7, r2
 8002fac:	ea56 0307 	orrs.w	r3, r6, r7
 8002fb0:	d1f0      	bne.n	8002f94 <_svfprintf_r+0x8cc>
 8002fb2:	e34c      	b.n	800364e <_svfprintf_r+0xf86>
 8002fb4:	b93b      	cbnz	r3, 8002fc6 <_svfprintf_r+0x8fe>
 8002fb6:	07ea      	lsls	r2, r5, #31
 8002fb8:	d505      	bpl.n	8002fc6 <_svfprintf_r+0x8fe>
 8002fba:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002fbe:	2330      	movs	r3, #48	; 0x30
 8002fc0:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8002fc4:	e343      	b.n	800364e <_svfprintf_r+0xf86>
 8002fc6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002fca:	e340      	b.n	800364e <_svfprintf_r+0xf86>
 8002fcc:	b10b      	cbz	r3, 8002fd2 <_svfprintf_r+0x90a>
 8002fce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002fd2:	9b02      	ldr	r3, [sp, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 82f7 	beq.w	80035c8 <_svfprintf_r+0xf00>
 8002fda:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002fde:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002fe2:	2600      	movs	r6, #0
 8002fe4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002fe8:	9704      	str	r7, [sp, #16]
 8002fea:	e4e8      	b.n	80029be <_svfprintf_r+0x2f6>
 8002fec:	4606      	mov	r6, r0
 8002fee:	e53f      	b.n	8002a70 <_svfprintf_r+0x3a8>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	6063      	str	r3, [r4, #4]
 8002ff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002ff6:	3310      	adds	r3, #16
 8002ff8:	9321      	str	r3, [sp, #132]	; 0x84
 8002ffa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ffc:	3301      	adds	r3, #1
 8002ffe:	2b07      	cmp	r3, #7
 8003000:	9320      	str	r3, [sp, #128]	; 0x80
 8003002:	dc04      	bgt.n	800300e <_svfprintf_r+0x946>
 8003004:	3408      	adds	r4, #8
 8003006:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003008:	3b10      	subs	r3, #16
 800300a:	930c      	str	r3, [sp, #48]	; 0x30
 800300c:	e615      	b.n	8002c3a <_svfprintf_r+0x572>
 800300e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003010:	4651      	mov	r1, sl
 8003012:	4658      	mov	r0, fp
 8003014:	f001 fea2 	bl	8004d5c <__ssprint_r>
 8003018:	2800      	cmp	r0, #0
 800301a:	f040 82b6 	bne.w	800358a <_svfprintf_r+0xec2>
 800301e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003020:	e7f1      	b.n	8003006 <_svfprintf_r+0x93e>
 8003022:	aa1f      	add	r2, sp, #124	; 0x7c
 8003024:	4651      	mov	r1, sl
 8003026:	4658      	mov	r0, fp
 8003028:	f001 fe98 	bl	8004d5c <__ssprint_r>
 800302c:	2800      	cmp	r0, #0
 800302e:	f040 82ac 	bne.w	800358a <_svfprintf_r+0xec2>
 8003032:	ac2c      	add	r4, sp, #176	; 0xb0
 8003034:	e614      	b.n	8002c60 <_svfprintf_r+0x598>
 8003036:	aa1f      	add	r2, sp, #124	; 0x7c
 8003038:	4651      	mov	r1, sl
 800303a:	4658      	mov	r0, fp
 800303c:	f001 fe8e 	bl	8004d5c <__ssprint_r>
 8003040:	2800      	cmp	r0, #0
 8003042:	f040 82a2 	bne.w	800358a <_svfprintf_r+0xec2>
 8003046:	ac2c      	add	r4, sp, #176	; 0xb0
 8003048:	e61c      	b.n	8002c84 <_svfprintf_r+0x5bc>
 800304a:	aa1f      	add	r2, sp, #124	; 0x7c
 800304c:	4651      	mov	r1, sl
 800304e:	4658      	mov	r0, fp
 8003050:	f001 fe84 	bl	8004d5c <__ssprint_r>
 8003054:	2800      	cmp	r0, #0
 8003056:	f040 8298 	bne.w	800358a <_svfprintf_r+0xec2>
 800305a:	ac2c      	add	r4, sp, #176	; 0xb0
 800305c:	e622      	b.n	8002ca4 <_svfprintf_r+0x5dc>
 800305e:	2210      	movs	r2, #16
 8003060:	6062      	str	r2, [r4, #4]
 8003062:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003064:	3210      	adds	r2, #16
 8003066:	9221      	str	r2, [sp, #132]	; 0x84
 8003068:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800306a:	3201      	adds	r2, #1
 800306c:	2a07      	cmp	r2, #7
 800306e:	9220      	str	r2, [sp, #128]	; 0x80
 8003070:	dc02      	bgt.n	8003078 <_svfprintf_r+0x9b0>
 8003072:	3408      	adds	r4, #8
 8003074:	3b10      	subs	r3, #16
 8003076:	e61d      	b.n	8002cb4 <_svfprintf_r+0x5ec>
 8003078:	aa1f      	add	r2, sp, #124	; 0x7c
 800307a:	4651      	mov	r1, sl
 800307c:	4658      	mov	r0, fp
 800307e:	930c      	str	r3, [sp, #48]	; 0x30
 8003080:	f001 fe6c 	bl	8004d5c <__ssprint_r>
 8003084:	2800      	cmp	r0, #0
 8003086:	f040 8280 	bne.w	800358a <_svfprintf_r+0xec2>
 800308a:	ac2c      	add	r4, sp, #176	; 0xb0
 800308c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800308e:	e7f1      	b.n	8003074 <_svfprintf_r+0x9ac>
 8003090:	aa1f      	add	r2, sp, #124	; 0x7c
 8003092:	4651      	mov	r1, sl
 8003094:	4658      	mov	r0, fp
 8003096:	f001 fe61 	bl	8004d5c <__ssprint_r>
 800309a:	2800      	cmp	r0, #0
 800309c:	f040 8275 	bne.w	800358a <_svfprintf_r+0xec2>
 80030a0:	ac2c      	add	r4, sp, #176	; 0xb0
 80030a2:	e617      	b.n	8002cd4 <_svfprintf_r+0x60c>
 80030a4:	2310      	movs	r3, #16
 80030a6:	6063      	str	r3, [r4, #4]
 80030a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030aa:	3310      	adds	r3, #16
 80030ac:	9321      	str	r3, [sp, #132]	; 0x84
 80030ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030b0:	3301      	adds	r3, #1
 80030b2:	2b07      	cmp	r3, #7
 80030b4:	9320      	str	r3, [sp, #128]	; 0x80
 80030b6:	dc02      	bgt.n	80030be <_svfprintf_r+0x9f6>
 80030b8:	3408      	adds	r4, #8
 80030ba:	3e10      	subs	r6, #16
 80030bc:	e60e      	b.n	8002cdc <_svfprintf_r+0x614>
 80030be:	aa1f      	add	r2, sp, #124	; 0x7c
 80030c0:	4651      	mov	r1, sl
 80030c2:	4658      	mov	r0, fp
 80030c4:	f001 fe4a 	bl	8004d5c <__ssprint_r>
 80030c8:	2800      	cmp	r0, #0
 80030ca:	f040 825e 	bne.w	800358a <_svfprintf_r+0xec2>
 80030ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80030d0:	e7f3      	b.n	80030ba <_svfprintf_r+0x9f2>
 80030d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80030d4:	4651      	mov	r1, sl
 80030d6:	4658      	mov	r0, fp
 80030d8:	f001 fe40 	bl	8004d5c <__ssprint_r>
 80030dc:	2800      	cmp	r0, #0
 80030de:	f040 8254 	bne.w	800358a <_svfprintf_r+0xec2>
 80030e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80030e4:	e60a      	b.n	8002cfc <_svfprintf_r+0x634>
 80030e6:	9b02      	ldr	r3, [sp, #8]
 80030e8:	2b65      	cmp	r3, #101	; 0x65
 80030ea:	f340 81a9 	ble.w	8003440 <_svfprintf_r+0xd78>
 80030ee:	2200      	movs	r2, #0
 80030f0:	2300      	movs	r3, #0
 80030f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80030f6:	f7fd fcf3 	bl	8000ae0 <__aeabi_dcmpeq>
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d062      	beq.n	80031c4 <_svfprintf_r+0xafc>
 80030fe:	4b2f      	ldr	r3, [pc, #188]	; (80031bc <_svfprintf_r+0xaf4>)
 8003100:	6023      	str	r3, [r4, #0]
 8003102:	2301      	movs	r3, #1
 8003104:	6063      	str	r3, [r4, #4]
 8003106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003108:	3301      	adds	r3, #1
 800310a:	9321      	str	r3, [sp, #132]	; 0x84
 800310c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800310e:	3301      	adds	r3, #1
 8003110:	2b07      	cmp	r3, #7
 8003112:	9320      	str	r3, [sp, #128]	; 0x80
 8003114:	dc25      	bgt.n	8003162 <_svfprintf_r+0xa9a>
 8003116:	3408      	adds	r4, #8
 8003118:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800311a:	9a03      	ldr	r2, [sp, #12]
 800311c:	4293      	cmp	r3, r2
 800311e:	db02      	blt.n	8003126 <_svfprintf_r+0xa5e>
 8003120:	07ee      	lsls	r6, r5, #31
 8003122:	f57f ae02 	bpl.w	8002d2a <_svfprintf_r+0x662>
 8003126:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	9b08      	ldr	r3, [sp, #32]
 800312c:	6063      	str	r3, [r4, #4]
 800312e:	9a08      	ldr	r2, [sp, #32]
 8003130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003132:	4413      	add	r3, r2
 8003134:	9321      	str	r3, [sp, #132]	; 0x84
 8003136:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003138:	3301      	adds	r3, #1
 800313a:	2b07      	cmp	r3, #7
 800313c:	9320      	str	r3, [sp, #128]	; 0x80
 800313e:	dc1a      	bgt.n	8003176 <_svfprintf_r+0xaae>
 8003140:	3408      	adds	r4, #8
 8003142:	9b03      	ldr	r3, [sp, #12]
 8003144:	1e5e      	subs	r6, r3, #1
 8003146:	2e00      	cmp	r6, #0
 8003148:	f77f adef 	ble.w	8002d2a <_svfprintf_r+0x662>
 800314c:	4f1c      	ldr	r7, [pc, #112]	; (80031c0 <_svfprintf_r+0xaf8>)
 800314e:	f04f 0810 	mov.w	r8, #16
 8003152:	2e10      	cmp	r6, #16
 8003154:	6027      	str	r7, [r4, #0]
 8003156:	dc18      	bgt.n	800318a <_svfprintf_r+0xac2>
 8003158:	6066      	str	r6, [r4, #4]
 800315a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800315c:	441e      	add	r6, r3
 800315e:	9621      	str	r6, [sp, #132]	; 0x84
 8003160:	e5d4      	b.n	8002d0c <_svfprintf_r+0x644>
 8003162:	aa1f      	add	r2, sp, #124	; 0x7c
 8003164:	4651      	mov	r1, sl
 8003166:	4658      	mov	r0, fp
 8003168:	f001 fdf8 	bl	8004d5c <__ssprint_r>
 800316c:	2800      	cmp	r0, #0
 800316e:	f040 820c 	bne.w	800358a <_svfprintf_r+0xec2>
 8003172:	ac2c      	add	r4, sp, #176	; 0xb0
 8003174:	e7d0      	b.n	8003118 <_svfprintf_r+0xa50>
 8003176:	aa1f      	add	r2, sp, #124	; 0x7c
 8003178:	4651      	mov	r1, sl
 800317a:	4658      	mov	r0, fp
 800317c:	f001 fdee 	bl	8004d5c <__ssprint_r>
 8003180:	2800      	cmp	r0, #0
 8003182:	f040 8202 	bne.w	800358a <_svfprintf_r+0xec2>
 8003186:	ac2c      	add	r4, sp, #176	; 0xb0
 8003188:	e7db      	b.n	8003142 <_svfprintf_r+0xa7a>
 800318a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800318c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003190:	3310      	adds	r3, #16
 8003192:	9321      	str	r3, [sp, #132]	; 0x84
 8003194:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003196:	3301      	adds	r3, #1
 8003198:	2b07      	cmp	r3, #7
 800319a:	9320      	str	r3, [sp, #128]	; 0x80
 800319c:	dc02      	bgt.n	80031a4 <_svfprintf_r+0xadc>
 800319e:	3408      	adds	r4, #8
 80031a0:	3e10      	subs	r6, #16
 80031a2:	e7d6      	b.n	8003152 <_svfprintf_r+0xa8a>
 80031a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80031a6:	4651      	mov	r1, sl
 80031a8:	4658      	mov	r0, fp
 80031aa:	f001 fdd7 	bl	8004d5c <__ssprint_r>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f040 81eb 	bne.w	800358a <_svfprintf_r+0xec2>
 80031b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80031b6:	e7f3      	b.n	80031a0 <_svfprintf_r+0xad8>
 80031b8:	080056fe 	.word	0x080056fe
 80031bc:	0800570f 	.word	0x0800570f
 80031c0:	08005721 	.word	0x08005721
 80031c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	dc7a      	bgt.n	80032c0 <_svfprintf_r+0xbf8>
 80031ca:	4b9b      	ldr	r3, [pc, #620]	; (8003438 <_svfprintf_r+0xd70>)
 80031cc:	6023      	str	r3, [r4, #0]
 80031ce:	2301      	movs	r3, #1
 80031d0:	6063      	str	r3, [r4, #4]
 80031d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031d4:	3301      	adds	r3, #1
 80031d6:	9321      	str	r3, [sp, #132]	; 0x84
 80031d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031da:	3301      	adds	r3, #1
 80031dc:	2b07      	cmp	r3, #7
 80031de:	9320      	str	r3, [sp, #128]	; 0x80
 80031e0:	dc44      	bgt.n	800326c <_svfprintf_r+0xba4>
 80031e2:	3408      	adds	r4, #8
 80031e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80031e6:	b923      	cbnz	r3, 80031f2 <_svfprintf_r+0xb2a>
 80031e8:	9b03      	ldr	r3, [sp, #12]
 80031ea:	b913      	cbnz	r3, 80031f2 <_svfprintf_r+0xb2a>
 80031ec:	07e8      	lsls	r0, r5, #31
 80031ee:	f57f ad9c 	bpl.w	8002d2a <_svfprintf_r+0x662>
 80031f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031f4:	6023      	str	r3, [r4, #0]
 80031f6:	9b08      	ldr	r3, [sp, #32]
 80031f8:	6063      	str	r3, [r4, #4]
 80031fa:	9a08      	ldr	r2, [sp, #32]
 80031fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031fe:	4413      	add	r3, r2
 8003200:	9321      	str	r3, [sp, #132]	; 0x84
 8003202:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003204:	3301      	adds	r3, #1
 8003206:	2b07      	cmp	r3, #7
 8003208:	9320      	str	r3, [sp, #128]	; 0x80
 800320a:	dc39      	bgt.n	8003280 <_svfprintf_r+0xbb8>
 800320c:	f104 0308 	add.w	r3, r4, #8
 8003210:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003212:	2e00      	cmp	r6, #0
 8003214:	da19      	bge.n	800324a <_svfprintf_r+0xb82>
 8003216:	4f89      	ldr	r7, [pc, #548]	; (800343c <_svfprintf_r+0xd74>)
 8003218:	4276      	negs	r6, r6
 800321a:	2410      	movs	r4, #16
 800321c:	2e10      	cmp	r6, #16
 800321e:	601f      	str	r7, [r3, #0]
 8003220:	dc38      	bgt.n	8003294 <_svfprintf_r+0xbcc>
 8003222:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003224:	605e      	str	r6, [r3, #4]
 8003226:	4416      	add	r6, r2
 8003228:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800322a:	9621      	str	r6, [sp, #132]	; 0x84
 800322c:	3201      	adds	r2, #1
 800322e:	2a07      	cmp	r2, #7
 8003230:	f103 0308 	add.w	r3, r3, #8
 8003234:	9220      	str	r2, [sp, #128]	; 0x80
 8003236:	dd08      	ble.n	800324a <_svfprintf_r+0xb82>
 8003238:	aa1f      	add	r2, sp, #124	; 0x7c
 800323a:	4651      	mov	r1, sl
 800323c:	4658      	mov	r0, fp
 800323e:	f001 fd8d 	bl	8004d5c <__ssprint_r>
 8003242:	2800      	cmp	r0, #0
 8003244:	f040 81a1 	bne.w	800358a <_svfprintf_r+0xec2>
 8003248:	ab2c      	add	r3, sp, #176	; 0xb0
 800324a:	9a03      	ldr	r2, [sp, #12]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	9903      	ldr	r1, [sp, #12]
 8003250:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003252:	f8c3 8000 	str.w	r8, [r3]
 8003256:	440a      	add	r2, r1
 8003258:	9221      	str	r2, [sp, #132]	; 0x84
 800325a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800325c:	3201      	adds	r2, #1
 800325e:	2a07      	cmp	r2, #7
 8003260:	9220      	str	r2, [sp, #128]	; 0x80
 8003262:	f73f ad59 	bgt.w	8002d18 <_svfprintf_r+0x650>
 8003266:	f103 0408 	add.w	r4, r3, #8
 800326a:	e55e      	b.n	8002d2a <_svfprintf_r+0x662>
 800326c:	aa1f      	add	r2, sp, #124	; 0x7c
 800326e:	4651      	mov	r1, sl
 8003270:	4658      	mov	r0, fp
 8003272:	f001 fd73 	bl	8004d5c <__ssprint_r>
 8003276:	2800      	cmp	r0, #0
 8003278:	f040 8187 	bne.w	800358a <_svfprintf_r+0xec2>
 800327c:	ac2c      	add	r4, sp, #176	; 0xb0
 800327e:	e7b1      	b.n	80031e4 <_svfprintf_r+0xb1c>
 8003280:	aa1f      	add	r2, sp, #124	; 0x7c
 8003282:	4651      	mov	r1, sl
 8003284:	4658      	mov	r0, fp
 8003286:	f001 fd69 	bl	8004d5c <__ssprint_r>
 800328a:	2800      	cmp	r0, #0
 800328c:	f040 817d 	bne.w	800358a <_svfprintf_r+0xec2>
 8003290:	ab2c      	add	r3, sp, #176	; 0xb0
 8003292:	e7bd      	b.n	8003210 <_svfprintf_r+0xb48>
 8003294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003296:	605c      	str	r4, [r3, #4]
 8003298:	3210      	adds	r2, #16
 800329a:	9221      	str	r2, [sp, #132]	; 0x84
 800329c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800329e:	3201      	adds	r2, #1
 80032a0:	2a07      	cmp	r2, #7
 80032a2:	9220      	str	r2, [sp, #128]	; 0x80
 80032a4:	dc02      	bgt.n	80032ac <_svfprintf_r+0xbe4>
 80032a6:	3308      	adds	r3, #8
 80032a8:	3e10      	subs	r6, #16
 80032aa:	e7b7      	b.n	800321c <_svfprintf_r+0xb54>
 80032ac:	aa1f      	add	r2, sp, #124	; 0x7c
 80032ae:	4651      	mov	r1, sl
 80032b0:	4658      	mov	r0, fp
 80032b2:	f001 fd53 	bl	8004d5c <__ssprint_r>
 80032b6:	2800      	cmp	r0, #0
 80032b8:	f040 8167 	bne.w	800358a <_svfprintf_r+0xec2>
 80032bc:	ab2c      	add	r3, sp, #176	; 0xb0
 80032be:	e7f3      	b.n	80032a8 <_svfprintf_r+0xbe0>
 80032c0:	9b03      	ldr	r3, [sp, #12]
 80032c2:	42bb      	cmp	r3, r7
 80032c4:	bfa8      	it	ge
 80032c6:	463b      	movge	r3, r7
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	461e      	mov	r6, r3
 80032cc:	dd0b      	ble.n	80032e6 <_svfprintf_r+0xc1e>
 80032ce:	6063      	str	r3, [r4, #4]
 80032d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032d2:	f8c4 8000 	str.w	r8, [r4]
 80032d6:	4433      	add	r3, r6
 80032d8:	9321      	str	r3, [sp, #132]	; 0x84
 80032da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032dc:	3301      	adds	r3, #1
 80032de:	2b07      	cmp	r3, #7
 80032e0:	9320      	str	r3, [sp, #128]	; 0x80
 80032e2:	dc5f      	bgt.n	80033a4 <_svfprintf_r+0xcdc>
 80032e4:	3408      	adds	r4, #8
 80032e6:	2e00      	cmp	r6, #0
 80032e8:	bfac      	ite	ge
 80032ea:	1bbe      	subge	r6, r7, r6
 80032ec:	463e      	movlt	r6, r7
 80032ee:	2e00      	cmp	r6, #0
 80032f0:	dd0f      	ble.n	8003312 <_svfprintf_r+0xc4a>
 80032f2:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800343c <_svfprintf_r+0xd74>
 80032f6:	f8c4 9000 	str.w	r9, [r4]
 80032fa:	2e10      	cmp	r6, #16
 80032fc:	dc5c      	bgt.n	80033b8 <_svfprintf_r+0xcf0>
 80032fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003300:	6066      	str	r6, [r4, #4]
 8003302:	441e      	add	r6, r3
 8003304:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003306:	9621      	str	r6, [sp, #132]	; 0x84
 8003308:	3301      	adds	r3, #1
 800330a:	2b07      	cmp	r3, #7
 800330c:	9320      	str	r3, [sp, #128]	; 0x80
 800330e:	dc6a      	bgt.n	80033e6 <_svfprintf_r+0xd1e>
 8003310:	3408      	adds	r4, #8
 8003312:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003314:	9a03      	ldr	r2, [sp, #12]
 8003316:	4293      	cmp	r3, r2
 8003318:	db01      	blt.n	800331e <_svfprintf_r+0xc56>
 800331a:	07e9      	lsls	r1, r5, #31
 800331c:	d50d      	bpl.n	800333a <_svfprintf_r+0xc72>
 800331e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	9b08      	ldr	r3, [sp, #32]
 8003324:	6063      	str	r3, [r4, #4]
 8003326:	9a08      	ldr	r2, [sp, #32]
 8003328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800332a:	4413      	add	r3, r2
 800332c:	9321      	str	r3, [sp, #132]	; 0x84
 800332e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003330:	3301      	adds	r3, #1
 8003332:	2b07      	cmp	r3, #7
 8003334:	9320      	str	r3, [sp, #128]	; 0x80
 8003336:	dc60      	bgt.n	80033fa <_svfprintf_r+0xd32>
 8003338:	3408      	adds	r4, #8
 800333a:	9b03      	ldr	r3, [sp, #12]
 800333c:	9a03      	ldr	r2, [sp, #12]
 800333e:	1bde      	subs	r6, r3, r7
 8003340:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	429e      	cmp	r6, r3
 8003346:	bfa8      	it	ge
 8003348:	461e      	movge	r6, r3
 800334a:	2e00      	cmp	r6, #0
 800334c:	dd0b      	ble.n	8003366 <_svfprintf_r+0xc9e>
 800334e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003350:	6066      	str	r6, [r4, #4]
 8003352:	4433      	add	r3, r6
 8003354:	9321      	str	r3, [sp, #132]	; 0x84
 8003356:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003358:	3301      	adds	r3, #1
 800335a:	4447      	add	r7, r8
 800335c:	2b07      	cmp	r3, #7
 800335e:	6027      	str	r7, [r4, #0]
 8003360:	9320      	str	r3, [sp, #128]	; 0x80
 8003362:	dc54      	bgt.n	800340e <_svfprintf_r+0xd46>
 8003364:	3408      	adds	r4, #8
 8003366:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003368:	9a03      	ldr	r2, [sp, #12]
 800336a:	2e00      	cmp	r6, #0
 800336c:	eba2 0303 	sub.w	r3, r2, r3
 8003370:	bfac      	ite	ge
 8003372:	1b9e      	subge	r6, r3, r6
 8003374:	461e      	movlt	r6, r3
 8003376:	2e00      	cmp	r6, #0
 8003378:	f77f acd7 	ble.w	8002d2a <_svfprintf_r+0x662>
 800337c:	4f2f      	ldr	r7, [pc, #188]	; (800343c <_svfprintf_r+0xd74>)
 800337e:	f04f 0810 	mov.w	r8, #16
 8003382:	2e10      	cmp	r6, #16
 8003384:	6027      	str	r7, [r4, #0]
 8003386:	f77f aee7 	ble.w	8003158 <_svfprintf_r+0xa90>
 800338a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800338c:	f8c4 8004 	str.w	r8, [r4, #4]
 8003390:	3310      	adds	r3, #16
 8003392:	9321      	str	r3, [sp, #132]	; 0x84
 8003394:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003396:	3301      	adds	r3, #1
 8003398:	2b07      	cmp	r3, #7
 800339a:	9320      	str	r3, [sp, #128]	; 0x80
 800339c:	dc41      	bgt.n	8003422 <_svfprintf_r+0xd5a>
 800339e:	3408      	adds	r4, #8
 80033a0:	3e10      	subs	r6, #16
 80033a2:	e7ee      	b.n	8003382 <_svfprintf_r+0xcba>
 80033a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80033a6:	4651      	mov	r1, sl
 80033a8:	4658      	mov	r0, fp
 80033aa:	f001 fcd7 	bl	8004d5c <__ssprint_r>
 80033ae:	2800      	cmp	r0, #0
 80033b0:	f040 80eb 	bne.w	800358a <_svfprintf_r+0xec2>
 80033b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80033b6:	e796      	b.n	80032e6 <_svfprintf_r+0xc1e>
 80033b8:	2310      	movs	r3, #16
 80033ba:	6063      	str	r3, [r4, #4]
 80033bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033be:	3310      	adds	r3, #16
 80033c0:	9321      	str	r3, [sp, #132]	; 0x84
 80033c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033c4:	3301      	adds	r3, #1
 80033c6:	2b07      	cmp	r3, #7
 80033c8:	9320      	str	r3, [sp, #128]	; 0x80
 80033ca:	dc02      	bgt.n	80033d2 <_svfprintf_r+0xd0a>
 80033cc:	3408      	adds	r4, #8
 80033ce:	3e10      	subs	r6, #16
 80033d0:	e791      	b.n	80032f6 <_svfprintf_r+0xc2e>
 80033d2:	aa1f      	add	r2, sp, #124	; 0x7c
 80033d4:	4651      	mov	r1, sl
 80033d6:	4658      	mov	r0, fp
 80033d8:	f001 fcc0 	bl	8004d5c <__ssprint_r>
 80033dc:	2800      	cmp	r0, #0
 80033de:	f040 80d4 	bne.w	800358a <_svfprintf_r+0xec2>
 80033e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80033e4:	e7f3      	b.n	80033ce <_svfprintf_r+0xd06>
 80033e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80033e8:	4651      	mov	r1, sl
 80033ea:	4658      	mov	r0, fp
 80033ec:	f001 fcb6 	bl	8004d5c <__ssprint_r>
 80033f0:	2800      	cmp	r0, #0
 80033f2:	f040 80ca 	bne.w	800358a <_svfprintf_r+0xec2>
 80033f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80033f8:	e78b      	b.n	8003312 <_svfprintf_r+0xc4a>
 80033fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80033fc:	4651      	mov	r1, sl
 80033fe:	4658      	mov	r0, fp
 8003400:	f001 fcac 	bl	8004d5c <__ssprint_r>
 8003404:	2800      	cmp	r0, #0
 8003406:	f040 80c0 	bne.w	800358a <_svfprintf_r+0xec2>
 800340a:	ac2c      	add	r4, sp, #176	; 0xb0
 800340c:	e795      	b.n	800333a <_svfprintf_r+0xc72>
 800340e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003410:	4651      	mov	r1, sl
 8003412:	4658      	mov	r0, fp
 8003414:	f001 fca2 	bl	8004d5c <__ssprint_r>
 8003418:	2800      	cmp	r0, #0
 800341a:	f040 80b6 	bne.w	800358a <_svfprintf_r+0xec2>
 800341e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003420:	e7a1      	b.n	8003366 <_svfprintf_r+0xc9e>
 8003422:	aa1f      	add	r2, sp, #124	; 0x7c
 8003424:	4651      	mov	r1, sl
 8003426:	4658      	mov	r0, fp
 8003428:	f001 fc98 	bl	8004d5c <__ssprint_r>
 800342c:	2800      	cmp	r0, #0
 800342e:	f040 80ac 	bne.w	800358a <_svfprintf_r+0xec2>
 8003432:	ac2c      	add	r4, sp, #176	; 0xb0
 8003434:	e7b4      	b.n	80033a0 <_svfprintf_r+0xcd8>
 8003436:	bf00      	nop
 8003438:	0800570f 	.word	0x0800570f
 800343c:	08005721 	.word	0x08005721
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	2b01      	cmp	r3, #1
 8003444:	dc01      	bgt.n	800344a <_svfprintf_r+0xd82>
 8003446:	07ea      	lsls	r2, r5, #31
 8003448:	d576      	bpl.n	8003538 <_svfprintf_r+0xe70>
 800344a:	2301      	movs	r3, #1
 800344c:	6063      	str	r3, [r4, #4]
 800344e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003450:	f8c4 8000 	str.w	r8, [r4]
 8003454:	3301      	adds	r3, #1
 8003456:	9321      	str	r3, [sp, #132]	; 0x84
 8003458:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800345a:	3301      	adds	r3, #1
 800345c:	2b07      	cmp	r3, #7
 800345e:	9320      	str	r3, [sp, #128]	; 0x80
 8003460:	dc36      	bgt.n	80034d0 <_svfprintf_r+0xe08>
 8003462:	3408      	adds	r4, #8
 8003464:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003466:	6023      	str	r3, [r4, #0]
 8003468:	9b08      	ldr	r3, [sp, #32]
 800346a:	6063      	str	r3, [r4, #4]
 800346c:	9a08      	ldr	r2, [sp, #32]
 800346e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003470:	4413      	add	r3, r2
 8003472:	9321      	str	r3, [sp, #132]	; 0x84
 8003474:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003476:	3301      	adds	r3, #1
 8003478:	2b07      	cmp	r3, #7
 800347a:	9320      	str	r3, [sp, #128]	; 0x80
 800347c:	dc31      	bgt.n	80034e2 <_svfprintf_r+0xe1a>
 800347e:	3408      	adds	r4, #8
 8003480:	2300      	movs	r3, #0
 8003482:	2200      	movs	r2, #0
 8003484:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003488:	f7fd fb2a 	bl	8000ae0 <__aeabi_dcmpeq>
 800348c:	9b03      	ldr	r3, [sp, #12]
 800348e:	1e5e      	subs	r6, r3, #1
 8003490:	2800      	cmp	r0, #0
 8003492:	d12f      	bne.n	80034f4 <_svfprintf_r+0xe2c>
 8003494:	f108 0301 	add.w	r3, r8, #1
 8003498:	e884 0048 	stmia.w	r4, {r3, r6}
 800349c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800349e:	9a03      	ldr	r2, [sp, #12]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	4413      	add	r3, r2
 80034a4:	9321      	str	r3, [sp, #132]	; 0x84
 80034a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034a8:	3301      	adds	r3, #1
 80034aa:	2b07      	cmp	r3, #7
 80034ac:	9320      	str	r3, [sp, #128]	; 0x80
 80034ae:	dd4a      	ble.n	8003546 <_svfprintf_r+0xe7e>
 80034b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80034b2:	4651      	mov	r1, sl
 80034b4:	4658      	mov	r0, fp
 80034b6:	f001 fc51 	bl	8004d5c <__ssprint_r>
 80034ba:	2800      	cmp	r0, #0
 80034bc:	d165      	bne.n	800358a <_svfprintf_r+0xec2>
 80034be:	ac2c      	add	r4, sp, #176	; 0xb0
 80034c0:	ab1b      	add	r3, sp, #108	; 0x6c
 80034c2:	6023      	str	r3, [r4, #0]
 80034c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80034c6:	6063      	str	r3, [r4, #4]
 80034c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034cc:	4413      	add	r3, r2
 80034ce:	e41c      	b.n	8002d0a <_svfprintf_r+0x642>
 80034d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80034d2:	4651      	mov	r1, sl
 80034d4:	4658      	mov	r0, fp
 80034d6:	f001 fc41 	bl	8004d5c <__ssprint_r>
 80034da:	2800      	cmp	r0, #0
 80034dc:	d155      	bne.n	800358a <_svfprintf_r+0xec2>
 80034de:	ac2c      	add	r4, sp, #176	; 0xb0
 80034e0:	e7c0      	b.n	8003464 <_svfprintf_r+0xd9c>
 80034e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80034e4:	4651      	mov	r1, sl
 80034e6:	4658      	mov	r0, fp
 80034e8:	f001 fc38 	bl	8004d5c <__ssprint_r>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d14c      	bne.n	800358a <_svfprintf_r+0xec2>
 80034f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80034f2:	e7c5      	b.n	8003480 <_svfprintf_r+0xdb8>
 80034f4:	2e00      	cmp	r6, #0
 80034f6:	dde3      	ble.n	80034c0 <_svfprintf_r+0xdf8>
 80034f8:	4f59      	ldr	r7, [pc, #356]	; (8003660 <_svfprintf_r+0xf98>)
 80034fa:	f04f 0810 	mov.w	r8, #16
 80034fe:	2e10      	cmp	r6, #16
 8003500:	6027      	str	r7, [r4, #0]
 8003502:	dc04      	bgt.n	800350e <_svfprintf_r+0xe46>
 8003504:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003506:	6066      	str	r6, [r4, #4]
 8003508:	441e      	add	r6, r3
 800350a:	9621      	str	r6, [sp, #132]	; 0x84
 800350c:	e7cb      	b.n	80034a6 <_svfprintf_r+0xdde>
 800350e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003510:	f8c4 8004 	str.w	r8, [r4, #4]
 8003514:	3310      	adds	r3, #16
 8003516:	9321      	str	r3, [sp, #132]	; 0x84
 8003518:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800351a:	3301      	adds	r3, #1
 800351c:	2b07      	cmp	r3, #7
 800351e:	9320      	str	r3, [sp, #128]	; 0x80
 8003520:	dc02      	bgt.n	8003528 <_svfprintf_r+0xe60>
 8003522:	3408      	adds	r4, #8
 8003524:	3e10      	subs	r6, #16
 8003526:	e7ea      	b.n	80034fe <_svfprintf_r+0xe36>
 8003528:	aa1f      	add	r2, sp, #124	; 0x7c
 800352a:	4651      	mov	r1, sl
 800352c:	4658      	mov	r0, fp
 800352e:	f001 fc15 	bl	8004d5c <__ssprint_r>
 8003532:	bb50      	cbnz	r0, 800358a <_svfprintf_r+0xec2>
 8003534:	ac2c      	add	r4, sp, #176	; 0xb0
 8003536:	e7f5      	b.n	8003524 <_svfprintf_r+0xe5c>
 8003538:	2301      	movs	r3, #1
 800353a:	6063      	str	r3, [r4, #4]
 800353c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800353e:	f8c4 8000 	str.w	r8, [r4]
 8003542:	3301      	adds	r3, #1
 8003544:	e7ae      	b.n	80034a4 <_svfprintf_r+0xddc>
 8003546:	3408      	adds	r4, #8
 8003548:	e7ba      	b.n	80034c0 <_svfprintf_r+0xdf8>
 800354a:	3408      	adds	r4, #8
 800354c:	f7ff bbed 	b.w	8002d2a <_svfprintf_r+0x662>
 8003550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003552:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003554:	1a9d      	subs	r5, r3, r2
 8003556:	2d00      	cmp	r5, #0
 8003558:	f77f abea 	ble.w	8002d30 <_svfprintf_r+0x668>
 800355c:	2610      	movs	r6, #16
 800355e:	4b41      	ldr	r3, [pc, #260]	; (8003664 <_svfprintf_r+0xf9c>)
 8003560:	6023      	str	r3, [r4, #0]
 8003562:	2d10      	cmp	r5, #16
 8003564:	dc1b      	bgt.n	800359e <_svfprintf_r+0xed6>
 8003566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003568:	6065      	str	r5, [r4, #4]
 800356a:	441d      	add	r5, r3
 800356c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800356e:	9521      	str	r5, [sp, #132]	; 0x84
 8003570:	3301      	adds	r3, #1
 8003572:	2b07      	cmp	r3, #7
 8003574:	9320      	str	r3, [sp, #128]	; 0x80
 8003576:	f77f abdb 	ble.w	8002d30 <_svfprintf_r+0x668>
 800357a:	aa1f      	add	r2, sp, #124	; 0x7c
 800357c:	4651      	mov	r1, sl
 800357e:	4658      	mov	r0, fp
 8003580:	f001 fbec 	bl	8004d5c <__ssprint_r>
 8003584:	2800      	cmp	r0, #0
 8003586:	f43f abd3 	beq.w	8002d30 <_svfprintf_r+0x668>
 800358a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800358e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003594:	bf18      	it	ne
 8003596:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800359a:	f7ff b8b9 	b.w	8002710 <_svfprintf_r+0x48>
 800359e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035a0:	6066      	str	r6, [r4, #4]
 80035a2:	3310      	adds	r3, #16
 80035a4:	9321      	str	r3, [sp, #132]	; 0x84
 80035a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80035a8:	3301      	adds	r3, #1
 80035aa:	2b07      	cmp	r3, #7
 80035ac:	9320      	str	r3, [sp, #128]	; 0x80
 80035ae:	dc02      	bgt.n	80035b6 <_svfprintf_r+0xeee>
 80035b0:	3408      	adds	r4, #8
 80035b2:	3d10      	subs	r5, #16
 80035b4:	e7d3      	b.n	800355e <_svfprintf_r+0xe96>
 80035b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80035b8:	4651      	mov	r1, sl
 80035ba:	4658      	mov	r0, fp
 80035bc:	f001 fbce 	bl	8004d5c <__ssprint_r>
 80035c0:	2800      	cmp	r0, #0
 80035c2:	d1e2      	bne.n	800358a <_svfprintf_r+0xec2>
 80035c4:	ac2c      	add	r4, sp, #176	; 0xb0
 80035c6:	e7f4      	b.n	80035b2 <_svfprintf_r+0xeea>
 80035c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0dd      	beq.n	800358a <_svfprintf_r+0xec2>
 80035ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80035d0:	4651      	mov	r1, sl
 80035d2:	4658      	mov	r0, fp
 80035d4:	f001 fbc2 	bl	8004d5c <__ssprint_r>
 80035d8:	e7d7      	b.n	800358a <_svfprintf_r+0xec2>
 80035da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035de:	4610      	mov	r0, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f7fd faaf 	bl	8000b44 <__aeabi_dcmpun>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	f43f aa44 	beq.w	8002a74 <_svfprintf_r+0x3ac>
 80035ec:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <_svfprintf_r+0xfa0>)
 80035ee:	4a1f      	ldr	r2, [pc, #124]	; (800366c <_svfprintf_r+0xfa4>)
 80035f0:	f7ff ba34 	b.w	8002a5c <_svfprintf_r+0x394>
 80035f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80035f6:	eba3 0308 	sub.w	r3, r3, r8
 80035fa:	9303      	str	r3, [sp, #12]
 80035fc:	f7ff bab5 	b.w	8002b6a <_svfprintf_r+0x4a2>
 8003600:	ea56 0207 	orrs.w	r2, r6, r7
 8003604:	950b      	str	r5, [sp, #44]	; 0x2c
 8003606:	f43f ac2b 	beq.w	8002e60 <_svfprintf_r+0x798>
 800360a:	2b01      	cmp	r3, #1
 800360c:	f43f ac9d 	beq.w	8002f4a <_svfprintf_r+0x882>
 8003610:	2b02      	cmp	r3, #2
 8003612:	f43f acbd 	beq.w	8002f90 <_svfprintf_r+0x8c8>
 8003616:	ab2c      	add	r3, sp, #176	; 0xb0
 8003618:	08f1      	lsrs	r1, r6, #3
 800361a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800361e:	08f8      	lsrs	r0, r7, #3
 8003620:	f006 0207 	and.w	r2, r6, #7
 8003624:	4607      	mov	r7, r0
 8003626:	460e      	mov	r6, r1
 8003628:	3230      	adds	r2, #48	; 0x30
 800362a:	ea56 0107 	orrs.w	r1, r6, r7
 800362e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8003632:	f803 2c01 	strb.w	r2, [r3, #-1]
 8003636:	f47f ac86 	bne.w	8002f46 <_svfprintf_r+0x87e>
 800363a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800363c:	07c9      	lsls	r1, r1, #31
 800363e:	d506      	bpl.n	800364e <_svfprintf_r+0xf86>
 8003640:	2a30      	cmp	r2, #48	; 0x30
 8003642:	d004      	beq.n	800364e <_svfprintf_r+0xf86>
 8003644:	2230      	movs	r2, #48	; 0x30
 8003646:	f808 2c01 	strb.w	r2, [r8, #-1]
 800364a:	f1a3 0802 	sub.w	r8, r3, #2
 800364e:	464e      	mov	r6, r9
 8003650:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003654:	eba9 0908 	sub.w	r9, r9, r8
 8003658:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800365a:	2700      	movs	r7, #0
 800365c:	f7ff bad1 	b.w	8002c02 <_svfprintf_r+0x53a>
 8003660:	08005721 	.word	0x08005721
 8003664:	08005711 	.word	0x08005711
 8003668:	080056e5 	.word	0x080056e5
 800366c:	080056e9 	.word	0x080056e9

08003670 <quorem>:
 8003670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	6903      	ldr	r3, [r0, #16]
 8003676:	690c      	ldr	r4, [r1, #16]
 8003678:	429c      	cmp	r4, r3
 800367a:	4680      	mov	r8, r0
 800367c:	f300 8082 	bgt.w	8003784 <quorem+0x114>
 8003680:	3c01      	subs	r4, #1
 8003682:	f101 0714 	add.w	r7, r1, #20
 8003686:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800368a:	f100 0614 	add.w	r6, r0, #20
 800368e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003692:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003696:	eb06 030e 	add.w	r3, r6, lr
 800369a:	3501      	adds	r5, #1
 800369c:	eb07 090e 	add.w	r9, r7, lr
 80036a0:	9301      	str	r3, [sp, #4]
 80036a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80036a6:	b395      	cbz	r5, 800370e <quorem+0x9e>
 80036a8:	f04f 0a00 	mov.w	sl, #0
 80036ac:	4638      	mov	r0, r7
 80036ae:	46b4      	mov	ip, r6
 80036b0:	46d3      	mov	fp, sl
 80036b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80036b6:	b293      	uxth	r3, r2
 80036b8:	fb05 a303 	mla	r3, r5, r3, sl
 80036bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	ebab 0303 	sub.w	r3, fp, r3
 80036c6:	0c12      	lsrs	r2, r2, #16
 80036c8:	f8bc b000 	ldrh.w	fp, [ip]
 80036cc:	fb05 a202 	mla	r2, r5, r2, sl
 80036d0:	fa13 f38b 	uxtah	r3, r3, fp
 80036d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80036d8:	fa1f fb82 	uxth.w	fp, r2
 80036dc:	f8dc 2000 	ldr.w	r2, [ip]
 80036e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80036e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036ee:	4581      	cmp	r9, r0
 80036f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80036f4:	f84c 3b04 	str.w	r3, [ip], #4
 80036f8:	d2db      	bcs.n	80036b2 <quorem+0x42>
 80036fa:	f856 300e 	ldr.w	r3, [r6, lr]
 80036fe:	b933      	cbnz	r3, 800370e <quorem+0x9e>
 8003700:	9b01      	ldr	r3, [sp, #4]
 8003702:	3b04      	subs	r3, #4
 8003704:	429e      	cmp	r6, r3
 8003706:	461a      	mov	r2, r3
 8003708:	d330      	bcc.n	800376c <quorem+0xfc>
 800370a:	f8c8 4010 	str.w	r4, [r8, #16]
 800370e:	4640      	mov	r0, r8
 8003710:	f001 fa4d 	bl	8004bae <__mcmp>
 8003714:	2800      	cmp	r0, #0
 8003716:	db25      	blt.n	8003764 <quorem+0xf4>
 8003718:	3501      	adds	r5, #1
 800371a:	4630      	mov	r0, r6
 800371c:	f04f 0e00 	mov.w	lr, #0
 8003720:	f857 2b04 	ldr.w	r2, [r7], #4
 8003724:	f8d0 c000 	ldr.w	ip, [r0]
 8003728:	b293      	uxth	r3, r2
 800372a:	ebae 0303 	sub.w	r3, lr, r3
 800372e:	0c12      	lsrs	r2, r2, #16
 8003730:	fa13 f38c 	uxtah	r3, r3, ip
 8003734:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800373c:	b29b      	uxth	r3, r3
 800373e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003742:	45b9      	cmp	r9, r7
 8003744:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003748:	f840 3b04 	str.w	r3, [r0], #4
 800374c:	d2e8      	bcs.n	8003720 <quorem+0xb0>
 800374e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003752:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003756:	b92a      	cbnz	r2, 8003764 <quorem+0xf4>
 8003758:	3b04      	subs	r3, #4
 800375a:	429e      	cmp	r6, r3
 800375c:	461a      	mov	r2, r3
 800375e:	d30b      	bcc.n	8003778 <quorem+0x108>
 8003760:	f8c8 4010 	str.w	r4, [r8, #16]
 8003764:	4628      	mov	r0, r5
 8003766:	b003      	add	sp, #12
 8003768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	3b04      	subs	r3, #4
 8003770:	2a00      	cmp	r2, #0
 8003772:	d1ca      	bne.n	800370a <quorem+0x9a>
 8003774:	3c01      	subs	r4, #1
 8003776:	e7c5      	b.n	8003704 <quorem+0x94>
 8003778:	6812      	ldr	r2, [r2, #0]
 800377a:	3b04      	subs	r3, #4
 800377c:	2a00      	cmp	r2, #0
 800377e:	d1ef      	bne.n	8003760 <quorem+0xf0>
 8003780:	3c01      	subs	r4, #1
 8003782:	e7ea      	b.n	800375a <quorem+0xea>
 8003784:	2000      	movs	r0, #0
 8003786:	e7ee      	b.n	8003766 <quorem+0xf6>

08003788 <_dtoa_r>:
 8003788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800378c:	ec57 6b10 	vmov	r6, r7, d0
 8003790:	b097      	sub	sp, #92	; 0x5c
 8003792:	e9cd 6700 	strd	r6, r7, [sp]
 8003796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003798:	9107      	str	r1, [sp, #28]
 800379a:	4604      	mov	r4, r0
 800379c:	920a      	str	r2, [sp, #40]	; 0x28
 800379e:	930f      	str	r3, [sp, #60]	; 0x3c
 80037a0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80037a2:	b93e      	cbnz	r6, 80037b4 <_dtoa_r+0x2c>
 80037a4:	2010      	movs	r0, #16
 80037a6:	f000 fdcb 	bl	8004340 <malloc>
 80037aa:	6260      	str	r0, [r4, #36]	; 0x24
 80037ac:	6046      	str	r6, [r0, #4]
 80037ae:	6086      	str	r6, [r0, #8]
 80037b0:	6006      	str	r6, [r0, #0]
 80037b2:	60c6      	str	r6, [r0, #12]
 80037b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037b6:	6819      	ldr	r1, [r3, #0]
 80037b8:	b151      	cbz	r1, 80037d0 <_dtoa_r+0x48>
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	604a      	str	r2, [r1, #4]
 80037be:	2301      	movs	r3, #1
 80037c0:	4093      	lsls	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]
 80037c4:	4620      	mov	r0, r4
 80037c6:	f001 f81d 	bl	8004804 <_Bfree>
 80037ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	9b01      	ldr	r3, [sp, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bfbf      	itttt	lt
 80037d6:	2301      	movlt	r3, #1
 80037d8:	602b      	strlt	r3, [r5, #0]
 80037da:	9b01      	ldrlt	r3, [sp, #4]
 80037dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80037e0:	bfb2      	itee	lt
 80037e2:	9301      	strlt	r3, [sp, #4]
 80037e4:	2300      	movge	r3, #0
 80037e6:	602b      	strge	r3, [r5, #0]
 80037e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80037ec:	4ba8      	ldr	r3, [pc, #672]	; (8003a90 <_dtoa_r+0x308>)
 80037ee:	ea33 0308 	bics.w	r3, r3, r8
 80037f2:	d11b      	bne.n	800382c <_dtoa_r+0xa4>
 80037f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80037f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80037fa:	6013      	str	r3, [r2, #0]
 80037fc:	9b00      	ldr	r3, [sp, #0]
 80037fe:	b923      	cbnz	r3, 800380a <_dtoa_r+0x82>
 8003800:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003804:	2800      	cmp	r0, #0
 8003806:	f000 8578 	beq.w	80042fa <_dtoa_r+0xb72>
 800380a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800380c:	b953      	cbnz	r3, 8003824 <_dtoa_r+0x9c>
 800380e:	4ba1      	ldr	r3, [pc, #644]	; (8003a94 <_dtoa_r+0x30c>)
 8003810:	e021      	b.n	8003856 <_dtoa_r+0xce>
 8003812:	4ba1      	ldr	r3, [pc, #644]	; (8003a98 <_dtoa_r+0x310>)
 8003814:	9302      	str	r3, [sp, #8]
 8003816:	3308      	adds	r3, #8
 8003818:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	9802      	ldr	r0, [sp, #8]
 800381e:	b017      	add	sp, #92	; 0x5c
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003824:	4b9b      	ldr	r3, [pc, #620]	; (8003a94 <_dtoa_r+0x30c>)
 8003826:	9302      	str	r3, [sp, #8]
 8003828:	3303      	adds	r3, #3
 800382a:	e7f5      	b.n	8003818 <_dtoa_r+0x90>
 800382c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003830:	2200      	movs	r2, #0
 8003832:	2300      	movs	r3, #0
 8003834:	4630      	mov	r0, r6
 8003836:	4639      	mov	r1, r7
 8003838:	f7fd f952 	bl	8000ae0 <__aeabi_dcmpeq>
 800383c:	4681      	mov	r9, r0
 800383e:	b160      	cbz	r0, 800385a <_dtoa_r+0xd2>
 8003840:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003842:	2301      	movs	r3, #1
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8553 	beq.w	80042f4 <_dtoa_r+0xb6c>
 800384e:	4b93      	ldr	r3, [pc, #588]	; (8003a9c <_dtoa_r+0x314>)
 8003850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	9302      	str	r3, [sp, #8]
 8003858:	e7e0      	b.n	800381c <_dtoa_r+0x94>
 800385a:	aa14      	add	r2, sp, #80	; 0x50
 800385c:	a915      	add	r1, sp, #84	; 0x54
 800385e:	ec47 6b10 	vmov	d0, r6, r7
 8003862:	4620      	mov	r0, r4
 8003864:	f001 fa1b 	bl	8004c9e <__d2b>
 8003868:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800386c:	4682      	mov	sl, r0
 800386e:	2d00      	cmp	r5, #0
 8003870:	d07e      	beq.n	8003970 <_dtoa_r+0x1e8>
 8003872:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003876:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800387a:	4630      	mov	r0, r6
 800387c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003880:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003884:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8003888:	2200      	movs	r2, #0
 800388a:	4b85      	ldr	r3, [pc, #532]	; (8003aa0 <_dtoa_r+0x318>)
 800388c:	f7fc fd0c 	bl	80002a8 <__aeabi_dsub>
 8003890:	a379      	add	r3, pc, #484	; (adr r3, 8003a78 <_dtoa_r+0x2f0>)
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f7fc febb 	bl	8000610 <__aeabi_dmul>
 800389a:	a379      	add	r3, pc, #484	; (adr r3, 8003a80 <_dtoa_r+0x2f8>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fc fd04 	bl	80002ac <__adddf3>
 80038a4:	4606      	mov	r6, r0
 80038a6:	4628      	mov	r0, r5
 80038a8:	460f      	mov	r7, r1
 80038aa:	f7fc fe4b 	bl	8000544 <__aeabi_i2d>
 80038ae:	a376      	add	r3, pc, #472	; (adr r3, 8003a88 <_dtoa_r+0x300>)
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f7fc feac 	bl	8000610 <__aeabi_dmul>
 80038b8:	4602      	mov	r2, r0
 80038ba:	460b      	mov	r3, r1
 80038bc:	4630      	mov	r0, r6
 80038be:	4639      	mov	r1, r7
 80038c0:	f7fc fcf4 	bl	80002ac <__adddf3>
 80038c4:	4606      	mov	r6, r0
 80038c6:	460f      	mov	r7, r1
 80038c8:	f7fd f952 	bl	8000b70 <__aeabi_d2iz>
 80038cc:	2200      	movs	r2, #0
 80038ce:	4683      	mov	fp, r0
 80038d0:	2300      	movs	r3, #0
 80038d2:	4630      	mov	r0, r6
 80038d4:	4639      	mov	r1, r7
 80038d6:	f7fd f90d 	bl	8000af4 <__aeabi_dcmplt>
 80038da:	b158      	cbz	r0, 80038f4 <_dtoa_r+0x16c>
 80038dc:	4658      	mov	r0, fp
 80038de:	f7fc fe31 	bl	8000544 <__aeabi_i2d>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4630      	mov	r0, r6
 80038e8:	4639      	mov	r1, r7
 80038ea:	f7fd f8f9 	bl	8000ae0 <__aeabi_dcmpeq>
 80038ee:	b908      	cbnz	r0, 80038f4 <_dtoa_r+0x16c>
 80038f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80038f4:	f1bb 0f16 	cmp.w	fp, #22
 80038f8:	d859      	bhi.n	80039ae <_dtoa_r+0x226>
 80038fa:	496a      	ldr	r1, [pc, #424]	; (8003aa4 <_dtoa_r+0x31c>)
 80038fc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003908:	f7fd f912 	bl	8000b30 <__aeabi_dcmpgt>
 800390c:	2800      	cmp	r0, #0
 800390e:	d050      	beq.n	80039b2 <_dtoa_r+0x22a>
 8003910:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003914:	2300      	movs	r3, #0
 8003916:	930e      	str	r3, [sp, #56]	; 0x38
 8003918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800391a:	1b5d      	subs	r5, r3, r5
 800391c:	1e6b      	subs	r3, r5, #1
 800391e:	9306      	str	r3, [sp, #24]
 8003920:	bf45      	ittet	mi
 8003922:	f1c5 0301 	rsbmi	r3, r5, #1
 8003926:	9305      	strmi	r3, [sp, #20]
 8003928:	2300      	movpl	r3, #0
 800392a:	2300      	movmi	r3, #0
 800392c:	bf4c      	ite	mi
 800392e:	9306      	strmi	r3, [sp, #24]
 8003930:	9305      	strpl	r3, [sp, #20]
 8003932:	f1bb 0f00 	cmp.w	fp, #0
 8003936:	db3e      	blt.n	80039b6 <_dtoa_r+0x22e>
 8003938:	9b06      	ldr	r3, [sp, #24]
 800393a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800393e:	445b      	add	r3, fp
 8003940:	9306      	str	r3, [sp, #24]
 8003942:	2300      	movs	r3, #0
 8003944:	9308      	str	r3, [sp, #32]
 8003946:	9b07      	ldr	r3, [sp, #28]
 8003948:	2b09      	cmp	r3, #9
 800394a:	f200 80af 	bhi.w	8003aac <_dtoa_r+0x324>
 800394e:	2b05      	cmp	r3, #5
 8003950:	bfc4      	itt	gt
 8003952:	3b04      	subgt	r3, #4
 8003954:	9307      	strgt	r3, [sp, #28]
 8003956:	9b07      	ldr	r3, [sp, #28]
 8003958:	f1a3 0302 	sub.w	r3, r3, #2
 800395c:	bfcc      	ite	gt
 800395e:	2600      	movgt	r6, #0
 8003960:	2601      	movle	r6, #1
 8003962:	2b03      	cmp	r3, #3
 8003964:	f200 80ae 	bhi.w	8003ac4 <_dtoa_r+0x33c>
 8003968:	e8df f003 	tbb	[pc, r3]
 800396c:	772f8482 	.word	0x772f8482
 8003970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003972:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003974:	441d      	add	r5, r3
 8003976:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800397a:	2b20      	cmp	r3, #32
 800397c:	dd11      	ble.n	80039a2 <_dtoa_r+0x21a>
 800397e:	9a00      	ldr	r2, [sp, #0]
 8003980:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003984:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003988:	fa22 f000 	lsr.w	r0, r2, r0
 800398c:	fa08 f303 	lsl.w	r3, r8, r3
 8003990:	4318      	orrs	r0, r3
 8003992:	f7fc fdc7 	bl	8000524 <__aeabi_ui2d>
 8003996:	2301      	movs	r3, #1
 8003998:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800399c:	3d01      	subs	r5, #1
 800399e:	9312      	str	r3, [sp, #72]	; 0x48
 80039a0:	e772      	b.n	8003888 <_dtoa_r+0x100>
 80039a2:	f1c3 0020 	rsb	r0, r3, #32
 80039a6:	9b00      	ldr	r3, [sp, #0]
 80039a8:	fa03 f000 	lsl.w	r0, r3, r0
 80039ac:	e7f1      	b.n	8003992 <_dtoa_r+0x20a>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e7b1      	b.n	8003916 <_dtoa_r+0x18e>
 80039b2:	900e      	str	r0, [sp, #56]	; 0x38
 80039b4:	e7b0      	b.n	8003918 <_dtoa_r+0x190>
 80039b6:	9b05      	ldr	r3, [sp, #20]
 80039b8:	eba3 030b 	sub.w	r3, r3, fp
 80039bc:	9305      	str	r3, [sp, #20]
 80039be:	f1cb 0300 	rsb	r3, fp, #0
 80039c2:	9308      	str	r3, [sp, #32]
 80039c4:	2300      	movs	r3, #0
 80039c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80039c8:	e7bd      	b.n	8003946 <_dtoa_r+0x1be>
 80039ca:	2301      	movs	r3, #1
 80039cc:	9309      	str	r3, [sp, #36]	; 0x24
 80039ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	dd7a      	ble.n	8003aca <_dtoa_r+0x342>
 80039d4:	9304      	str	r3, [sp, #16]
 80039d6:	9303      	str	r3, [sp, #12]
 80039d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80039da:	2200      	movs	r2, #0
 80039dc:	606a      	str	r2, [r5, #4]
 80039de:	2104      	movs	r1, #4
 80039e0:	f101 0214 	add.w	r2, r1, #20
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d975      	bls.n	8003ad4 <_dtoa_r+0x34c>
 80039e8:	6869      	ldr	r1, [r5, #4]
 80039ea:	4620      	mov	r0, r4
 80039ec:	f000 fed6 	bl	800479c <_Balloc>
 80039f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039f2:	6028      	str	r0, [r5, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	9302      	str	r3, [sp, #8]
 80039f8:	9b03      	ldr	r3, [sp, #12]
 80039fa:	2b0e      	cmp	r3, #14
 80039fc:	f200 80e5 	bhi.w	8003bca <_dtoa_r+0x442>
 8003a00:	2e00      	cmp	r6, #0
 8003a02:	f000 80e2 	beq.w	8003bca <_dtoa_r+0x442>
 8003a06:	ed9d 7b00 	vldr	d7, [sp]
 8003a0a:	f1bb 0f00 	cmp.w	fp, #0
 8003a0e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003a12:	dd74      	ble.n	8003afe <_dtoa_r+0x376>
 8003a14:	4a23      	ldr	r2, [pc, #140]	; (8003aa4 <_dtoa_r+0x31c>)
 8003a16:	f00b 030f 	and.w	r3, fp, #15
 8003a1a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8003a1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003a22:	06f0      	lsls	r0, r6, #27
 8003a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003a28:	d559      	bpl.n	8003ade <_dtoa_r+0x356>
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <_dtoa_r+0x320>)
 8003a2c:	ec51 0b17 	vmov	r0, r1, d7
 8003a30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003a34:	f7fc ff16 	bl	8000864 <__aeabi_ddiv>
 8003a38:	e9cd 0100 	strd	r0, r1, [sp]
 8003a3c:	f006 060f 	and.w	r6, r6, #15
 8003a40:	2503      	movs	r5, #3
 8003a42:	4f19      	ldr	r7, [pc, #100]	; (8003aa8 <_dtoa_r+0x320>)
 8003a44:	2e00      	cmp	r6, #0
 8003a46:	d14c      	bne.n	8003ae2 <_dtoa_r+0x35a>
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003a50:	f7fc ff08 	bl	8000864 <__aeabi_ddiv>
 8003a54:	e9cd 0100 	strd	r0, r1, [sp]
 8003a58:	e06a      	b.n	8003b30 <_dtoa_r+0x3a8>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a60:	445b      	add	r3, fp
 8003a62:	9304      	str	r3, [sp, #16]
 8003a64:	3301      	adds	r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	9303      	str	r3, [sp, #12]
 8003a6a:	bfb8      	it	lt
 8003a6c:	2301      	movlt	r3, #1
 8003a6e:	e7b3      	b.n	80039d8 <_dtoa_r+0x250>
 8003a70:	2300      	movs	r3, #0
 8003a72:	e7ab      	b.n	80039cc <_dtoa_r+0x244>
 8003a74:	2300      	movs	r3, #0
 8003a76:	e7f1      	b.n	8003a5c <_dtoa_r+0x2d4>
 8003a78:	636f4361 	.word	0x636f4361
 8003a7c:	3fd287a7 	.word	0x3fd287a7
 8003a80:	8b60c8b3 	.word	0x8b60c8b3
 8003a84:	3fc68a28 	.word	0x3fc68a28
 8003a88:	509f79fb 	.word	0x509f79fb
 8003a8c:	3fd34413 	.word	0x3fd34413
 8003a90:	7ff00000 	.word	0x7ff00000
 8003a94:	0800573a 	.word	0x0800573a
 8003a98:	08005731 	.word	0x08005731
 8003a9c:	08005710 	.word	0x08005710
 8003aa0:	3ff80000 	.word	0x3ff80000
 8003aa4:	08005768 	.word	0x08005768
 8003aa8:	08005740 	.word	0x08005740
 8003aac:	2601      	movs	r6, #1
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9307      	str	r3, [sp, #28]
 8003ab2:	9609      	str	r6, [sp, #36]	; 0x24
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ab8:	9304      	str	r3, [sp, #16]
 8003aba:	9303      	str	r3, [sp, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	2312      	movs	r3, #18
 8003ac0:	920a      	str	r2, [sp, #40]	; 0x28
 8003ac2:	e789      	b.n	80039d8 <_dtoa_r+0x250>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac8:	e7f4      	b.n	8003ab4 <_dtoa_r+0x32c>
 8003aca:	2301      	movs	r3, #1
 8003acc:	9304      	str	r3, [sp, #16]
 8003ace:	9303      	str	r3, [sp, #12]
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	e7f5      	b.n	8003ac0 <_dtoa_r+0x338>
 8003ad4:	686a      	ldr	r2, [r5, #4]
 8003ad6:	3201      	adds	r2, #1
 8003ad8:	606a      	str	r2, [r5, #4]
 8003ada:	0049      	lsls	r1, r1, #1
 8003adc:	e780      	b.n	80039e0 <_dtoa_r+0x258>
 8003ade:	2502      	movs	r5, #2
 8003ae0:	e7af      	b.n	8003a42 <_dtoa_r+0x2ba>
 8003ae2:	07f1      	lsls	r1, r6, #31
 8003ae4:	d508      	bpl.n	8003af8 <_dtoa_r+0x370>
 8003ae6:	4640      	mov	r0, r8
 8003ae8:	4649      	mov	r1, r9
 8003aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003aee:	f7fc fd8f 	bl	8000610 <__aeabi_dmul>
 8003af2:	3501      	adds	r5, #1
 8003af4:	4680      	mov	r8, r0
 8003af6:	4689      	mov	r9, r1
 8003af8:	1076      	asrs	r6, r6, #1
 8003afa:	3708      	adds	r7, #8
 8003afc:	e7a2      	b.n	8003a44 <_dtoa_r+0x2bc>
 8003afe:	f000 809d 	beq.w	8003c3c <_dtoa_r+0x4b4>
 8003b02:	f1cb 0600 	rsb	r6, fp, #0
 8003b06:	4b9f      	ldr	r3, [pc, #636]	; (8003d84 <_dtoa_r+0x5fc>)
 8003b08:	4f9f      	ldr	r7, [pc, #636]	; (8003d88 <_dtoa_r+0x600>)
 8003b0a:	f006 020f 	and.w	r2, r6, #15
 8003b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003b1a:	f7fc fd79 	bl	8000610 <__aeabi_dmul>
 8003b1e:	e9cd 0100 	strd	r0, r1, [sp]
 8003b22:	1136      	asrs	r6, r6, #4
 8003b24:	2300      	movs	r3, #0
 8003b26:	2502      	movs	r5, #2
 8003b28:	2e00      	cmp	r6, #0
 8003b2a:	d17c      	bne.n	8003c26 <_dtoa_r+0x49e>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d191      	bne.n	8003a54 <_dtoa_r+0x2cc>
 8003b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8084 	beq.w	8003c40 <_dtoa_r+0x4b8>
 8003b38:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	4b93      	ldr	r3, [pc, #588]	; (8003d8c <_dtoa_r+0x604>)
 8003b40:	4640      	mov	r0, r8
 8003b42:	4649      	mov	r1, r9
 8003b44:	f7fc ffd6 	bl	8000af4 <__aeabi_dcmplt>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	d079      	beq.n	8003c40 <_dtoa_r+0x4b8>
 8003b4c:	9b03      	ldr	r3, [sp, #12]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d076      	beq.n	8003c40 <_dtoa_r+0x4b8>
 8003b52:	9b04      	ldr	r3, [sp, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	dd34      	ble.n	8003bc2 <_dtoa_r+0x43a>
 8003b58:	2200      	movs	r2, #0
 8003b5a:	4b8d      	ldr	r3, [pc, #564]	; (8003d90 <_dtoa_r+0x608>)
 8003b5c:	4640      	mov	r0, r8
 8003b5e:	4649      	mov	r1, r9
 8003b60:	f7fc fd56 	bl	8000610 <__aeabi_dmul>
 8003b64:	e9cd 0100 	strd	r0, r1, [sp]
 8003b68:	9e04      	ldr	r6, [sp, #16]
 8003b6a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003b6e:	3501      	adds	r5, #1
 8003b70:	4628      	mov	r0, r5
 8003b72:	f7fc fce7 	bl	8000544 <__aeabi_i2d>
 8003b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b7a:	f7fc fd49 	bl	8000610 <__aeabi_dmul>
 8003b7e:	2200      	movs	r2, #0
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <_dtoa_r+0x60c>)
 8003b82:	f7fc fb93 	bl	80002ac <__adddf3>
 8003b86:	4680      	mov	r8, r0
 8003b88:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8003b8c:	2e00      	cmp	r6, #0
 8003b8e:	d15a      	bne.n	8003c46 <_dtoa_r+0x4be>
 8003b90:	2200      	movs	r2, #0
 8003b92:	4b81      	ldr	r3, [pc, #516]	; (8003d98 <_dtoa_r+0x610>)
 8003b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b98:	f7fc fb86 	bl	80002a8 <__aeabi_dsub>
 8003b9c:	4642      	mov	r2, r8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	e9cd 0100 	strd	r0, r1, [sp]
 8003ba4:	f7fc ffc4 	bl	8000b30 <__aeabi_dcmpgt>
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	f040 829b 	bne.w	80040e4 <_dtoa_r+0x95c>
 8003bae:	4642      	mov	r2, r8
 8003bb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bb8:	f7fc ff9c 	bl	8000af4 <__aeabi_dcmplt>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	f040 828f 	bne.w	80040e0 <_dtoa_r+0x958>
 8003bc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003bc6:	e9cd 2300 	strd	r2, r3, [sp]
 8003bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f2c0 8150 	blt.w	8003e72 <_dtoa_r+0x6ea>
 8003bd2:	f1bb 0f0e 	cmp.w	fp, #14
 8003bd6:	f300 814c 	bgt.w	8003e72 <_dtoa_r+0x6ea>
 8003bda:	4b6a      	ldr	r3, [pc, #424]	; (8003d84 <_dtoa_r+0x5fc>)
 8003bdc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003be0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f280 80da 	bge.w	8003da0 <_dtoa_r+0x618>
 8003bec:	9b03      	ldr	r3, [sp, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f300 80d6 	bgt.w	8003da0 <_dtoa_r+0x618>
 8003bf4:	f040 8273 	bne.w	80040de <_dtoa_r+0x956>
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4b67      	ldr	r3, [pc, #412]	; (8003d98 <_dtoa_r+0x610>)
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	4649      	mov	r1, r9
 8003c00:	f7fc fd06 	bl	8000610 <__aeabi_dmul>
 8003c04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c08:	f7fc ff88 	bl	8000b1c <__aeabi_dcmpge>
 8003c0c:	9e03      	ldr	r6, [sp, #12]
 8003c0e:	4637      	mov	r7, r6
 8003c10:	2800      	cmp	r0, #0
 8003c12:	f040 824a 	bne.w	80040aa <_dtoa_r+0x922>
 8003c16:	9b02      	ldr	r3, [sp, #8]
 8003c18:	9a02      	ldr	r2, [sp, #8]
 8003c1a:	1c5d      	adds	r5, r3, #1
 8003c1c:	2331      	movs	r3, #49	; 0x31
 8003c1e:	7013      	strb	r3, [r2, #0]
 8003c20:	f10b 0b01 	add.w	fp, fp, #1
 8003c24:	e245      	b.n	80040b2 <_dtoa_r+0x92a>
 8003c26:	07f2      	lsls	r2, r6, #31
 8003c28:	d505      	bpl.n	8003c36 <_dtoa_r+0x4ae>
 8003c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c2e:	f7fc fcef 	bl	8000610 <__aeabi_dmul>
 8003c32:	3501      	adds	r5, #1
 8003c34:	2301      	movs	r3, #1
 8003c36:	1076      	asrs	r6, r6, #1
 8003c38:	3708      	adds	r7, #8
 8003c3a:	e775      	b.n	8003b28 <_dtoa_r+0x3a0>
 8003c3c:	2502      	movs	r5, #2
 8003c3e:	e777      	b.n	8003b30 <_dtoa_r+0x3a8>
 8003c40:	465f      	mov	r7, fp
 8003c42:	9e03      	ldr	r6, [sp, #12]
 8003c44:	e794      	b.n	8003b70 <_dtoa_r+0x3e8>
 8003c46:	9a02      	ldr	r2, [sp, #8]
 8003c48:	4b4e      	ldr	r3, [pc, #312]	; (8003d84 <_dtoa_r+0x5fc>)
 8003c4a:	4432      	add	r2, r6
 8003c4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8003c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c50:	1e71      	subs	r1, r6, #1
 8003c52:	2a00      	cmp	r2, #0
 8003c54:	d048      	beq.n	8003ce8 <_dtoa_r+0x560>
 8003c56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5e:	2000      	movs	r0, #0
 8003c60:	494e      	ldr	r1, [pc, #312]	; (8003d9c <_dtoa_r+0x614>)
 8003c62:	f7fc fdff 	bl	8000864 <__aeabi_ddiv>
 8003c66:	4642      	mov	r2, r8
 8003c68:	464b      	mov	r3, r9
 8003c6a:	f7fc fb1d 	bl	80002a8 <__aeabi_dsub>
 8003c6e:	9d02      	ldr	r5, [sp, #8]
 8003c70:	4680      	mov	r8, r0
 8003c72:	4689      	mov	r9, r1
 8003c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c78:	f7fc ff7a 	bl	8000b70 <__aeabi_d2iz>
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	f7fc fc61 	bl	8000544 <__aeabi_i2d>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c8a:	f7fc fb0d 	bl	80002a8 <__aeabi_dsub>
 8003c8e:	3630      	adds	r6, #48	; 0x30
 8003c90:	f805 6b01 	strb.w	r6, [r5], #1
 8003c94:	4642      	mov	r2, r8
 8003c96:	464b      	mov	r3, r9
 8003c98:	e9cd 0100 	strd	r0, r1, [sp]
 8003c9c:	f7fc ff2a 	bl	8000af4 <__aeabi_dcmplt>
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d165      	bne.n	8003d70 <_dtoa_r+0x5e8>
 8003ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4938      	ldr	r1, [pc, #224]	; (8003d8c <_dtoa_r+0x604>)
 8003cac:	f7fc fafc 	bl	80002a8 <__aeabi_dsub>
 8003cb0:	4642      	mov	r2, r8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	f7fc ff1e 	bl	8000af4 <__aeabi_dcmplt>
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	f040 80ba 	bne.w	8003e32 <_dtoa_r+0x6aa>
 8003cbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003cc0:	429d      	cmp	r5, r3
 8003cc2:	f43f af7e 	beq.w	8003bc2 <_dtoa_r+0x43a>
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <_dtoa_r+0x608>)
 8003cca:	4640      	mov	r0, r8
 8003ccc:	4649      	mov	r1, r9
 8003cce:	f7fc fc9f 	bl	8000610 <__aeabi_dmul>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4689      	mov	r9, r1
 8003cd8:	4b2d      	ldr	r3, [pc, #180]	; (8003d90 <_dtoa_r+0x608>)
 8003cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cde:	f7fc fc97 	bl	8000610 <__aeabi_dmul>
 8003ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8003ce6:	e7c5      	b.n	8003c74 <_dtoa_r+0x4ec>
 8003ce8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003cec:	4642      	mov	r2, r8
 8003cee:	464b      	mov	r3, r9
 8003cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003cf4:	f7fc fc8c 	bl	8000610 <__aeabi_dmul>
 8003cf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003cfc:	9d02      	ldr	r5, [sp, #8]
 8003cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d02:	f7fc ff35 	bl	8000b70 <__aeabi_d2iz>
 8003d06:	4606      	mov	r6, r0
 8003d08:	f7fc fc1c 	bl	8000544 <__aeabi_i2d>
 8003d0c:	3630      	adds	r6, #48	; 0x30
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d16:	f7fc fac7 	bl	80002a8 <__aeabi_dsub>
 8003d1a:	f805 6b01 	strb.w	r6, [r5], #1
 8003d1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003d20:	42ab      	cmp	r3, r5
 8003d22:	4680      	mov	r8, r0
 8003d24:	4689      	mov	r9, r1
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	d125      	bne.n	8003d78 <_dtoa_r+0x5f0>
 8003d2c:	4b1b      	ldr	r3, [pc, #108]	; (8003d9c <_dtoa_r+0x614>)
 8003d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003d32:	f7fc fabb 	bl	80002ac <__adddf3>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4640      	mov	r0, r8
 8003d3c:	4649      	mov	r1, r9
 8003d3e:	f7fc fef7 	bl	8000b30 <__aeabi_dcmpgt>
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d175      	bne.n	8003e32 <_dtoa_r+0x6aa>
 8003d46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003d4a:	2000      	movs	r0, #0
 8003d4c:	4913      	ldr	r1, [pc, #76]	; (8003d9c <_dtoa_r+0x614>)
 8003d4e:	f7fc faab 	bl	80002a8 <__aeabi_dsub>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4640      	mov	r0, r8
 8003d58:	4649      	mov	r1, r9
 8003d5a:	f7fc fecb 	bl	8000af4 <__aeabi_dcmplt>
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	f43f af2f 	beq.w	8003bc2 <_dtoa_r+0x43a>
 8003d64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003d68:	2b30      	cmp	r3, #48	; 0x30
 8003d6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8003d6e:	d001      	beq.n	8003d74 <_dtoa_r+0x5ec>
 8003d70:	46bb      	mov	fp, r7
 8003d72:	e04d      	b.n	8003e10 <_dtoa_r+0x688>
 8003d74:	4615      	mov	r5, r2
 8003d76:	e7f5      	b.n	8003d64 <_dtoa_r+0x5dc>
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <_dtoa_r+0x608>)
 8003d7a:	f7fc fc49 	bl	8000610 <__aeabi_dmul>
 8003d7e:	e9cd 0100 	strd	r0, r1, [sp]
 8003d82:	e7bc      	b.n	8003cfe <_dtoa_r+0x576>
 8003d84:	08005768 	.word	0x08005768
 8003d88:	08005740 	.word	0x08005740
 8003d8c:	3ff00000 	.word	0x3ff00000
 8003d90:	40240000 	.word	0x40240000
 8003d94:	401c0000 	.word	0x401c0000
 8003d98:	40140000 	.word	0x40140000
 8003d9c:	3fe00000 	.word	0x3fe00000
 8003da0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003da4:	9d02      	ldr	r5, [sp, #8]
 8003da6:	4642      	mov	r2, r8
 8003da8:	464b      	mov	r3, r9
 8003daa:	4630      	mov	r0, r6
 8003dac:	4639      	mov	r1, r7
 8003dae:	f7fc fd59 	bl	8000864 <__aeabi_ddiv>
 8003db2:	f7fc fedd 	bl	8000b70 <__aeabi_d2iz>
 8003db6:	9000      	str	r0, [sp, #0]
 8003db8:	f7fc fbc4 	bl	8000544 <__aeabi_i2d>
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	f7fc fc26 	bl	8000610 <__aeabi_dmul>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4630      	mov	r0, r6
 8003dca:	4639      	mov	r1, r7
 8003dcc:	f7fc fa6c 	bl	80002a8 <__aeabi_dsub>
 8003dd0:	9e00      	ldr	r6, [sp, #0]
 8003dd2:	9f03      	ldr	r7, [sp, #12]
 8003dd4:	3630      	adds	r6, #48	; 0x30
 8003dd6:	f805 6b01 	strb.w	r6, [r5], #1
 8003dda:	9e02      	ldr	r6, [sp, #8]
 8003ddc:	1bae      	subs	r6, r5, r6
 8003dde:	42b7      	cmp	r7, r6
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	d138      	bne.n	8003e58 <_dtoa_r+0x6d0>
 8003de6:	f7fc fa61 	bl	80002ac <__adddf3>
 8003dea:	4606      	mov	r6, r0
 8003dec:	460f      	mov	r7, r1
 8003dee:	4602      	mov	r2, r0
 8003df0:	460b      	mov	r3, r1
 8003df2:	4640      	mov	r0, r8
 8003df4:	4649      	mov	r1, r9
 8003df6:	f7fc fe7d 	bl	8000af4 <__aeabi_dcmplt>
 8003dfa:	b9c8      	cbnz	r0, 8003e30 <_dtoa_r+0x6a8>
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	463b      	mov	r3, r7
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	f7fc fe6c 	bl	8000ae0 <__aeabi_dcmpeq>
 8003e08:	b110      	cbz	r0, 8003e10 <_dtoa_r+0x688>
 8003e0a:	9b00      	ldr	r3, [sp, #0]
 8003e0c:	07db      	lsls	r3, r3, #31
 8003e0e:	d40f      	bmi.n	8003e30 <_dtoa_r+0x6a8>
 8003e10:	4651      	mov	r1, sl
 8003e12:	4620      	mov	r0, r4
 8003e14:	f000 fcf6 	bl	8004804 <_Bfree>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003e1c:	702b      	strb	r3, [r5, #0]
 8003e1e:	f10b 0301 	add.w	r3, fp, #1
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f43f acf8 	beq.w	800381c <_dtoa_r+0x94>
 8003e2c:	601d      	str	r5, [r3, #0]
 8003e2e:	e4f5      	b.n	800381c <_dtoa_r+0x94>
 8003e30:	465f      	mov	r7, fp
 8003e32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003e36:	2a39      	cmp	r2, #57	; 0x39
 8003e38:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8003e3c:	d106      	bne.n	8003e4c <_dtoa_r+0x6c4>
 8003e3e:	9a02      	ldr	r2, [sp, #8]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d107      	bne.n	8003e54 <_dtoa_r+0x6cc>
 8003e44:	2330      	movs	r3, #48	; 0x30
 8003e46:	7013      	strb	r3, [r2, #0]
 8003e48:	3701      	adds	r7, #1
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	781a      	ldrb	r2, [r3, #0]
 8003e4e:	3201      	adds	r2, #1
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	e78d      	b.n	8003d70 <_dtoa_r+0x5e8>
 8003e54:	461d      	mov	r5, r3
 8003e56:	e7ec      	b.n	8003e32 <_dtoa_r+0x6aa>
 8003e58:	2200      	movs	r2, #0
 8003e5a:	4ba4      	ldr	r3, [pc, #656]	; (80040ec <_dtoa_r+0x964>)
 8003e5c:	f7fc fbd8 	bl	8000610 <__aeabi_dmul>
 8003e60:	2200      	movs	r2, #0
 8003e62:	2300      	movs	r3, #0
 8003e64:	4606      	mov	r6, r0
 8003e66:	460f      	mov	r7, r1
 8003e68:	f7fc fe3a 	bl	8000ae0 <__aeabi_dcmpeq>
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d09a      	beq.n	8003da6 <_dtoa_r+0x61e>
 8003e70:	e7ce      	b.n	8003e10 <_dtoa_r+0x688>
 8003e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e74:	2a00      	cmp	r2, #0
 8003e76:	f000 80cd 	beq.w	8004014 <_dtoa_r+0x88c>
 8003e7a:	9a07      	ldr	r2, [sp, #28]
 8003e7c:	2a01      	cmp	r2, #1
 8003e7e:	f300 80af 	bgt.w	8003fe0 <_dtoa_r+0x858>
 8003e82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	f000 80a7 	beq.w	8003fd8 <_dtoa_r+0x850>
 8003e8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003e8e:	9e08      	ldr	r6, [sp, #32]
 8003e90:	9d05      	ldr	r5, [sp, #20]
 8003e92:	9a05      	ldr	r2, [sp, #20]
 8003e94:	441a      	add	r2, r3
 8003e96:	9205      	str	r2, [sp, #20]
 8003e98:	9a06      	ldr	r2, [sp, #24]
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	441a      	add	r2, r3
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	9206      	str	r2, [sp, #24]
 8003ea2:	f000 fd4f 	bl	8004944 <__i2b>
 8003ea6:	4607      	mov	r7, r0
 8003ea8:	2d00      	cmp	r5, #0
 8003eaa:	dd0c      	ble.n	8003ec6 <_dtoa_r+0x73e>
 8003eac:	9b06      	ldr	r3, [sp, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	dd09      	ble.n	8003ec6 <_dtoa_r+0x73e>
 8003eb2:	42ab      	cmp	r3, r5
 8003eb4:	9a05      	ldr	r2, [sp, #20]
 8003eb6:	bfa8      	it	ge
 8003eb8:	462b      	movge	r3, r5
 8003eba:	1ad2      	subs	r2, r2, r3
 8003ebc:	9205      	str	r2, [sp, #20]
 8003ebe:	9a06      	ldr	r2, [sp, #24]
 8003ec0:	1aed      	subs	r5, r5, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	9306      	str	r3, [sp, #24]
 8003ec6:	9b08      	ldr	r3, [sp, #32]
 8003ec8:	b1f3      	cbz	r3, 8003f08 <_dtoa_r+0x780>
 8003eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80a5 	beq.w	800401c <_dtoa_r+0x894>
 8003ed2:	2e00      	cmp	r6, #0
 8003ed4:	dd10      	ble.n	8003ef8 <_dtoa_r+0x770>
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	4632      	mov	r2, r6
 8003eda:	4620      	mov	r0, r4
 8003edc:	f000 fdc8 	bl	8004a70 <__pow5mult>
 8003ee0:	4652      	mov	r2, sl
 8003ee2:	4601      	mov	r1, r0
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f000 fd35 	bl	8004956 <__multiply>
 8003eec:	4651      	mov	r1, sl
 8003eee:	4680      	mov	r8, r0
 8003ef0:	4620      	mov	r0, r4
 8003ef2:	f000 fc87 	bl	8004804 <_Bfree>
 8003ef6:	46c2      	mov	sl, r8
 8003ef8:	9b08      	ldr	r3, [sp, #32]
 8003efa:	1b9a      	subs	r2, r3, r6
 8003efc:	d004      	beq.n	8003f08 <_dtoa_r+0x780>
 8003efe:	4651      	mov	r1, sl
 8003f00:	4620      	mov	r0, r4
 8003f02:	f000 fdb5 	bl	8004a70 <__pow5mult>
 8003f06:	4682      	mov	sl, r0
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f000 fd1a 	bl	8004944 <__i2b>
 8003f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	4606      	mov	r6, r0
 8003f16:	f340 8083 	ble.w	8004020 <_dtoa_r+0x898>
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4601      	mov	r1, r0
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f000 fda6 	bl	8004a70 <__pow5mult>
 8003f24:	9b07      	ldr	r3, [sp, #28]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	4606      	mov	r6, r0
 8003f2a:	dd7c      	ble.n	8004026 <_dtoa_r+0x89e>
 8003f2c:	f04f 0800 	mov.w	r8, #0
 8003f30:	6933      	ldr	r3, [r6, #16]
 8003f32:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003f36:	6918      	ldr	r0, [r3, #16]
 8003f38:	f000 fcb6 	bl	80048a8 <__hi0bits>
 8003f3c:	f1c0 0020 	rsb	r0, r0, #32
 8003f40:	9b06      	ldr	r3, [sp, #24]
 8003f42:	4418      	add	r0, r3
 8003f44:	f010 001f 	ands.w	r0, r0, #31
 8003f48:	f000 8096 	beq.w	8004078 <_dtoa_r+0x8f0>
 8003f4c:	f1c0 0320 	rsb	r3, r0, #32
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	f340 8087 	ble.w	8004064 <_dtoa_r+0x8dc>
 8003f56:	9b05      	ldr	r3, [sp, #20]
 8003f58:	f1c0 001c 	rsb	r0, r0, #28
 8003f5c:	4403      	add	r3, r0
 8003f5e:	9305      	str	r3, [sp, #20]
 8003f60:	9b06      	ldr	r3, [sp, #24]
 8003f62:	4405      	add	r5, r0
 8003f64:	4403      	add	r3, r0
 8003f66:	9306      	str	r3, [sp, #24]
 8003f68:	9b05      	ldr	r3, [sp, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	dd05      	ble.n	8003f7a <_dtoa_r+0x7f2>
 8003f6e:	4651      	mov	r1, sl
 8003f70:	461a      	mov	r2, r3
 8003f72:	4620      	mov	r0, r4
 8003f74:	f000 fdca 	bl	8004b0c <__lshift>
 8003f78:	4682      	mov	sl, r0
 8003f7a:	9b06      	ldr	r3, [sp, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	dd05      	ble.n	8003f8c <_dtoa_r+0x804>
 8003f80:	4631      	mov	r1, r6
 8003f82:	461a      	mov	r2, r3
 8003f84:	4620      	mov	r0, r4
 8003f86:	f000 fdc1 	bl	8004b0c <__lshift>
 8003f8a:	4606      	mov	r6, r0
 8003f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d074      	beq.n	800407c <_dtoa_r+0x8f4>
 8003f92:	4631      	mov	r1, r6
 8003f94:	4650      	mov	r0, sl
 8003f96:	f000 fe0a 	bl	8004bae <__mcmp>
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	da6e      	bge.n	800407c <_dtoa_r+0x8f4>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	4651      	mov	r1, sl
 8003fa2:	220a      	movs	r2, #10
 8003fa4:	4620      	mov	r0, r4
 8003fa6:	f000 fc44 	bl	8004832 <__multadd>
 8003faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003fb0:	4682      	mov	sl, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 81a8 	beq.w	8004308 <_dtoa_r+0xb80>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4639      	mov	r1, r7
 8003fbc:	220a      	movs	r2, #10
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f000 fc37 	bl	8004832 <__multadd>
 8003fc4:	9b04      	ldr	r3, [sp, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	4607      	mov	r7, r0
 8003fca:	f300 80c8 	bgt.w	800415e <_dtoa_r+0x9d6>
 8003fce:	9b07      	ldr	r3, [sp, #28]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	f340 80c4 	ble.w	800415e <_dtoa_r+0x9d6>
 8003fd6:	e059      	b.n	800408c <_dtoa_r+0x904>
 8003fd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003fda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003fde:	e756      	b.n	8003e8e <_dtoa_r+0x706>
 8003fe0:	9b03      	ldr	r3, [sp, #12]
 8003fe2:	1e5e      	subs	r6, r3, #1
 8003fe4:	9b08      	ldr	r3, [sp, #32]
 8003fe6:	42b3      	cmp	r3, r6
 8003fe8:	bfbf      	itttt	lt
 8003fea:	9b08      	ldrlt	r3, [sp, #32]
 8003fec:	9608      	strlt	r6, [sp, #32]
 8003fee:	1af2      	sublt	r2, r6, r3
 8003ff0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003ff2:	bfb6      	itet	lt
 8003ff4:	189b      	addlt	r3, r3, r2
 8003ff6:	1b9e      	subge	r6, r3, r6
 8003ff8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003ffa:	9b03      	ldr	r3, [sp, #12]
 8003ffc:	bfb8      	it	lt
 8003ffe:	2600      	movlt	r6, #0
 8004000:	2b00      	cmp	r3, #0
 8004002:	bfb9      	ittee	lt
 8004004:	9b05      	ldrlt	r3, [sp, #20]
 8004006:	9a03      	ldrlt	r2, [sp, #12]
 8004008:	9d05      	ldrge	r5, [sp, #20]
 800400a:	9b03      	ldrge	r3, [sp, #12]
 800400c:	bfbc      	itt	lt
 800400e:	1a9d      	sublt	r5, r3, r2
 8004010:	2300      	movlt	r3, #0
 8004012:	e73e      	b.n	8003e92 <_dtoa_r+0x70a>
 8004014:	9e08      	ldr	r6, [sp, #32]
 8004016:	9d05      	ldr	r5, [sp, #20]
 8004018:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800401a:	e745      	b.n	8003ea8 <_dtoa_r+0x720>
 800401c:	9a08      	ldr	r2, [sp, #32]
 800401e:	e76e      	b.n	8003efe <_dtoa_r+0x776>
 8004020:	9b07      	ldr	r3, [sp, #28]
 8004022:	2b01      	cmp	r3, #1
 8004024:	dc19      	bgt.n	800405a <_dtoa_r+0x8d2>
 8004026:	9b00      	ldr	r3, [sp, #0]
 8004028:	b9bb      	cbnz	r3, 800405a <_dtoa_r+0x8d2>
 800402a:	9b01      	ldr	r3, [sp, #4]
 800402c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004030:	b99b      	cbnz	r3, 800405a <_dtoa_r+0x8d2>
 8004032:	9b01      	ldr	r3, [sp, #4]
 8004034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004038:	0d1b      	lsrs	r3, r3, #20
 800403a:	051b      	lsls	r3, r3, #20
 800403c:	b183      	cbz	r3, 8004060 <_dtoa_r+0x8d8>
 800403e:	9b05      	ldr	r3, [sp, #20]
 8004040:	3301      	adds	r3, #1
 8004042:	9305      	str	r3, [sp, #20]
 8004044:	9b06      	ldr	r3, [sp, #24]
 8004046:	3301      	adds	r3, #1
 8004048:	9306      	str	r3, [sp, #24]
 800404a:	f04f 0801 	mov.w	r8, #1
 800404e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004050:	2b00      	cmp	r3, #0
 8004052:	f47f af6d 	bne.w	8003f30 <_dtoa_r+0x7a8>
 8004056:	2001      	movs	r0, #1
 8004058:	e772      	b.n	8003f40 <_dtoa_r+0x7b8>
 800405a:	f04f 0800 	mov.w	r8, #0
 800405e:	e7f6      	b.n	800404e <_dtoa_r+0x8c6>
 8004060:	4698      	mov	r8, r3
 8004062:	e7f4      	b.n	800404e <_dtoa_r+0x8c6>
 8004064:	d080      	beq.n	8003f68 <_dtoa_r+0x7e0>
 8004066:	9a05      	ldr	r2, [sp, #20]
 8004068:	331c      	adds	r3, #28
 800406a:	441a      	add	r2, r3
 800406c:	9205      	str	r2, [sp, #20]
 800406e:	9a06      	ldr	r2, [sp, #24]
 8004070:	441a      	add	r2, r3
 8004072:	441d      	add	r5, r3
 8004074:	4613      	mov	r3, r2
 8004076:	e776      	b.n	8003f66 <_dtoa_r+0x7de>
 8004078:	4603      	mov	r3, r0
 800407a:	e7f4      	b.n	8004066 <_dtoa_r+0x8de>
 800407c:	9b03      	ldr	r3, [sp, #12]
 800407e:	2b00      	cmp	r3, #0
 8004080:	dc36      	bgt.n	80040f0 <_dtoa_r+0x968>
 8004082:	9b07      	ldr	r3, [sp, #28]
 8004084:	2b02      	cmp	r3, #2
 8004086:	dd33      	ble.n	80040f0 <_dtoa_r+0x968>
 8004088:	9b03      	ldr	r3, [sp, #12]
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	9b04      	ldr	r3, [sp, #16]
 800408e:	b963      	cbnz	r3, 80040aa <_dtoa_r+0x922>
 8004090:	4631      	mov	r1, r6
 8004092:	2205      	movs	r2, #5
 8004094:	4620      	mov	r0, r4
 8004096:	f000 fbcc 	bl	8004832 <__multadd>
 800409a:	4601      	mov	r1, r0
 800409c:	4606      	mov	r6, r0
 800409e:	4650      	mov	r0, sl
 80040a0:	f000 fd85 	bl	8004bae <__mcmp>
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f73f adb6 	bgt.w	8003c16 <_dtoa_r+0x48e>
 80040aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040ac:	9d02      	ldr	r5, [sp, #8]
 80040ae:	ea6f 0b03 	mvn.w	fp, r3
 80040b2:	2300      	movs	r3, #0
 80040b4:	9303      	str	r3, [sp, #12]
 80040b6:	4631      	mov	r1, r6
 80040b8:	4620      	mov	r0, r4
 80040ba:	f000 fba3 	bl	8004804 <_Bfree>
 80040be:	2f00      	cmp	r7, #0
 80040c0:	f43f aea6 	beq.w	8003e10 <_dtoa_r+0x688>
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	b12b      	cbz	r3, 80040d4 <_dtoa_r+0x94c>
 80040c8:	42bb      	cmp	r3, r7
 80040ca:	d003      	beq.n	80040d4 <_dtoa_r+0x94c>
 80040cc:	4619      	mov	r1, r3
 80040ce:	4620      	mov	r0, r4
 80040d0:	f000 fb98 	bl	8004804 <_Bfree>
 80040d4:	4639      	mov	r1, r7
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 fb94 	bl	8004804 <_Bfree>
 80040dc:	e698      	b.n	8003e10 <_dtoa_r+0x688>
 80040de:	2600      	movs	r6, #0
 80040e0:	4637      	mov	r7, r6
 80040e2:	e7e2      	b.n	80040aa <_dtoa_r+0x922>
 80040e4:	46bb      	mov	fp, r7
 80040e6:	4637      	mov	r7, r6
 80040e8:	e595      	b.n	8003c16 <_dtoa_r+0x48e>
 80040ea:	bf00      	nop
 80040ec:	40240000 	.word	0x40240000
 80040f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f2:	bb93      	cbnz	r3, 800415a <_dtoa_r+0x9d2>
 80040f4:	9b03      	ldr	r3, [sp, #12]
 80040f6:	9304      	str	r3, [sp, #16]
 80040f8:	9d02      	ldr	r5, [sp, #8]
 80040fa:	4631      	mov	r1, r6
 80040fc:	4650      	mov	r0, sl
 80040fe:	f7ff fab7 	bl	8003670 <quorem>
 8004102:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004106:	f805 9b01 	strb.w	r9, [r5], #1
 800410a:	9b02      	ldr	r3, [sp, #8]
 800410c:	9a04      	ldr	r2, [sp, #16]
 800410e:	1aeb      	subs	r3, r5, r3
 8004110:	429a      	cmp	r2, r3
 8004112:	f300 80dc 	bgt.w	80042ce <_dtoa_r+0xb46>
 8004116:	9b02      	ldr	r3, [sp, #8]
 8004118:	2a01      	cmp	r2, #1
 800411a:	bfac      	ite	ge
 800411c:	189b      	addge	r3, r3, r2
 800411e:	3301      	addlt	r3, #1
 8004120:	4698      	mov	r8, r3
 8004122:	2300      	movs	r3, #0
 8004124:	9303      	str	r3, [sp, #12]
 8004126:	4651      	mov	r1, sl
 8004128:	2201      	movs	r2, #1
 800412a:	4620      	mov	r0, r4
 800412c:	f000 fcee 	bl	8004b0c <__lshift>
 8004130:	4631      	mov	r1, r6
 8004132:	4682      	mov	sl, r0
 8004134:	f000 fd3b 	bl	8004bae <__mcmp>
 8004138:	2800      	cmp	r0, #0
 800413a:	f300 808d 	bgt.w	8004258 <_dtoa_r+0xad0>
 800413e:	d103      	bne.n	8004148 <_dtoa_r+0x9c0>
 8004140:	f019 0f01 	tst.w	r9, #1
 8004144:	f040 8088 	bne.w	8004258 <_dtoa_r+0xad0>
 8004148:	4645      	mov	r5, r8
 800414a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800414e:	2b30      	cmp	r3, #48	; 0x30
 8004150:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004154:	d1af      	bne.n	80040b6 <_dtoa_r+0x92e>
 8004156:	4615      	mov	r5, r2
 8004158:	e7f7      	b.n	800414a <_dtoa_r+0x9c2>
 800415a:	9b03      	ldr	r3, [sp, #12]
 800415c:	9304      	str	r3, [sp, #16]
 800415e:	2d00      	cmp	r5, #0
 8004160:	dd05      	ble.n	800416e <_dtoa_r+0x9e6>
 8004162:	4639      	mov	r1, r7
 8004164:	462a      	mov	r2, r5
 8004166:	4620      	mov	r0, r4
 8004168:	f000 fcd0 	bl	8004b0c <__lshift>
 800416c:	4607      	mov	r7, r0
 800416e:	f1b8 0f00 	cmp.w	r8, #0
 8004172:	d04c      	beq.n	800420e <_dtoa_r+0xa86>
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4620      	mov	r0, r4
 8004178:	f000 fb10 	bl	800479c <_Balloc>
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	3202      	adds	r2, #2
 8004180:	4605      	mov	r5, r0
 8004182:	0092      	lsls	r2, r2, #2
 8004184:	f107 010c 	add.w	r1, r7, #12
 8004188:	300c      	adds	r0, #12
 800418a:	f000 faef 	bl	800476c <memcpy>
 800418e:	2201      	movs	r2, #1
 8004190:	4629      	mov	r1, r5
 8004192:	4620      	mov	r0, r4
 8004194:	f000 fcba 	bl	8004b0c <__lshift>
 8004198:	9b00      	ldr	r3, [sp, #0]
 800419a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800419e:	9703      	str	r7, [sp, #12]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	4607      	mov	r7, r0
 80041a6:	9305      	str	r3, [sp, #20]
 80041a8:	4631      	mov	r1, r6
 80041aa:	4650      	mov	r0, sl
 80041ac:	f7ff fa60 	bl	8003670 <quorem>
 80041b0:	9903      	ldr	r1, [sp, #12]
 80041b2:	4605      	mov	r5, r0
 80041b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80041b8:	4650      	mov	r0, sl
 80041ba:	f000 fcf8 	bl	8004bae <__mcmp>
 80041be:	463a      	mov	r2, r7
 80041c0:	9000      	str	r0, [sp, #0]
 80041c2:	4631      	mov	r1, r6
 80041c4:	4620      	mov	r0, r4
 80041c6:	f000 fd0c 	bl	8004be2 <__mdiff>
 80041ca:	68c3      	ldr	r3, [r0, #12]
 80041cc:	4602      	mov	r2, r0
 80041ce:	bb03      	cbnz	r3, 8004212 <_dtoa_r+0xa8a>
 80041d0:	4601      	mov	r1, r0
 80041d2:	9006      	str	r0, [sp, #24]
 80041d4:	4650      	mov	r0, sl
 80041d6:	f000 fcea 	bl	8004bae <__mcmp>
 80041da:	9a06      	ldr	r2, [sp, #24]
 80041dc:	4603      	mov	r3, r0
 80041de:	4611      	mov	r1, r2
 80041e0:	4620      	mov	r0, r4
 80041e2:	9306      	str	r3, [sp, #24]
 80041e4:	f000 fb0e 	bl	8004804 <_Bfree>
 80041e8:	9b06      	ldr	r3, [sp, #24]
 80041ea:	b9a3      	cbnz	r3, 8004216 <_dtoa_r+0xa8e>
 80041ec:	9a07      	ldr	r2, [sp, #28]
 80041ee:	b992      	cbnz	r2, 8004216 <_dtoa_r+0xa8e>
 80041f0:	9a05      	ldr	r2, [sp, #20]
 80041f2:	b982      	cbnz	r2, 8004216 <_dtoa_r+0xa8e>
 80041f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80041f8:	d029      	beq.n	800424e <_dtoa_r+0xac6>
 80041fa:	9b00      	ldr	r3, [sp, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	dd01      	ble.n	8004204 <_dtoa_r+0xa7c>
 8004200:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8004204:	f108 0501 	add.w	r5, r8, #1
 8004208:	f888 9000 	strb.w	r9, [r8]
 800420c:	e753      	b.n	80040b6 <_dtoa_r+0x92e>
 800420e:	4638      	mov	r0, r7
 8004210:	e7c2      	b.n	8004198 <_dtoa_r+0xa10>
 8004212:	2301      	movs	r3, #1
 8004214:	e7e3      	b.n	80041de <_dtoa_r+0xa56>
 8004216:	9a00      	ldr	r2, [sp, #0]
 8004218:	2a00      	cmp	r2, #0
 800421a:	db04      	blt.n	8004226 <_dtoa_r+0xa9e>
 800421c:	d125      	bne.n	800426a <_dtoa_r+0xae2>
 800421e:	9a07      	ldr	r2, [sp, #28]
 8004220:	bb1a      	cbnz	r2, 800426a <_dtoa_r+0xae2>
 8004222:	9a05      	ldr	r2, [sp, #20]
 8004224:	bb0a      	cbnz	r2, 800426a <_dtoa_r+0xae2>
 8004226:	2b00      	cmp	r3, #0
 8004228:	ddec      	ble.n	8004204 <_dtoa_r+0xa7c>
 800422a:	4651      	mov	r1, sl
 800422c:	2201      	movs	r2, #1
 800422e:	4620      	mov	r0, r4
 8004230:	f000 fc6c 	bl	8004b0c <__lshift>
 8004234:	4631      	mov	r1, r6
 8004236:	4682      	mov	sl, r0
 8004238:	f000 fcb9 	bl	8004bae <__mcmp>
 800423c:	2800      	cmp	r0, #0
 800423e:	dc03      	bgt.n	8004248 <_dtoa_r+0xac0>
 8004240:	d1e0      	bne.n	8004204 <_dtoa_r+0xa7c>
 8004242:	f019 0f01 	tst.w	r9, #1
 8004246:	d0dd      	beq.n	8004204 <_dtoa_r+0xa7c>
 8004248:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800424c:	d1d8      	bne.n	8004200 <_dtoa_r+0xa78>
 800424e:	2339      	movs	r3, #57	; 0x39
 8004250:	f888 3000 	strb.w	r3, [r8]
 8004254:	f108 0801 	add.w	r8, r8, #1
 8004258:	4645      	mov	r5, r8
 800425a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800425e:	2b39      	cmp	r3, #57	; 0x39
 8004260:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8004264:	d03b      	beq.n	80042de <_dtoa_r+0xb56>
 8004266:	3301      	adds	r3, #1
 8004268:	e040      	b.n	80042ec <_dtoa_r+0xb64>
 800426a:	2b00      	cmp	r3, #0
 800426c:	f108 0501 	add.w	r5, r8, #1
 8004270:	dd05      	ble.n	800427e <_dtoa_r+0xaf6>
 8004272:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004276:	d0ea      	beq.n	800424e <_dtoa_r+0xac6>
 8004278:	f109 0901 	add.w	r9, r9, #1
 800427c:	e7c4      	b.n	8004208 <_dtoa_r+0xa80>
 800427e:	9b02      	ldr	r3, [sp, #8]
 8004280:	9a04      	ldr	r2, [sp, #16]
 8004282:	f805 9c01 	strb.w	r9, [r5, #-1]
 8004286:	1aeb      	subs	r3, r5, r3
 8004288:	4293      	cmp	r3, r2
 800428a:	46a8      	mov	r8, r5
 800428c:	f43f af4b 	beq.w	8004126 <_dtoa_r+0x99e>
 8004290:	4651      	mov	r1, sl
 8004292:	2300      	movs	r3, #0
 8004294:	220a      	movs	r2, #10
 8004296:	4620      	mov	r0, r4
 8004298:	f000 facb 	bl	8004832 <__multadd>
 800429c:	9b03      	ldr	r3, [sp, #12]
 800429e:	9903      	ldr	r1, [sp, #12]
 80042a0:	42bb      	cmp	r3, r7
 80042a2:	4682      	mov	sl, r0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	f04f 020a 	mov.w	r2, #10
 80042ac:	4620      	mov	r0, r4
 80042ae:	d104      	bne.n	80042ba <_dtoa_r+0xb32>
 80042b0:	f000 fabf 	bl	8004832 <__multadd>
 80042b4:	9003      	str	r0, [sp, #12]
 80042b6:	4607      	mov	r7, r0
 80042b8:	e776      	b.n	80041a8 <_dtoa_r+0xa20>
 80042ba:	f000 faba 	bl	8004832 <__multadd>
 80042be:	2300      	movs	r3, #0
 80042c0:	9003      	str	r0, [sp, #12]
 80042c2:	220a      	movs	r2, #10
 80042c4:	4639      	mov	r1, r7
 80042c6:	4620      	mov	r0, r4
 80042c8:	f000 fab3 	bl	8004832 <__multadd>
 80042cc:	e7f3      	b.n	80042b6 <_dtoa_r+0xb2e>
 80042ce:	4651      	mov	r1, sl
 80042d0:	2300      	movs	r3, #0
 80042d2:	220a      	movs	r2, #10
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 faac 	bl	8004832 <__multadd>
 80042da:	4682      	mov	sl, r0
 80042dc:	e70d      	b.n	80040fa <_dtoa_r+0x972>
 80042de:	9b02      	ldr	r3, [sp, #8]
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d105      	bne.n	80042f0 <_dtoa_r+0xb68>
 80042e4:	9a02      	ldr	r2, [sp, #8]
 80042e6:	f10b 0b01 	add.w	fp, fp, #1
 80042ea:	2331      	movs	r3, #49	; 0x31
 80042ec:	7013      	strb	r3, [r2, #0]
 80042ee:	e6e2      	b.n	80040b6 <_dtoa_r+0x92e>
 80042f0:	4615      	mov	r5, r2
 80042f2:	e7b2      	b.n	800425a <_dtoa_r+0xad2>
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <_dtoa_r+0xb94>)
 80042f6:	f7ff baae 	b.w	8003856 <_dtoa_r+0xce>
 80042fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f47f aa88 	bne.w	8003812 <_dtoa_r+0x8a>
 8004302:	4b07      	ldr	r3, [pc, #28]	; (8004320 <_dtoa_r+0xb98>)
 8004304:	f7ff baa7 	b.w	8003856 <_dtoa_r+0xce>
 8004308:	9b04      	ldr	r3, [sp, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f73f aef4 	bgt.w	80040f8 <_dtoa_r+0x970>
 8004310:	9b07      	ldr	r3, [sp, #28]
 8004312:	2b02      	cmp	r3, #2
 8004314:	f77f aef0 	ble.w	80040f8 <_dtoa_r+0x970>
 8004318:	e6b8      	b.n	800408c <_dtoa_r+0x904>
 800431a:	bf00      	nop
 800431c:	0800570f 	.word	0x0800570f
 8004320:	08005731 	.word	0x08005731

08004324 <_localeconv_r>:
 8004324:	4b04      	ldr	r3, [pc, #16]	; (8004338 <_localeconv_r+0x14>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6a18      	ldr	r0, [r3, #32]
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <_localeconv_r+0x18>)
 800432c:	2800      	cmp	r0, #0
 800432e:	bf08      	it	eq
 8004330:	4618      	moveq	r0, r3
 8004332:	30f0      	adds	r0, #240	; 0xf0
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	2000008c 	.word	0x2000008c
 800433c:	20000590 	.word	0x20000590

08004340 <malloc>:
 8004340:	4b02      	ldr	r3, [pc, #8]	; (800434c <malloc+0xc>)
 8004342:	4601      	mov	r1, r0
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	f000 b803 	b.w	8004350 <_malloc_r>
 800434a:	bf00      	nop
 800434c:	2000008c 	.word	0x2000008c

08004350 <_malloc_r>:
 8004350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004354:	f101 040b 	add.w	r4, r1, #11
 8004358:	2c16      	cmp	r4, #22
 800435a:	4681      	mov	r9, r0
 800435c:	d907      	bls.n	800436e <_malloc_r+0x1e>
 800435e:	f034 0407 	bics.w	r4, r4, #7
 8004362:	d505      	bpl.n	8004370 <_malloc_r+0x20>
 8004364:	230c      	movs	r3, #12
 8004366:	f8c9 3000 	str.w	r3, [r9]
 800436a:	2600      	movs	r6, #0
 800436c:	e131      	b.n	80045d2 <_malloc_r+0x282>
 800436e:	2410      	movs	r4, #16
 8004370:	428c      	cmp	r4, r1
 8004372:	d3f7      	bcc.n	8004364 <_malloc_r+0x14>
 8004374:	4648      	mov	r0, r9
 8004376:	f000 fa05 	bl	8004784 <__malloc_lock>
 800437a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800437e:	4d9c      	ldr	r5, [pc, #624]	; (80045f0 <_malloc_r+0x2a0>)
 8004380:	d236      	bcs.n	80043f0 <_malloc_r+0xa0>
 8004382:	f104 0208 	add.w	r2, r4, #8
 8004386:	442a      	add	r2, r5
 8004388:	f1a2 0108 	sub.w	r1, r2, #8
 800438c:	6856      	ldr	r6, [r2, #4]
 800438e:	428e      	cmp	r6, r1
 8004390:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004394:	d102      	bne.n	800439c <_malloc_r+0x4c>
 8004396:	68d6      	ldr	r6, [r2, #12]
 8004398:	42b2      	cmp	r2, r6
 800439a:	d010      	beq.n	80043be <_malloc_r+0x6e>
 800439c:	6873      	ldr	r3, [r6, #4]
 800439e:	68f2      	ldr	r2, [r6, #12]
 80043a0:	68b1      	ldr	r1, [r6, #8]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60ca      	str	r2, [r1, #12]
 80043a8:	4433      	add	r3, r6
 80043aa:	6091      	str	r1, [r2, #8]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	4648      	mov	r0, r9
 80043b6:	f000 f9eb 	bl	8004790 <__malloc_unlock>
 80043ba:	3608      	adds	r6, #8
 80043bc:	e109      	b.n	80045d2 <_malloc_r+0x282>
 80043be:	3302      	adds	r3, #2
 80043c0:	4a8c      	ldr	r2, [pc, #560]	; (80045f4 <_malloc_r+0x2a4>)
 80043c2:	692e      	ldr	r6, [r5, #16]
 80043c4:	4296      	cmp	r6, r2
 80043c6:	4611      	mov	r1, r2
 80043c8:	d06d      	beq.n	80044a6 <_malloc_r+0x156>
 80043ca:	6870      	ldr	r0, [r6, #4]
 80043cc:	f020 0003 	bic.w	r0, r0, #3
 80043d0:	1b07      	subs	r7, r0, r4
 80043d2:	2f0f      	cmp	r7, #15
 80043d4:	dd47      	ble.n	8004466 <_malloc_r+0x116>
 80043d6:	1933      	adds	r3, r6, r4
 80043d8:	f044 0401 	orr.w	r4, r4, #1
 80043dc:	6074      	str	r4, [r6, #4]
 80043de:	616b      	str	r3, [r5, #20]
 80043e0:	612b      	str	r3, [r5, #16]
 80043e2:	60da      	str	r2, [r3, #12]
 80043e4:	609a      	str	r2, [r3, #8]
 80043e6:	f047 0201 	orr.w	r2, r7, #1
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	5037      	str	r7, [r6, r0]
 80043ee:	e7e1      	b.n	80043b4 <_malloc_r+0x64>
 80043f0:	0a63      	lsrs	r3, r4, #9
 80043f2:	d02a      	beq.n	800444a <_malloc_r+0xfa>
 80043f4:	2b04      	cmp	r3, #4
 80043f6:	d812      	bhi.n	800441e <_malloc_r+0xce>
 80043f8:	09a3      	lsrs	r3, r4, #6
 80043fa:	3338      	adds	r3, #56	; 0x38
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004402:	f1a2 0008 	sub.w	r0, r2, #8
 8004406:	6856      	ldr	r6, [r2, #4]
 8004408:	4286      	cmp	r6, r0
 800440a:	d006      	beq.n	800441a <_malloc_r+0xca>
 800440c:	6872      	ldr	r2, [r6, #4]
 800440e:	f022 0203 	bic.w	r2, r2, #3
 8004412:	1b11      	subs	r1, r2, r4
 8004414:	290f      	cmp	r1, #15
 8004416:	dd1c      	ble.n	8004452 <_malloc_r+0x102>
 8004418:	3b01      	subs	r3, #1
 800441a:	3301      	adds	r3, #1
 800441c:	e7d0      	b.n	80043c0 <_malloc_r+0x70>
 800441e:	2b14      	cmp	r3, #20
 8004420:	d801      	bhi.n	8004426 <_malloc_r+0xd6>
 8004422:	335b      	adds	r3, #91	; 0x5b
 8004424:	e7ea      	b.n	80043fc <_malloc_r+0xac>
 8004426:	2b54      	cmp	r3, #84	; 0x54
 8004428:	d802      	bhi.n	8004430 <_malloc_r+0xe0>
 800442a:	0b23      	lsrs	r3, r4, #12
 800442c:	336e      	adds	r3, #110	; 0x6e
 800442e:	e7e5      	b.n	80043fc <_malloc_r+0xac>
 8004430:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004434:	d802      	bhi.n	800443c <_malloc_r+0xec>
 8004436:	0be3      	lsrs	r3, r4, #15
 8004438:	3377      	adds	r3, #119	; 0x77
 800443a:	e7df      	b.n	80043fc <_malloc_r+0xac>
 800443c:	f240 5254 	movw	r2, #1364	; 0x554
 8004440:	4293      	cmp	r3, r2
 8004442:	d804      	bhi.n	800444e <_malloc_r+0xfe>
 8004444:	0ca3      	lsrs	r3, r4, #18
 8004446:	337c      	adds	r3, #124	; 0x7c
 8004448:	e7d8      	b.n	80043fc <_malloc_r+0xac>
 800444a:	233f      	movs	r3, #63	; 0x3f
 800444c:	e7d6      	b.n	80043fc <_malloc_r+0xac>
 800444e:	237e      	movs	r3, #126	; 0x7e
 8004450:	e7d4      	b.n	80043fc <_malloc_r+0xac>
 8004452:	2900      	cmp	r1, #0
 8004454:	68f1      	ldr	r1, [r6, #12]
 8004456:	db04      	blt.n	8004462 <_malloc_r+0x112>
 8004458:	68b3      	ldr	r3, [r6, #8]
 800445a:	60d9      	str	r1, [r3, #12]
 800445c:	608b      	str	r3, [r1, #8]
 800445e:	18b3      	adds	r3, r6, r2
 8004460:	e7a4      	b.n	80043ac <_malloc_r+0x5c>
 8004462:	460e      	mov	r6, r1
 8004464:	e7d0      	b.n	8004408 <_malloc_r+0xb8>
 8004466:	2f00      	cmp	r7, #0
 8004468:	616a      	str	r2, [r5, #20]
 800446a:	612a      	str	r2, [r5, #16]
 800446c:	db05      	blt.n	800447a <_malloc_r+0x12a>
 800446e:	4430      	add	r0, r6
 8004470:	6843      	ldr	r3, [r0, #4]
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6043      	str	r3, [r0, #4]
 8004478:	e79c      	b.n	80043b4 <_malloc_r+0x64>
 800447a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800447e:	d244      	bcs.n	800450a <_malloc_r+0x1ba>
 8004480:	08c0      	lsrs	r0, r0, #3
 8004482:	1087      	asrs	r7, r0, #2
 8004484:	2201      	movs	r2, #1
 8004486:	fa02 f707 	lsl.w	r7, r2, r7
 800448a:	686a      	ldr	r2, [r5, #4]
 800448c:	3001      	adds	r0, #1
 800448e:	433a      	orrs	r2, r7
 8004490:	606a      	str	r2, [r5, #4]
 8004492:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004496:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800449a:	60b7      	str	r7, [r6, #8]
 800449c:	3a08      	subs	r2, #8
 800449e:	60f2      	str	r2, [r6, #12]
 80044a0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80044a4:	60fe      	str	r6, [r7, #12]
 80044a6:	2001      	movs	r0, #1
 80044a8:	109a      	asrs	r2, r3, #2
 80044aa:	fa00 f202 	lsl.w	r2, r0, r2
 80044ae:	6868      	ldr	r0, [r5, #4]
 80044b0:	4282      	cmp	r2, r0
 80044b2:	f200 80a1 	bhi.w	80045f8 <_malloc_r+0x2a8>
 80044b6:	4202      	tst	r2, r0
 80044b8:	d106      	bne.n	80044c8 <_malloc_r+0x178>
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	0052      	lsls	r2, r2, #1
 80044c0:	4202      	tst	r2, r0
 80044c2:	f103 0304 	add.w	r3, r3, #4
 80044c6:	d0fa      	beq.n	80044be <_malloc_r+0x16e>
 80044c8:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80044cc:	46e0      	mov	r8, ip
 80044ce:	469e      	mov	lr, r3
 80044d0:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80044d4:	4546      	cmp	r6, r8
 80044d6:	d153      	bne.n	8004580 <_malloc_r+0x230>
 80044d8:	f10e 0e01 	add.w	lr, lr, #1
 80044dc:	f01e 0f03 	tst.w	lr, #3
 80044e0:	f108 0808 	add.w	r8, r8, #8
 80044e4:	d1f4      	bne.n	80044d0 <_malloc_r+0x180>
 80044e6:	0798      	lsls	r0, r3, #30
 80044e8:	d179      	bne.n	80045de <_malloc_r+0x28e>
 80044ea:	686b      	ldr	r3, [r5, #4]
 80044ec:	ea23 0302 	bic.w	r3, r3, r2
 80044f0:	606b      	str	r3, [r5, #4]
 80044f2:	6868      	ldr	r0, [r5, #4]
 80044f4:	0052      	lsls	r2, r2, #1
 80044f6:	4282      	cmp	r2, r0
 80044f8:	d87e      	bhi.n	80045f8 <_malloc_r+0x2a8>
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	d07c      	beq.n	80045f8 <_malloc_r+0x2a8>
 80044fe:	4673      	mov	r3, lr
 8004500:	4202      	tst	r2, r0
 8004502:	d1e1      	bne.n	80044c8 <_malloc_r+0x178>
 8004504:	3304      	adds	r3, #4
 8004506:	0052      	lsls	r2, r2, #1
 8004508:	e7fa      	b.n	8004500 <_malloc_r+0x1b0>
 800450a:	0a42      	lsrs	r2, r0, #9
 800450c:	2a04      	cmp	r2, #4
 800450e:	d815      	bhi.n	800453c <_malloc_r+0x1ec>
 8004510:	0982      	lsrs	r2, r0, #6
 8004512:	3238      	adds	r2, #56	; 0x38
 8004514:	1c57      	adds	r7, r2, #1
 8004516:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800451a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800451e:	45be      	cmp	lr, r7
 8004520:	d126      	bne.n	8004570 <_malloc_r+0x220>
 8004522:	2001      	movs	r0, #1
 8004524:	1092      	asrs	r2, r2, #2
 8004526:	fa00 f202 	lsl.w	r2, r0, r2
 800452a:	6868      	ldr	r0, [r5, #4]
 800452c:	4310      	orrs	r0, r2
 800452e:	6068      	str	r0, [r5, #4]
 8004530:	f8c6 e00c 	str.w	lr, [r6, #12]
 8004534:	60b7      	str	r7, [r6, #8]
 8004536:	f8ce 6008 	str.w	r6, [lr, #8]
 800453a:	e7b3      	b.n	80044a4 <_malloc_r+0x154>
 800453c:	2a14      	cmp	r2, #20
 800453e:	d801      	bhi.n	8004544 <_malloc_r+0x1f4>
 8004540:	325b      	adds	r2, #91	; 0x5b
 8004542:	e7e7      	b.n	8004514 <_malloc_r+0x1c4>
 8004544:	2a54      	cmp	r2, #84	; 0x54
 8004546:	d802      	bhi.n	800454e <_malloc_r+0x1fe>
 8004548:	0b02      	lsrs	r2, r0, #12
 800454a:	326e      	adds	r2, #110	; 0x6e
 800454c:	e7e2      	b.n	8004514 <_malloc_r+0x1c4>
 800454e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004552:	d802      	bhi.n	800455a <_malloc_r+0x20a>
 8004554:	0bc2      	lsrs	r2, r0, #15
 8004556:	3277      	adds	r2, #119	; 0x77
 8004558:	e7dc      	b.n	8004514 <_malloc_r+0x1c4>
 800455a:	f240 5754 	movw	r7, #1364	; 0x554
 800455e:	42ba      	cmp	r2, r7
 8004560:	bf9a      	itte	ls
 8004562:	0c82      	lsrls	r2, r0, #18
 8004564:	327c      	addls	r2, #124	; 0x7c
 8004566:	227e      	movhi	r2, #126	; 0x7e
 8004568:	e7d4      	b.n	8004514 <_malloc_r+0x1c4>
 800456a:	68bf      	ldr	r7, [r7, #8]
 800456c:	45be      	cmp	lr, r7
 800456e:	d004      	beq.n	800457a <_malloc_r+0x22a>
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	f022 0203 	bic.w	r2, r2, #3
 8004576:	4290      	cmp	r0, r2
 8004578:	d3f7      	bcc.n	800456a <_malloc_r+0x21a>
 800457a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800457e:	e7d7      	b.n	8004530 <_malloc_r+0x1e0>
 8004580:	6870      	ldr	r0, [r6, #4]
 8004582:	68f7      	ldr	r7, [r6, #12]
 8004584:	f020 0003 	bic.w	r0, r0, #3
 8004588:	eba0 0a04 	sub.w	sl, r0, r4
 800458c:	f1ba 0f0f 	cmp.w	sl, #15
 8004590:	dd10      	ble.n	80045b4 <_malloc_r+0x264>
 8004592:	68b2      	ldr	r2, [r6, #8]
 8004594:	1933      	adds	r3, r6, r4
 8004596:	f044 0401 	orr.w	r4, r4, #1
 800459a:	6074      	str	r4, [r6, #4]
 800459c:	60d7      	str	r7, [r2, #12]
 800459e:	60ba      	str	r2, [r7, #8]
 80045a0:	f04a 0201 	orr.w	r2, sl, #1
 80045a4:	616b      	str	r3, [r5, #20]
 80045a6:	612b      	str	r3, [r5, #16]
 80045a8:	60d9      	str	r1, [r3, #12]
 80045aa:	6099      	str	r1, [r3, #8]
 80045ac:	605a      	str	r2, [r3, #4]
 80045ae:	f846 a000 	str.w	sl, [r6, r0]
 80045b2:	e6ff      	b.n	80043b4 <_malloc_r+0x64>
 80045b4:	f1ba 0f00 	cmp.w	sl, #0
 80045b8:	db0f      	blt.n	80045da <_malloc_r+0x28a>
 80045ba:	4430      	add	r0, r6
 80045bc:	6843      	ldr	r3, [r0, #4]
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	6043      	str	r3, [r0, #4]
 80045c4:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80045c8:	4648      	mov	r0, r9
 80045ca:	60df      	str	r7, [r3, #12]
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	f000 f8df 	bl	8004790 <__malloc_unlock>
 80045d2:	4630      	mov	r0, r6
 80045d4:	b003      	add	sp, #12
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	463e      	mov	r6, r7
 80045dc:	e77a      	b.n	80044d4 <_malloc_r+0x184>
 80045de:	f85c 0908 	ldr.w	r0, [ip], #-8
 80045e2:	4584      	cmp	ip, r0
 80045e4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80045e8:	f43f af7d 	beq.w	80044e6 <_malloc_r+0x196>
 80045ec:	e781      	b.n	80044f2 <_malloc_r+0x1a2>
 80045ee:	bf00      	nop
 80045f0:	20000180 	.word	0x20000180
 80045f4:	20000188 	.word	0x20000188
 80045f8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80045fc:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004600:	f026 0603 	bic.w	r6, r6, #3
 8004604:	42b4      	cmp	r4, r6
 8004606:	d803      	bhi.n	8004610 <_malloc_r+0x2c0>
 8004608:	1b33      	subs	r3, r6, r4
 800460a:	2b0f      	cmp	r3, #15
 800460c:	f300 8096 	bgt.w	800473c <_malloc_r+0x3ec>
 8004610:	4a4f      	ldr	r2, [pc, #316]	; (8004750 <_malloc_r+0x400>)
 8004612:	6817      	ldr	r7, [r2, #0]
 8004614:	4a4f      	ldr	r2, [pc, #316]	; (8004754 <_malloc_r+0x404>)
 8004616:	6811      	ldr	r1, [r2, #0]
 8004618:	3710      	adds	r7, #16
 800461a:	3101      	adds	r1, #1
 800461c:	eb0b 0306 	add.w	r3, fp, r6
 8004620:	4427      	add	r7, r4
 8004622:	d005      	beq.n	8004630 <_malloc_r+0x2e0>
 8004624:	494c      	ldr	r1, [pc, #304]	; (8004758 <_malloc_r+0x408>)
 8004626:	3901      	subs	r1, #1
 8004628:	440f      	add	r7, r1
 800462a:	3101      	adds	r1, #1
 800462c:	4249      	negs	r1, r1
 800462e:	400f      	ands	r7, r1
 8004630:	4639      	mov	r1, r7
 8004632:	4648      	mov	r0, r9
 8004634:	9201      	str	r2, [sp, #4]
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	f000 fb80 	bl	8004d3c <_sbrk_r>
 800463c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004640:	4680      	mov	r8, r0
 8004642:	d056      	beq.n	80046f2 <_malloc_r+0x3a2>
 8004644:	9b00      	ldr	r3, [sp, #0]
 8004646:	9a01      	ldr	r2, [sp, #4]
 8004648:	4283      	cmp	r3, r0
 800464a:	d901      	bls.n	8004650 <_malloc_r+0x300>
 800464c:	45ab      	cmp	fp, r5
 800464e:	d150      	bne.n	80046f2 <_malloc_r+0x3a2>
 8004650:	4842      	ldr	r0, [pc, #264]	; (800475c <_malloc_r+0x40c>)
 8004652:	6801      	ldr	r1, [r0, #0]
 8004654:	4543      	cmp	r3, r8
 8004656:	eb07 0e01 	add.w	lr, r7, r1
 800465a:	f8c0 e000 	str.w	lr, [r0]
 800465e:	4940      	ldr	r1, [pc, #256]	; (8004760 <_malloc_r+0x410>)
 8004660:	4682      	mov	sl, r0
 8004662:	d113      	bne.n	800468c <_malloc_r+0x33c>
 8004664:	420b      	tst	r3, r1
 8004666:	d111      	bne.n	800468c <_malloc_r+0x33c>
 8004668:	68ab      	ldr	r3, [r5, #8]
 800466a:	443e      	add	r6, r7
 800466c:	f046 0601 	orr.w	r6, r6, #1
 8004670:	605e      	str	r6, [r3, #4]
 8004672:	4a3c      	ldr	r2, [pc, #240]	; (8004764 <_malloc_r+0x414>)
 8004674:	f8da 3000 	ldr.w	r3, [sl]
 8004678:	6811      	ldr	r1, [r2, #0]
 800467a:	428b      	cmp	r3, r1
 800467c:	bf88      	it	hi
 800467e:	6013      	strhi	r3, [r2, #0]
 8004680:	4a39      	ldr	r2, [pc, #228]	; (8004768 <_malloc_r+0x418>)
 8004682:	6811      	ldr	r1, [r2, #0]
 8004684:	428b      	cmp	r3, r1
 8004686:	bf88      	it	hi
 8004688:	6013      	strhi	r3, [r2, #0]
 800468a:	e032      	b.n	80046f2 <_malloc_r+0x3a2>
 800468c:	6810      	ldr	r0, [r2, #0]
 800468e:	3001      	adds	r0, #1
 8004690:	bf1b      	ittet	ne
 8004692:	eba8 0303 	subne.w	r3, r8, r3
 8004696:	4473      	addne	r3, lr
 8004698:	f8c2 8000 	streq.w	r8, [r2]
 800469c:	f8ca 3000 	strne.w	r3, [sl]
 80046a0:	f018 0007 	ands.w	r0, r8, #7
 80046a4:	bf1c      	itt	ne
 80046a6:	f1c0 0008 	rsbne	r0, r0, #8
 80046aa:	4480      	addne	r8, r0
 80046ac:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <_malloc_r+0x408>)
 80046ae:	4447      	add	r7, r8
 80046b0:	4418      	add	r0, r3
 80046b2:	400f      	ands	r7, r1
 80046b4:	1bc7      	subs	r7, r0, r7
 80046b6:	4639      	mov	r1, r7
 80046b8:	4648      	mov	r0, r9
 80046ba:	f000 fb3f 	bl	8004d3c <_sbrk_r>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	bf08      	it	eq
 80046c2:	4640      	moveq	r0, r8
 80046c4:	f8da 3000 	ldr.w	r3, [sl]
 80046c8:	f8c5 8008 	str.w	r8, [r5, #8]
 80046cc:	bf08      	it	eq
 80046ce:	2700      	moveq	r7, #0
 80046d0:	eba0 0008 	sub.w	r0, r0, r8
 80046d4:	443b      	add	r3, r7
 80046d6:	4407      	add	r7, r0
 80046d8:	f047 0701 	orr.w	r7, r7, #1
 80046dc:	45ab      	cmp	fp, r5
 80046de:	f8ca 3000 	str.w	r3, [sl]
 80046e2:	f8c8 7004 	str.w	r7, [r8, #4]
 80046e6:	d0c4      	beq.n	8004672 <_malloc_r+0x322>
 80046e8:	2e0f      	cmp	r6, #15
 80046ea:	d810      	bhi.n	800470e <_malloc_r+0x3be>
 80046ec:	2301      	movs	r3, #1
 80046ee:	f8c8 3004 	str.w	r3, [r8, #4]
 80046f2:	68ab      	ldr	r3, [r5, #8]
 80046f4:	685a      	ldr	r2, [r3, #4]
 80046f6:	f022 0203 	bic.w	r2, r2, #3
 80046fa:	4294      	cmp	r4, r2
 80046fc:	eba2 0304 	sub.w	r3, r2, r4
 8004700:	d801      	bhi.n	8004706 <_malloc_r+0x3b6>
 8004702:	2b0f      	cmp	r3, #15
 8004704:	dc1a      	bgt.n	800473c <_malloc_r+0x3ec>
 8004706:	4648      	mov	r0, r9
 8004708:	f000 f842 	bl	8004790 <__malloc_unlock>
 800470c:	e62d      	b.n	800436a <_malloc_r+0x1a>
 800470e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8004712:	3e0c      	subs	r6, #12
 8004714:	f026 0607 	bic.w	r6, r6, #7
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	4333      	orrs	r3, r6
 800471e:	f8cb 3004 	str.w	r3, [fp, #4]
 8004722:	eb0b 0306 	add.w	r3, fp, r6
 8004726:	2205      	movs	r2, #5
 8004728:	2e0f      	cmp	r6, #15
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	609a      	str	r2, [r3, #8]
 800472e:	d9a0      	bls.n	8004672 <_malloc_r+0x322>
 8004730:	f10b 0108 	add.w	r1, fp, #8
 8004734:	4648      	mov	r0, r9
 8004736:	f000 fc0f 	bl	8004f58 <_free_r>
 800473a:	e79a      	b.n	8004672 <_malloc_r+0x322>
 800473c:	68ae      	ldr	r6, [r5, #8]
 800473e:	f044 0201 	orr.w	r2, r4, #1
 8004742:	4434      	add	r4, r6
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	6072      	str	r2, [r6, #4]
 800474a:	60ac      	str	r4, [r5, #8]
 800474c:	6063      	str	r3, [r4, #4]
 800474e:	e631      	b.n	80043b4 <_malloc_r+0x64>
 8004750:	20000764 	.word	0x20000764
 8004754:	20000588 	.word	0x20000588
 8004758:	00000080 	.word	0x00000080
 800475c:	20000734 	.word	0x20000734
 8004760:	0000007f 	.word	0x0000007f
 8004764:	2000075c 	.word	0x2000075c
 8004768:	20000760 	.word	0x20000760

0800476c <memcpy>:
 800476c:	b510      	push	{r4, lr}
 800476e:	1e43      	subs	r3, r0, #1
 8004770:	440a      	add	r2, r1
 8004772:	4291      	cmp	r1, r2
 8004774:	d100      	bne.n	8004778 <memcpy+0xc>
 8004776:	bd10      	pop	{r4, pc}
 8004778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800477c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004780:	e7f7      	b.n	8004772 <memcpy+0x6>
	...

08004784 <__malloc_lock>:
 8004784:	4801      	ldr	r0, [pc, #4]	; (800478c <__malloc_lock+0x8>)
 8004786:	f000 bca3 	b.w	80050d0 <__retarget_lock_acquire_recursive>
 800478a:	bf00      	nop
 800478c:	20000de8 	.word	0x20000de8

08004790 <__malloc_unlock>:
 8004790:	4801      	ldr	r0, [pc, #4]	; (8004798 <__malloc_unlock+0x8>)
 8004792:	f000 bc9e 	b.w	80050d2 <__retarget_lock_release_recursive>
 8004796:	bf00      	nop
 8004798:	20000de8 	.word	0x20000de8

0800479c <_Balloc>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80047a0:	4604      	mov	r4, r0
 80047a2:	460e      	mov	r6, r1
 80047a4:	b93d      	cbnz	r5, 80047b6 <_Balloc+0x1a>
 80047a6:	2010      	movs	r0, #16
 80047a8:	f7ff fdca 	bl	8004340 <malloc>
 80047ac:	6260      	str	r0, [r4, #36]	; 0x24
 80047ae:	6045      	str	r5, [r0, #4]
 80047b0:	6085      	str	r5, [r0, #8]
 80047b2:	6005      	str	r5, [r0, #0]
 80047b4:	60c5      	str	r5, [r0, #12]
 80047b6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80047b8:	68eb      	ldr	r3, [r5, #12]
 80047ba:	b183      	cbz	r3, 80047de <_Balloc+0x42>
 80047bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80047c4:	b9b8      	cbnz	r0, 80047f6 <_Balloc+0x5a>
 80047c6:	2101      	movs	r1, #1
 80047c8:	fa01 f506 	lsl.w	r5, r1, r6
 80047cc:	1d6a      	adds	r2, r5, #5
 80047ce:	0092      	lsls	r2, r2, #2
 80047d0:	4620      	mov	r0, r4
 80047d2:	f000 fb3d 	bl	8004e50 <_calloc_r>
 80047d6:	b160      	cbz	r0, 80047f2 <_Balloc+0x56>
 80047d8:	6046      	str	r6, [r0, #4]
 80047da:	6085      	str	r5, [r0, #8]
 80047dc:	e00e      	b.n	80047fc <_Balloc+0x60>
 80047de:	2221      	movs	r2, #33	; 0x21
 80047e0:	2104      	movs	r1, #4
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 fb34 	bl	8004e50 <_calloc_r>
 80047e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047ea:	60e8      	str	r0, [r5, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e4      	bne.n	80047bc <_Balloc+0x20>
 80047f2:	2000      	movs	r0, #0
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	6802      	ldr	r2, [r0, #0]
 80047f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80047fc:	2300      	movs	r3, #0
 80047fe:	6103      	str	r3, [r0, #16]
 8004800:	60c3      	str	r3, [r0, #12]
 8004802:	bd70      	pop	{r4, r5, r6, pc}

08004804 <_Bfree>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004808:	4606      	mov	r6, r0
 800480a:	460d      	mov	r5, r1
 800480c:	b93c      	cbnz	r4, 800481e <_Bfree+0x1a>
 800480e:	2010      	movs	r0, #16
 8004810:	f7ff fd96 	bl	8004340 <malloc>
 8004814:	6270      	str	r0, [r6, #36]	; 0x24
 8004816:	6044      	str	r4, [r0, #4]
 8004818:	6084      	str	r4, [r0, #8]
 800481a:	6004      	str	r4, [r0, #0]
 800481c:	60c4      	str	r4, [r0, #12]
 800481e:	b13d      	cbz	r5, 8004830 <_Bfree+0x2c>
 8004820:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004822:	686a      	ldr	r2, [r5, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800482a:	6029      	str	r1, [r5, #0]
 800482c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004830:	bd70      	pop	{r4, r5, r6, pc}

08004832 <__multadd>:
 8004832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004836:	690d      	ldr	r5, [r1, #16]
 8004838:	461f      	mov	r7, r3
 800483a:	4606      	mov	r6, r0
 800483c:	460c      	mov	r4, r1
 800483e:	f101 0e14 	add.w	lr, r1, #20
 8004842:	2300      	movs	r3, #0
 8004844:	f8de 0000 	ldr.w	r0, [lr]
 8004848:	b281      	uxth	r1, r0
 800484a:	fb02 7101 	mla	r1, r2, r1, r7
 800484e:	0c0f      	lsrs	r7, r1, #16
 8004850:	0c00      	lsrs	r0, r0, #16
 8004852:	fb02 7000 	mla	r0, r2, r0, r7
 8004856:	b289      	uxth	r1, r1
 8004858:	3301      	adds	r3, #1
 800485a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800485e:	429d      	cmp	r5, r3
 8004860:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004864:	f84e 1b04 	str.w	r1, [lr], #4
 8004868:	dcec      	bgt.n	8004844 <__multadd+0x12>
 800486a:	b1d7      	cbz	r7, 80048a2 <__multadd+0x70>
 800486c:	68a3      	ldr	r3, [r4, #8]
 800486e:	429d      	cmp	r5, r3
 8004870:	db12      	blt.n	8004898 <__multadd+0x66>
 8004872:	6861      	ldr	r1, [r4, #4]
 8004874:	4630      	mov	r0, r6
 8004876:	3101      	adds	r1, #1
 8004878:	f7ff ff90 	bl	800479c <_Balloc>
 800487c:	6922      	ldr	r2, [r4, #16]
 800487e:	3202      	adds	r2, #2
 8004880:	f104 010c 	add.w	r1, r4, #12
 8004884:	4680      	mov	r8, r0
 8004886:	0092      	lsls	r2, r2, #2
 8004888:	300c      	adds	r0, #12
 800488a:	f7ff ff6f 	bl	800476c <memcpy>
 800488e:	4621      	mov	r1, r4
 8004890:	4630      	mov	r0, r6
 8004892:	f7ff ffb7 	bl	8004804 <_Bfree>
 8004896:	4644      	mov	r4, r8
 8004898:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800489c:	3501      	adds	r5, #1
 800489e:	615f      	str	r7, [r3, #20]
 80048a0:	6125      	str	r5, [r4, #16]
 80048a2:	4620      	mov	r0, r4
 80048a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080048a8 <__hi0bits>:
 80048a8:	0c02      	lsrs	r2, r0, #16
 80048aa:	0412      	lsls	r2, r2, #16
 80048ac:	4603      	mov	r3, r0
 80048ae:	b9b2      	cbnz	r2, 80048de <__hi0bits+0x36>
 80048b0:	0403      	lsls	r3, r0, #16
 80048b2:	2010      	movs	r0, #16
 80048b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80048b8:	bf04      	itt	eq
 80048ba:	021b      	lsleq	r3, r3, #8
 80048bc:	3008      	addeq	r0, #8
 80048be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80048c2:	bf04      	itt	eq
 80048c4:	011b      	lsleq	r3, r3, #4
 80048c6:	3004      	addeq	r0, #4
 80048c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80048cc:	bf04      	itt	eq
 80048ce:	009b      	lsleq	r3, r3, #2
 80048d0:	3002      	addeq	r0, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db06      	blt.n	80048e4 <__hi0bits+0x3c>
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	d503      	bpl.n	80048e2 <__hi0bits+0x3a>
 80048da:	3001      	adds	r0, #1
 80048dc:	4770      	bx	lr
 80048de:	2000      	movs	r0, #0
 80048e0:	e7e8      	b.n	80048b4 <__hi0bits+0xc>
 80048e2:	2020      	movs	r0, #32
 80048e4:	4770      	bx	lr

080048e6 <__lo0bits>:
 80048e6:	6803      	ldr	r3, [r0, #0]
 80048e8:	f013 0207 	ands.w	r2, r3, #7
 80048ec:	4601      	mov	r1, r0
 80048ee:	d00b      	beq.n	8004908 <__lo0bits+0x22>
 80048f0:	07da      	lsls	r2, r3, #31
 80048f2:	d423      	bmi.n	800493c <__lo0bits+0x56>
 80048f4:	0798      	lsls	r0, r3, #30
 80048f6:	bf49      	itett	mi
 80048f8:	085b      	lsrmi	r3, r3, #1
 80048fa:	089b      	lsrpl	r3, r3, #2
 80048fc:	2001      	movmi	r0, #1
 80048fe:	600b      	strmi	r3, [r1, #0]
 8004900:	bf5c      	itt	pl
 8004902:	600b      	strpl	r3, [r1, #0]
 8004904:	2002      	movpl	r0, #2
 8004906:	4770      	bx	lr
 8004908:	b298      	uxth	r0, r3
 800490a:	b9a8      	cbnz	r0, 8004938 <__lo0bits+0x52>
 800490c:	0c1b      	lsrs	r3, r3, #16
 800490e:	2010      	movs	r0, #16
 8004910:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004914:	bf04      	itt	eq
 8004916:	0a1b      	lsreq	r3, r3, #8
 8004918:	3008      	addeq	r0, #8
 800491a:	071a      	lsls	r2, r3, #28
 800491c:	bf04      	itt	eq
 800491e:	091b      	lsreq	r3, r3, #4
 8004920:	3004      	addeq	r0, #4
 8004922:	079a      	lsls	r2, r3, #30
 8004924:	bf04      	itt	eq
 8004926:	089b      	lsreq	r3, r3, #2
 8004928:	3002      	addeq	r0, #2
 800492a:	07da      	lsls	r2, r3, #31
 800492c:	d402      	bmi.n	8004934 <__lo0bits+0x4e>
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	d006      	beq.n	8004940 <__lo0bits+0x5a>
 8004932:	3001      	adds	r0, #1
 8004934:	600b      	str	r3, [r1, #0]
 8004936:	4770      	bx	lr
 8004938:	4610      	mov	r0, r2
 800493a:	e7e9      	b.n	8004910 <__lo0bits+0x2a>
 800493c:	2000      	movs	r0, #0
 800493e:	4770      	bx	lr
 8004940:	2020      	movs	r0, #32
 8004942:	4770      	bx	lr

08004944 <__i2b>:
 8004944:	b510      	push	{r4, lr}
 8004946:	460c      	mov	r4, r1
 8004948:	2101      	movs	r1, #1
 800494a:	f7ff ff27 	bl	800479c <_Balloc>
 800494e:	2201      	movs	r2, #1
 8004950:	6144      	str	r4, [r0, #20]
 8004952:	6102      	str	r2, [r0, #16]
 8004954:	bd10      	pop	{r4, pc}

08004956 <__multiply>:
 8004956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	4614      	mov	r4, r2
 800495c:	690a      	ldr	r2, [r1, #16]
 800495e:	6923      	ldr	r3, [r4, #16]
 8004960:	429a      	cmp	r2, r3
 8004962:	bfb8      	it	lt
 8004964:	460b      	movlt	r3, r1
 8004966:	4689      	mov	r9, r1
 8004968:	bfbc      	itt	lt
 800496a:	46a1      	movlt	r9, r4
 800496c:	461c      	movlt	r4, r3
 800496e:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004972:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004976:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800497a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800497e:	eb07 060a 	add.w	r6, r7, sl
 8004982:	429e      	cmp	r6, r3
 8004984:	bfc8      	it	gt
 8004986:	3101      	addgt	r1, #1
 8004988:	f7ff ff08 	bl	800479c <_Balloc>
 800498c:	f100 0514 	add.w	r5, r0, #20
 8004990:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004994:	462b      	mov	r3, r5
 8004996:	2200      	movs	r2, #0
 8004998:	4543      	cmp	r3, r8
 800499a:	d316      	bcc.n	80049ca <__multiply+0x74>
 800499c:	f104 0214 	add.w	r2, r4, #20
 80049a0:	f109 0114 	add.w	r1, r9, #20
 80049a4:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80049a8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	9c01      	ldr	r4, [sp, #4]
 80049b0:	4294      	cmp	r4, r2
 80049b2:	4613      	mov	r3, r2
 80049b4:	d80c      	bhi.n	80049d0 <__multiply+0x7a>
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	dd03      	ble.n	80049c2 <__multiply+0x6c>
 80049ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d054      	beq.n	8004a6c <__multiply+0x116>
 80049c2:	6106      	str	r6, [r0, #16]
 80049c4:	b003      	add	sp, #12
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	f843 2b04 	str.w	r2, [r3], #4
 80049ce:	e7e3      	b.n	8004998 <__multiply+0x42>
 80049d0:	f8b3 a000 	ldrh.w	sl, [r3]
 80049d4:	3204      	adds	r2, #4
 80049d6:	f1ba 0f00 	cmp.w	sl, #0
 80049da:	d020      	beq.n	8004a1e <__multiply+0xc8>
 80049dc:	46ae      	mov	lr, r5
 80049de:	4689      	mov	r9, r1
 80049e0:	f04f 0c00 	mov.w	ip, #0
 80049e4:	f859 4b04 	ldr.w	r4, [r9], #4
 80049e8:	f8be b000 	ldrh.w	fp, [lr]
 80049ec:	b2a3      	uxth	r3, r4
 80049ee:	fb0a b303 	mla	r3, sl, r3, fp
 80049f2:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80049f6:	f8de 4000 	ldr.w	r4, [lr]
 80049fa:	4463      	add	r3, ip
 80049fc:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a00:	fb0a c40b 	mla	r4, sl, fp, ip
 8004a04:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a0e:	454f      	cmp	r7, r9
 8004a10:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004a14:	f84e 3b04 	str.w	r3, [lr], #4
 8004a18:	d8e4      	bhi.n	80049e4 <__multiply+0x8e>
 8004a1a:	f8ce c000 	str.w	ip, [lr]
 8004a1e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004a22:	f1b9 0f00 	cmp.w	r9, #0
 8004a26:	d01f      	beq.n	8004a68 <__multiply+0x112>
 8004a28:	682b      	ldr	r3, [r5, #0]
 8004a2a:	46ae      	mov	lr, r5
 8004a2c:	468c      	mov	ip, r1
 8004a2e:	f04f 0a00 	mov.w	sl, #0
 8004a32:	f8bc 4000 	ldrh.w	r4, [ip]
 8004a36:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004a3a:	fb09 b404 	mla	r4, r9, r4, fp
 8004a3e:	44a2      	add	sl, r4
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004a46:	f84e 3b04 	str.w	r3, [lr], #4
 8004a4a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004a4e:	f8be 4000 	ldrh.w	r4, [lr]
 8004a52:	0c1b      	lsrs	r3, r3, #16
 8004a54:	fb09 4303 	mla	r3, r9, r3, r4
 8004a58:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004a5c:	4567      	cmp	r7, ip
 8004a5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004a62:	d8e6      	bhi.n	8004a32 <__multiply+0xdc>
 8004a64:	f8ce 3000 	str.w	r3, [lr]
 8004a68:	3504      	adds	r5, #4
 8004a6a:	e7a0      	b.n	80049ae <__multiply+0x58>
 8004a6c:	3e01      	subs	r6, #1
 8004a6e:	e7a2      	b.n	80049b6 <__multiply+0x60>

08004a70 <__pow5mult>:
 8004a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a74:	4615      	mov	r5, r2
 8004a76:	f012 0203 	ands.w	r2, r2, #3
 8004a7a:	4606      	mov	r6, r0
 8004a7c:	460f      	mov	r7, r1
 8004a7e:	d007      	beq.n	8004a90 <__pow5mult+0x20>
 8004a80:	3a01      	subs	r2, #1
 8004a82:	4c21      	ldr	r4, [pc, #132]	; (8004b08 <__pow5mult+0x98>)
 8004a84:	2300      	movs	r3, #0
 8004a86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004a8a:	f7ff fed2 	bl	8004832 <__multadd>
 8004a8e:	4607      	mov	r7, r0
 8004a90:	10ad      	asrs	r5, r5, #2
 8004a92:	d035      	beq.n	8004b00 <__pow5mult+0x90>
 8004a94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a96:	b93c      	cbnz	r4, 8004aa8 <__pow5mult+0x38>
 8004a98:	2010      	movs	r0, #16
 8004a9a:	f7ff fc51 	bl	8004340 <malloc>
 8004a9e:	6270      	str	r0, [r6, #36]	; 0x24
 8004aa0:	6044      	str	r4, [r0, #4]
 8004aa2:	6084      	str	r4, [r0, #8]
 8004aa4:	6004      	str	r4, [r0, #0]
 8004aa6:	60c4      	str	r4, [r0, #12]
 8004aa8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004aac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ab0:	b94c      	cbnz	r4, 8004ac6 <__pow5mult+0x56>
 8004ab2:	f240 2171 	movw	r1, #625	; 0x271
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f7ff ff44 	bl	8004944 <__i2b>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ac2:	4604      	mov	r4, r0
 8004ac4:	6003      	str	r3, [r0, #0]
 8004ac6:	f04f 0800 	mov.w	r8, #0
 8004aca:	07eb      	lsls	r3, r5, #31
 8004acc:	d50a      	bpl.n	8004ae4 <__pow5mult+0x74>
 8004ace:	4639      	mov	r1, r7
 8004ad0:	4622      	mov	r2, r4
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ff3f 	bl	8004956 <__multiply>
 8004ad8:	4639      	mov	r1, r7
 8004ada:	4681      	mov	r9, r0
 8004adc:	4630      	mov	r0, r6
 8004ade:	f7ff fe91 	bl	8004804 <_Bfree>
 8004ae2:	464f      	mov	r7, r9
 8004ae4:	106d      	asrs	r5, r5, #1
 8004ae6:	d00b      	beq.n	8004b00 <__pow5mult+0x90>
 8004ae8:	6820      	ldr	r0, [r4, #0]
 8004aea:	b938      	cbnz	r0, 8004afc <__pow5mult+0x8c>
 8004aec:	4622      	mov	r2, r4
 8004aee:	4621      	mov	r1, r4
 8004af0:	4630      	mov	r0, r6
 8004af2:	f7ff ff30 	bl	8004956 <__multiply>
 8004af6:	6020      	str	r0, [r4, #0]
 8004af8:	f8c0 8000 	str.w	r8, [r0]
 8004afc:	4604      	mov	r4, r0
 8004afe:	e7e4      	b.n	8004aca <__pow5mult+0x5a>
 8004b00:	4638      	mov	r0, r7
 8004b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b06:	bf00      	nop
 8004b08:	08005830 	.word	0x08005830

08004b0c <__lshift>:
 8004b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	460c      	mov	r4, r1
 8004b12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004b16:	6923      	ldr	r3, [r4, #16]
 8004b18:	6849      	ldr	r1, [r1, #4]
 8004b1a:	eb0a 0903 	add.w	r9, sl, r3
 8004b1e:	68a3      	ldr	r3, [r4, #8]
 8004b20:	4607      	mov	r7, r0
 8004b22:	4616      	mov	r6, r2
 8004b24:	f109 0501 	add.w	r5, r9, #1
 8004b28:	42ab      	cmp	r3, r5
 8004b2a:	db31      	blt.n	8004b90 <__lshift+0x84>
 8004b2c:	4638      	mov	r0, r7
 8004b2e:	f7ff fe35 	bl	800479c <_Balloc>
 8004b32:	2200      	movs	r2, #0
 8004b34:	4680      	mov	r8, r0
 8004b36:	f100 0314 	add.w	r3, r0, #20
 8004b3a:	4611      	mov	r1, r2
 8004b3c:	4552      	cmp	r2, sl
 8004b3e:	db2a      	blt.n	8004b96 <__lshift+0x8a>
 8004b40:	6920      	ldr	r0, [r4, #16]
 8004b42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004b46:	f104 0114 	add.w	r1, r4, #20
 8004b4a:	f016 021f 	ands.w	r2, r6, #31
 8004b4e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004b52:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004b56:	d022      	beq.n	8004b9e <__lshift+0x92>
 8004b58:	f1c2 0c20 	rsb	ip, r2, #32
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	680e      	ldr	r6, [r1, #0]
 8004b60:	4096      	lsls	r6, r2
 8004b62:	4330      	orrs	r0, r6
 8004b64:	f843 0b04 	str.w	r0, [r3], #4
 8004b68:	f851 0b04 	ldr.w	r0, [r1], #4
 8004b6c:	458e      	cmp	lr, r1
 8004b6e:	fa20 f00c 	lsr.w	r0, r0, ip
 8004b72:	d8f4      	bhi.n	8004b5e <__lshift+0x52>
 8004b74:	6018      	str	r0, [r3, #0]
 8004b76:	b108      	cbz	r0, 8004b7c <__lshift+0x70>
 8004b78:	f109 0502 	add.w	r5, r9, #2
 8004b7c:	3d01      	subs	r5, #1
 8004b7e:	4638      	mov	r0, r7
 8004b80:	f8c8 5010 	str.w	r5, [r8, #16]
 8004b84:	4621      	mov	r1, r4
 8004b86:	f7ff fe3d 	bl	8004804 <_Bfree>
 8004b8a:	4640      	mov	r0, r8
 8004b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b90:	3101      	adds	r1, #1
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	e7c8      	b.n	8004b28 <__lshift+0x1c>
 8004b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004b9a:	3201      	adds	r2, #1
 8004b9c:	e7ce      	b.n	8004b3c <__lshift+0x30>
 8004b9e:	3b04      	subs	r3, #4
 8004ba0:	f851 2b04 	ldr.w	r2, [r1], #4
 8004ba4:	f843 2f04 	str.w	r2, [r3, #4]!
 8004ba8:	458e      	cmp	lr, r1
 8004baa:	d8f9      	bhi.n	8004ba0 <__lshift+0x94>
 8004bac:	e7e6      	b.n	8004b7c <__lshift+0x70>

08004bae <__mcmp>:
 8004bae:	6903      	ldr	r3, [r0, #16]
 8004bb0:	690a      	ldr	r2, [r1, #16]
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	b530      	push	{r4, r5, lr}
 8004bb6:	d10c      	bne.n	8004bd2 <__mcmp+0x24>
 8004bb8:	0092      	lsls	r2, r2, #2
 8004bba:	3014      	adds	r0, #20
 8004bbc:	3114      	adds	r1, #20
 8004bbe:	1884      	adds	r4, r0, r2
 8004bc0:	4411      	add	r1, r2
 8004bc2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004bc6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004bca:	4295      	cmp	r5, r2
 8004bcc:	d003      	beq.n	8004bd6 <__mcmp+0x28>
 8004bce:	d305      	bcc.n	8004bdc <__mcmp+0x2e>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	bd30      	pop	{r4, r5, pc}
 8004bd6:	42a0      	cmp	r0, r4
 8004bd8:	d3f3      	bcc.n	8004bc2 <__mcmp+0x14>
 8004bda:	e7fa      	b.n	8004bd2 <__mcmp+0x24>
 8004bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004be0:	e7f7      	b.n	8004bd2 <__mcmp+0x24>

08004be2 <__mdiff>:
 8004be2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004be6:	460d      	mov	r5, r1
 8004be8:	4607      	mov	r7, r0
 8004bea:	4611      	mov	r1, r2
 8004bec:	4628      	mov	r0, r5
 8004bee:	4614      	mov	r4, r2
 8004bf0:	f7ff ffdd 	bl	8004bae <__mcmp>
 8004bf4:	1e06      	subs	r6, r0, #0
 8004bf6:	d108      	bne.n	8004c0a <__mdiff+0x28>
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f7ff fdce 	bl	800479c <_Balloc>
 8004c00:	2301      	movs	r3, #1
 8004c02:	6103      	str	r3, [r0, #16]
 8004c04:	6146      	str	r6, [r0, #20]
 8004c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c0a:	bfa4      	itt	ge
 8004c0c:	4623      	movge	r3, r4
 8004c0e:	462c      	movge	r4, r5
 8004c10:	4638      	mov	r0, r7
 8004c12:	6861      	ldr	r1, [r4, #4]
 8004c14:	bfa6      	itte	ge
 8004c16:	461d      	movge	r5, r3
 8004c18:	2600      	movge	r6, #0
 8004c1a:	2601      	movlt	r6, #1
 8004c1c:	f7ff fdbe 	bl	800479c <_Balloc>
 8004c20:	692b      	ldr	r3, [r5, #16]
 8004c22:	60c6      	str	r6, [r0, #12]
 8004c24:	6926      	ldr	r6, [r4, #16]
 8004c26:	f105 0914 	add.w	r9, r5, #20
 8004c2a:	f104 0214 	add.w	r2, r4, #20
 8004c2e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004c32:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004c36:	f100 0514 	add.w	r5, r0, #20
 8004c3a:	f04f 0c00 	mov.w	ip, #0
 8004c3e:	f852 ab04 	ldr.w	sl, [r2], #4
 8004c42:	f859 4b04 	ldr.w	r4, [r9], #4
 8004c46:	fa1c f18a 	uxtah	r1, ip, sl
 8004c4a:	b2a3      	uxth	r3, r4
 8004c4c:	1ac9      	subs	r1, r1, r3
 8004c4e:	0c23      	lsrs	r3, r4, #16
 8004c50:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004c54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004c58:	b289      	uxth	r1, r1
 8004c5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004c5e:	45c8      	cmp	r8, r9
 8004c60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004c64:	4696      	mov	lr, r2
 8004c66:	f845 3b04 	str.w	r3, [r5], #4
 8004c6a:	d8e8      	bhi.n	8004c3e <__mdiff+0x5c>
 8004c6c:	45be      	cmp	lr, r7
 8004c6e:	d305      	bcc.n	8004c7c <__mdiff+0x9a>
 8004c70:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004c74:	b18b      	cbz	r3, 8004c9a <__mdiff+0xb8>
 8004c76:	6106      	str	r6, [r0, #16]
 8004c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c7c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004c80:	fa1c f381 	uxtah	r3, ip, r1
 8004c84:	141a      	asrs	r2, r3, #16
 8004c86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c94:	f845 3b04 	str.w	r3, [r5], #4
 8004c98:	e7e8      	b.n	8004c6c <__mdiff+0x8a>
 8004c9a:	3e01      	subs	r6, #1
 8004c9c:	e7e8      	b.n	8004c70 <__mdiff+0x8e>

08004c9e <__d2b>:
 8004c9e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ca2:	460e      	mov	r6, r1
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	ec59 8b10 	vmov	r8, r9, d0
 8004caa:	4615      	mov	r5, r2
 8004cac:	f7ff fd76 	bl	800479c <_Balloc>
 8004cb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004cba:	bb34      	cbnz	r4, 8004d0a <__d2b+0x6c>
 8004cbc:	9301      	str	r3, [sp, #4]
 8004cbe:	f1b8 0f00 	cmp.w	r8, #0
 8004cc2:	d027      	beq.n	8004d14 <__d2b+0x76>
 8004cc4:	a802      	add	r0, sp, #8
 8004cc6:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004cca:	f7ff fe0c 	bl	80048e6 <__lo0bits>
 8004cce:	9900      	ldr	r1, [sp, #0]
 8004cd0:	b1f0      	cbz	r0, 8004d10 <__d2b+0x72>
 8004cd2:	9a01      	ldr	r2, [sp, #4]
 8004cd4:	f1c0 0320 	rsb	r3, r0, #32
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	40c2      	lsrs	r2, r0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	9201      	str	r2, [sp, #4]
 8004ce4:	9b01      	ldr	r3, [sp, #4]
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2102      	movne	r1, #2
 8004cee:	2101      	moveq	r1, #1
 8004cf0:	6139      	str	r1, [r7, #16]
 8004cf2:	b1c4      	cbz	r4, 8004d26 <__d2b+0x88>
 8004cf4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004cf8:	4404      	add	r4, r0
 8004cfa:	6034      	str	r4, [r6, #0]
 8004cfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004d00:	6028      	str	r0, [r5, #0]
 8004d02:	4638      	mov	r0, r7
 8004d04:	b003      	add	sp, #12
 8004d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d0e:	e7d5      	b.n	8004cbc <__d2b+0x1e>
 8004d10:	6179      	str	r1, [r7, #20]
 8004d12:	e7e7      	b.n	8004ce4 <__d2b+0x46>
 8004d14:	a801      	add	r0, sp, #4
 8004d16:	f7ff fde6 	bl	80048e6 <__lo0bits>
 8004d1a:	9b01      	ldr	r3, [sp, #4]
 8004d1c:	617b      	str	r3, [r7, #20]
 8004d1e:	2101      	movs	r1, #1
 8004d20:	6139      	str	r1, [r7, #16]
 8004d22:	3020      	adds	r0, #32
 8004d24:	e7e5      	b.n	8004cf2 <__d2b+0x54>
 8004d26:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004d2a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004d2e:	6030      	str	r0, [r6, #0]
 8004d30:	6918      	ldr	r0, [r3, #16]
 8004d32:	f7ff fdb9 	bl	80048a8 <__hi0bits>
 8004d36:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004d3a:	e7e1      	b.n	8004d00 <__d2b+0x62>

08004d3c <_sbrk_r>:
 8004d3c:	b538      	push	{r3, r4, r5, lr}
 8004d3e:	4c06      	ldr	r4, [pc, #24]	; (8004d58 <_sbrk_r+0x1c>)
 8004d40:	2300      	movs	r3, #0
 8004d42:	4605      	mov	r5, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	6023      	str	r3, [r4, #0]
 8004d48:	f000 fc98 	bl	800567c <_sbrk>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_sbrk_r+0x1a>
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_sbrk_r+0x1a>
 8004d54:	602b      	str	r3, [r5, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	20000df0 	.word	0x20000df0

08004d5c <__ssprint_r>:
 8004d5c:	6893      	ldr	r3, [r2, #8]
 8004d5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d62:	4681      	mov	r9, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	4617      	mov	r7, r2
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d060      	beq.n	8004e2e <__ssprint_r+0xd2>
 8004d6c:	f04f 0b00 	mov.w	fp, #0
 8004d70:	f8d2 a000 	ldr.w	sl, [r2]
 8004d74:	465e      	mov	r6, fp
 8004d76:	b356      	cbz	r6, 8004dce <__ssprint_r+0x72>
 8004d78:	68a3      	ldr	r3, [r4, #8]
 8004d7a:	429e      	cmp	r6, r3
 8004d7c:	d344      	bcc.n	8004e08 <__ssprint_r+0xac>
 8004d7e:	89a2      	ldrh	r2, [r4, #12]
 8004d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d84:	d03e      	beq.n	8004e04 <__ssprint_r+0xa8>
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	6921      	ldr	r1, [r4, #16]
 8004d8a:	eba5 0801 	sub.w	r8, r5, r1
 8004d8e:	6965      	ldr	r5, [r4, #20]
 8004d90:	2302      	movs	r3, #2
 8004d92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d96:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d9a:	f108 0301 	add.w	r3, r8, #1
 8004d9e:	4433      	add	r3, r6
 8004da0:	429d      	cmp	r5, r3
 8004da2:	bf38      	it	cc
 8004da4:	461d      	movcc	r5, r3
 8004da6:	0553      	lsls	r3, r2, #21
 8004da8:	d546      	bpl.n	8004e38 <__ssprint_r+0xdc>
 8004daa:	4629      	mov	r1, r5
 8004dac:	4648      	mov	r0, r9
 8004dae:	f7ff facf 	bl	8004350 <_malloc_r>
 8004db2:	b998      	cbnz	r0, 8004ddc <__ssprint_r+0x80>
 8004db4:	230c      	movs	r3, #12
 8004db6:	f8c9 3000 	str.w	r3, [r9]
 8004dba:	89a3      	ldrh	r3, [r4, #12]
 8004dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dc0:	81a3      	strh	r3, [r4, #12]
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dcc:	e031      	b.n	8004e32 <__ssprint_r+0xd6>
 8004dce:	f8da b000 	ldr.w	fp, [sl]
 8004dd2:	f8da 6004 	ldr.w	r6, [sl, #4]
 8004dd6:	f10a 0a08 	add.w	sl, sl, #8
 8004dda:	e7cc      	b.n	8004d76 <__ssprint_r+0x1a>
 8004ddc:	4642      	mov	r2, r8
 8004dde:	6921      	ldr	r1, [r4, #16]
 8004de0:	9001      	str	r0, [sp, #4]
 8004de2:	f7ff fcc3 	bl	800476c <memcpy>
 8004de6:	89a2      	ldrh	r2, [r4, #12]
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004df2:	81a2      	strh	r2, [r4, #12]
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	6165      	str	r5, [r4, #20]
 8004df8:	4443      	add	r3, r8
 8004dfa:	eba5 0508 	sub.w	r5, r5, r8
 8004dfe:	6023      	str	r3, [r4, #0]
 8004e00:	60a5      	str	r5, [r4, #8]
 8004e02:	4633      	mov	r3, r6
 8004e04:	429e      	cmp	r6, r3
 8004e06:	d200      	bcs.n	8004e0a <__ssprint_r+0xae>
 8004e08:	4633      	mov	r3, r6
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	6820      	ldr	r0, [r4, #0]
 8004e10:	9301      	str	r3, [sp, #4]
 8004e12:	f000 f971 	bl	80050f8 <memmove>
 8004e16:	68a2      	ldr	r2, [r4, #8]
 8004e18:	9b01      	ldr	r3, [sp, #4]
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	60a2      	str	r2, [r4, #8]
 8004e1e:	6822      	ldr	r2, [r4, #0]
 8004e20:	4413      	add	r3, r2
 8004e22:	6023      	str	r3, [r4, #0]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	1b9e      	subs	r6, r3, r6
 8004e28:	60be      	str	r6, [r7, #8]
 8004e2a:	2e00      	cmp	r6, #0
 8004e2c:	d1cf      	bne.n	8004dce <__ssprint_r+0x72>
 8004e2e:	2000      	movs	r0, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	b003      	add	sp, #12
 8004e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e38:	462a      	mov	r2, r5
 8004e3a:	4648      	mov	r0, r9
 8004e3c:	f000 f97e 	bl	800513c <_realloc_r>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d1d6      	bne.n	8004df4 <__ssprint_r+0x98>
 8004e46:	6921      	ldr	r1, [r4, #16]
 8004e48:	4648      	mov	r0, r9
 8004e4a:	f000 f885 	bl	8004f58 <_free_r>
 8004e4e:	e7b1      	b.n	8004db4 <__ssprint_r+0x58>

08004e50 <_calloc_r>:
 8004e50:	b510      	push	{r4, lr}
 8004e52:	4351      	muls	r1, r2
 8004e54:	f7ff fa7c 	bl	8004350 <_malloc_r>
 8004e58:	4604      	mov	r4, r0
 8004e5a:	b198      	cbz	r0, 8004e84 <_calloc_r+0x34>
 8004e5c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004e60:	f022 0203 	bic.w	r2, r2, #3
 8004e64:	3a04      	subs	r2, #4
 8004e66:	2a24      	cmp	r2, #36	; 0x24
 8004e68:	d81b      	bhi.n	8004ea2 <_calloc_r+0x52>
 8004e6a:	2a13      	cmp	r2, #19
 8004e6c:	d917      	bls.n	8004e9e <_calloc_r+0x4e>
 8004e6e:	2100      	movs	r1, #0
 8004e70:	2a1b      	cmp	r2, #27
 8004e72:	6001      	str	r1, [r0, #0]
 8004e74:	6041      	str	r1, [r0, #4]
 8004e76:	d807      	bhi.n	8004e88 <_calloc_r+0x38>
 8004e78:	f100 0308 	add.w	r3, r0, #8
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]
 8004e80:	605a      	str	r2, [r3, #4]
 8004e82:	609a      	str	r2, [r3, #8]
 8004e84:	4620      	mov	r0, r4
 8004e86:	bd10      	pop	{r4, pc}
 8004e88:	2a24      	cmp	r2, #36	; 0x24
 8004e8a:	6081      	str	r1, [r0, #8]
 8004e8c:	60c1      	str	r1, [r0, #12]
 8004e8e:	bf11      	iteee	ne
 8004e90:	f100 0310 	addne.w	r3, r0, #16
 8004e94:	6101      	streq	r1, [r0, #16]
 8004e96:	f100 0318 	addeq.w	r3, r0, #24
 8004e9a:	6141      	streq	r1, [r0, #20]
 8004e9c:	e7ee      	b.n	8004e7c <_calloc_r+0x2c>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	e7ec      	b.n	8004e7c <_calloc_r+0x2c>
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	f000 f942 	bl	800512c <memset>
 8004ea8:	e7ec      	b.n	8004e84 <_calloc_r+0x34>
	...

08004eac <_malloc_trim_r>:
 8004eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb0:	4f25      	ldr	r7, [pc, #148]	; (8004f48 <_malloc_trim_r+0x9c>)
 8004eb2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8004f54 <_malloc_trim_r+0xa8>
 8004eb6:	4689      	mov	r9, r1
 8004eb8:	4606      	mov	r6, r0
 8004eba:	f7ff fc63 	bl	8004784 <__malloc_lock>
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	685d      	ldr	r5, [r3, #4]
 8004ec2:	f1a8 0411 	sub.w	r4, r8, #17
 8004ec6:	f025 0503 	bic.w	r5, r5, #3
 8004eca:	eba4 0409 	sub.w	r4, r4, r9
 8004ece:	442c      	add	r4, r5
 8004ed0:	fbb4 f4f8 	udiv	r4, r4, r8
 8004ed4:	3c01      	subs	r4, #1
 8004ed6:	fb08 f404 	mul.w	r4, r8, r4
 8004eda:	4544      	cmp	r4, r8
 8004edc:	da05      	bge.n	8004eea <_malloc_trim_r+0x3e>
 8004ede:	4630      	mov	r0, r6
 8004ee0:	f7ff fc56 	bl	8004790 <__malloc_unlock>
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004eea:	2100      	movs	r1, #0
 8004eec:	4630      	mov	r0, r6
 8004eee:	f7ff ff25 	bl	8004d3c <_sbrk_r>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	442b      	add	r3, r5
 8004ef6:	4298      	cmp	r0, r3
 8004ef8:	d1f1      	bne.n	8004ede <_malloc_trim_r+0x32>
 8004efa:	4261      	negs	r1, r4
 8004efc:	4630      	mov	r0, r6
 8004efe:	f7ff ff1d 	bl	8004d3c <_sbrk_r>
 8004f02:	3001      	adds	r0, #1
 8004f04:	d110      	bne.n	8004f28 <_malloc_trim_r+0x7c>
 8004f06:	2100      	movs	r1, #0
 8004f08:	4630      	mov	r0, r6
 8004f0a:	f7ff ff17 	bl	8004d3c <_sbrk_r>
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	1a83      	subs	r3, r0, r2
 8004f12:	2b0f      	cmp	r3, #15
 8004f14:	dde3      	ble.n	8004ede <_malloc_trim_r+0x32>
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <_malloc_trim_r+0xa0>)
 8004f18:	6809      	ldr	r1, [r1, #0]
 8004f1a:	1a40      	subs	r0, r0, r1
 8004f1c:	490c      	ldr	r1, [pc, #48]	; (8004f50 <_malloc_trim_r+0xa4>)
 8004f1e:	f043 0301 	orr.w	r3, r3, #1
 8004f22:	6008      	str	r0, [r1, #0]
 8004f24:	6053      	str	r3, [r2, #4]
 8004f26:	e7da      	b.n	8004ede <_malloc_trim_r+0x32>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <_malloc_trim_r+0xa4>)
 8004f2c:	1b2d      	subs	r5, r5, r4
 8004f2e:	f045 0501 	orr.w	r5, r5, #1
 8004f32:	605d      	str	r5, [r3, #4]
 8004f34:	6813      	ldr	r3, [r2, #0]
 8004f36:	4630      	mov	r0, r6
 8004f38:	1b1c      	subs	r4, r3, r4
 8004f3a:	6014      	str	r4, [r2, #0]
 8004f3c:	f7ff fc28 	bl	8004790 <__malloc_unlock>
 8004f40:	2001      	movs	r0, #1
 8004f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f46:	bf00      	nop
 8004f48:	20000180 	.word	0x20000180
 8004f4c:	20000588 	.word	0x20000588
 8004f50:	20000734 	.word	0x20000734
 8004f54:	00000080 	.word	0x00000080

08004f58 <_free_r>:
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	4688      	mov	r8, r1
 8004f60:	2900      	cmp	r1, #0
 8004f62:	f000 80ab 	beq.w	80050bc <_free_r+0x164>
 8004f66:	f7ff fc0d 	bl	8004784 <__malloc_lock>
 8004f6a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004f6e:	4d54      	ldr	r5, [pc, #336]	; (80050c0 <_free_r+0x168>)
 8004f70:	f022 0001 	bic.w	r0, r2, #1
 8004f74:	f1a8 0308 	sub.w	r3, r8, #8
 8004f78:	181f      	adds	r7, r3, r0
 8004f7a:	68a9      	ldr	r1, [r5, #8]
 8004f7c:	687e      	ldr	r6, [r7, #4]
 8004f7e:	428f      	cmp	r7, r1
 8004f80:	f026 0603 	bic.w	r6, r6, #3
 8004f84:	f002 0201 	and.w	r2, r2, #1
 8004f88:	d11b      	bne.n	8004fc2 <_free_r+0x6a>
 8004f8a:	4430      	add	r0, r6
 8004f8c:	b93a      	cbnz	r2, 8004f9e <_free_r+0x46>
 8004f8e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	4410      	add	r0, r2
 8004f96:	6899      	ldr	r1, [r3, #8]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	60ca      	str	r2, [r1, #12]
 8004f9c:	6091      	str	r1, [r2, #8]
 8004f9e:	f040 0201 	orr.w	r2, r0, #1
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	60ab      	str	r3, [r5, #8]
 8004fa6:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <_free_r+0x16c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4298      	cmp	r0, r3
 8004fac:	d304      	bcc.n	8004fb8 <_free_r+0x60>
 8004fae:	4b46      	ldr	r3, [pc, #280]	; (80050c8 <_free_r+0x170>)
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	f7ff ff7a 	bl	8004eac <_malloc_trim_r>
 8004fb8:	4620      	mov	r0, r4
 8004fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbe:	f7ff bbe7 	b.w	8004790 <__malloc_unlock>
 8004fc2:	607e      	str	r6, [r7, #4]
 8004fc4:	2a00      	cmp	r2, #0
 8004fc6:	d139      	bne.n	800503c <_free_r+0xe4>
 8004fc8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8004fcc:	1a5b      	subs	r3, r3, r1
 8004fce:	4408      	add	r0, r1
 8004fd0:	6899      	ldr	r1, [r3, #8]
 8004fd2:	f105 0e08 	add.w	lr, r5, #8
 8004fd6:	4571      	cmp	r1, lr
 8004fd8:	d032      	beq.n	8005040 <_free_r+0xe8>
 8004fda:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8004fde:	f8c1 e00c 	str.w	lr, [r1, #12]
 8004fe2:	f8ce 1008 	str.w	r1, [lr, #8]
 8004fe6:	19b9      	adds	r1, r7, r6
 8004fe8:	6849      	ldr	r1, [r1, #4]
 8004fea:	07c9      	lsls	r1, r1, #31
 8004fec:	d40a      	bmi.n	8005004 <_free_r+0xac>
 8004fee:	4430      	add	r0, r6
 8004ff0:	68b9      	ldr	r1, [r7, #8]
 8004ff2:	bb3a      	cbnz	r2, 8005044 <_free_r+0xec>
 8004ff4:	4e35      	ldr	r6, [pc, #212]	; (80050cc <_free_r+0x174>)
 8004ff6:	42b1      	cmp	r1, r6
 8004ff8:	d124      	bne.n	8005044 <_free_r+0xec>
 8004ffa:	616b      	str	r3, [r5, #20]
 8004ffc:	612b      	str	r3, [r5, #16]
 8004ffe:	2201      	movs	r2, #1
 8005000:	60d9      	str	r1, [r3, #12]
 8005002:	6099      	str	r1, [r3, #8]
 8005004:	f040 0101 	orr.w	r1, r0, #1
 8005008:	6059      	str	r1, [r3, #4]
 800500a:	5018      	str	r0, [r3, r0]
 800500c:	2a00      	cmp	r2, #0
 800500e:	d1d3      	bne.n	8004fb8 <_free_r+0x60>
 8005010:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005014:	d21a      	bcs.n	800504c <_free_r+0xf4>
 8005016:	08c0      	lsrs	r0, r0, #3
 8005018:	1081      	asrs	r1, r0, #2
 800501a:	2201      	movs	r2, #1
 800501c:	408a      	lsls	r2, r1
 800501e:	6869      	ldr	r1, [r5, #4]
 8005020:	3001      	adds	r0, #1
 8005022:	430a      	orrs	r2, r1
 8005024:	606a      	str	r2, [r5, #4]
 8005026:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800502a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800502e:	6099      	str	r1, [r3, #8]
 8005030:	3a08      	subs	r2, #8
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005038:	60cb      	str	r3, [r1, #12]
 800503a:	e7bd      	b.n	8004fb8 <_free_r+0x60>
 800503c:	2200      	movs	r2, #0
 800503e:	e7d2      	b.n	8004fe6 <_free_r+0x8e>
 8005040:	2201      	movs	r2, #1
 8005042:	e7d0      	b.n	8004fe6 <_free_r+0x8e>
 8005044:	68fe      	ldr	r6, [r7, #12]
 8005046:	60ce      	str	r6, [r1, #12]
 8005048:	60b1      	str	r1, [r6, #8]
 800504a:	e7db      	b.n	8005004 <_free_r+0xac>
 800504c:	0a42      	lsrs	r2, r0, #9
 800504e:	2a04      	cmp	r2, #4
 8005050:	d813      	bhi.n	800507a <_free_r+0x122>
 8005052:	0982      	lsrs	r2, r0, #6
 8005054:	3238      	adds	r2, #56	; 0x38
 8005056:	1c51      	adds	r1, r2, #1
 8005058:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800505c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005060:	428e      	cmp	r6, r1
 8005062:	d124      	bne.n	80050ae <_free_r+0x156>
 8005064:	2001      	movs	r0, #1
 8005066:	1092      	asrs	r2, r2, #2
 8005068:	fa00 f202 	lsl.w	r2, r0, r2
 800506c:	6868      	ldr	r0, [r5, #4]
 800506e:	4302      	orrs	r2, r0
 8005070:	606a      	str	r2, [r5, #4]
 8005072:	60de      	str	r6, [r3, #12]
 8005074:	6099      	str	r1, [r3, #8]
 8005076:	60b3      	str	r3, [r6, #8]
 8005078:	e7de      	b.n	8005038 <_free_r+0xe0>
 800507a:	2a14      	cmp	r2, #20
 800507c:	d801      	bhi.n	8005082 <_free_r+0x12a>
 800507e:	325b      	adds	r2, #91	; 0x5b
 8005080:	e7e9      	b.n	8005056 <_free_r+0xfe>
 8005082:	2a54      	cmp	r2, #84	; 0x54
 8005084:	d802      	bhi.n	800508c <_free_r+0x134>
 8005086:	0b02      	lsrs	r2, r0, #12
 8005088:	326e      	adds	r2, #110	; 0x6e
 800508a:	e7e4      	b.n	8005056 <_free_r+0xfe>
 800508c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005090:	d802      	bhi.n	8005098 <_free_r+0x140>
 8005092:	0bc2      	lsrs	r2, r0, #15
 8005094:	3277      	adds	r2, #119	; 0x77
 8005096:	e7de      	b.n	8005056 <_free_r+0xfe>
 8005098:	f240 5154 	movw	r1, #1364	; 0x554
 800509c:	428a      	cmp	r2, r1
 800509e:	bf9a      	itte	ls
 80050a0:	0c82      	lsrls	r2, r0, #18
 80050a2:	327c      	addls	r2, #124	; 0x7c
 80050a4:	227e      	movhi	r2, #126	; 0x7e
 80050a6:	e7d6      	b.n	8005056 <_free_r+0xfe>
 80050a8:	6889      	ldr	r1, [r1, #8]
 80050aa:	428e      	cmp	r6, r1
 80050ac:	d004      	beq.n	80050b8 <_free_r+0x160>
 80050ae:	684a      	ldr	r2, [r1, #4]
 80050b0:	f022 0203 	bic.w	r2, r2, #3
 80050b4:	4290      	cmp	r0, r2
 80050b6:	d3f7      	bcc.n	80050a8 <_free_r+0x150>
 80050b8:	68ce      	ldr	r6, [r1, #12]
 80050ba:	e7da      	b.n	8005072 <_free_r+0x11a>
 80050bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050c0:	20000180 	.word	0x20000180
 80050c4:	2000058c 	.word	0x2000058c
 80050c8:	20000764 	.word	0x20000764
 80050cc:	20000188 	.word	0x20000188

080050d0 <__retarget_lock_acquire_recursive>:
 80050d0:	4770      	bx	lr

080050d2 <__retarget_lock_release_recursive>:
 80050d2:	4770      	bx	lr

080050d4 <__ascii_mbtowc>:
 80050d4:	b082      	sub	sp, #8
 80050d6:	b901      	cbnz	r1, 80050da <__ascii_mbtowc+0x6>
 80050d8:	a901      	add	r1, sp, #4
 80050da:	b142      	cbz	r2, 80050ee <__ascii_mbtowc+0x1a>
 80050dc:	b14b      	cbz	r3, 80050f2 <__ascii_mbtowc+0x1e>
 80050de:	7813      	ldrb	r3, [r2, #0]
 80050e0:	600b      	str	r3, [r1, #0]
 80050e2:	7812      	ldrb	r2, [r2, #0]
 80050e4:	1c10      	adds	r0, r2, #0
 80050e6:	bf18      	it	ne
 80050e8:	2001      	movne	r0, #1
 80050ea:	b002      	add	sp, #8
 80050ec:	4770      	bx	lr
 80050ee:	4610      	mov	r0, r2
 80050f0:	e7fb      	b.n	80050ea <__ascii_mbtowc+0x16>
 80050f2:	f06f 0001 	mvn.w	r0, #1
 80050f6:	e7f8      	b.n	80050ea <__ascii_mbtowc+0x16>

080050f8 <memmove>:
 80050f8:	4288      	cmp	r0, r1
 80050fa:	b510      	push	{r4, lr}
 80050fc:	eb01 0302 	add.w	r3, r1, r2
 8005100:	d803      	bhi.n	800510a <memmove+0x12>
 8005102:	1e42      	subs	r2, r0, #1
 8005104:	4299      	cmp	r1, r3
 8005106:	d10c      	bne.n	8005122 <memmove+0x2a>
 8005108:	bd10      	pop	{r4, pc}
 800510a:	4298      	cmp	r0, r3
 800510c:	d2f9      	bcs.n	8005102 <memmove+0xa>
 800510e:	1881      	adds	r1, r0, r2
 8005110:	1ad2      	subs	r2, r2, r3
 8005112:	42d3      	cmn	r3, r2
 8005114:	d100      	bne.n	8005118 <memmove+0x20>
 8005116:	bd10      	pop	{r4, pc}
 8005118:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800511c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005120:	e7f7      	b.n	8005112 <memmove+0x1a>
 8005122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005126:	f802 4f01 	strb.w	r4, [r2, #1]!
 800512a:	e7eb      	b.n	8005104 <memmove+0xc>

0800512c <memset>:
 800512c:	4402      	add	r2, r0
 800512e:	4603      	mov	r3, r0
 8005130:	4293      	cmp	r3, r2
 8005132:	d100      	bne.n	8005136 <memset+0xa>
 8005134:	4770      	bx	lr
 8005136:	f803 1b01 	strb.w	r1, [r3], #1
 800513a:	e7f9      	b.n	8005130 <memset+0x4>

0800513c <_realloc_r>:
 800513c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005140:	4682      	mov	sl, r0
 8005142:	460c      	mov	r4, r1
 8005144:	b929      	cbnz	r1, 8005152 <_realloc_r+0x16>
 8005146:	4611      	mov	r1, r2
 8005148:	b003      	add	sp, #12
 800514a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514e:	f7ff b8ff 	b.w	8004350 <_malloc_r>
 8005152:	9201      	str	r2, [sp, #4]
 8005154:	f7ff fb16 	bl	8004784 <__malloc_lock>
 8005158:	9a01      	ldr	r2, [sp, #4]
 800515a:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800515e:	f102 080b 	add.w	r8, r2, #11
 8005162:	f1b8 0f16 	cmp.w	r8, #22
 8005166:	f1a4 0908 	sub.w	r9, r4, #8
 800516a:	f025 0603 	bic.w	r6, r5, #3
 800516e:	d90a      	bls.n	8005186 <_realloc_r+0x4a>
 8005170:	f038 0807 	bics.w	r8, r8, #7
 8005174:	d509      	bpl.n	800518a <_realloc_r+0x4e>
 8005176:	230c      	movs	r3, #12
 8005178:	f8ca 3000 	str.w	r3, [sl]
 800517c:	2700      	movs	r7, #0
 800517e:	4638      	mov	r0, r7
 8005180:	b003      	add	sp, #12
 8005182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005186:	f04f 0810 	mov.w	r8, #16
 800518a:	4590      	cmp	r8, r2
 800518c:	d3f3      	bcc.n	8005176 <_realloc_r+0x3a>
 800518e:	45b0      	cmp	r8, r6
 8005190:	f340 8145 	ble.w	800541e <_realloc_r+0x2e2>
 8005194:	4ba8      	ldr	r3, [pc, #672]	; (8005438 <_realloc_r+0x2fc>)
 8005196:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800519a:	eb09 0106 	add.w	r1, r9, r6
 800519e:	4571      	cmp	r1, lr
 80051a0:	469b      	mov	fp, r3
 80051a2:	684b      	ldr	r3, [r1, #4]
 80051a4:	d005      	beq.n	80051b2 <_realloc_r+0x76>
 80051a6:	f023 0001 	bic.w	r0, r3, #1
 80051aa:	4408      	add	r0, r1
 80051ac:	6840      	ldr	r0, [r0, #4]
 80051ae:	07c7      	lsls	r7, r0, #31
 80051b0:	d447      	bmi.n	8005242 <_realloc_r+0x106>
 80051b2:	f023 0303 	bic.w	r3, r3, #3
 80051b6:	4571      	cmp	r1, lr
 80051b8:	eb06 0703 	add.w	r7, r6, r3
 80051bc:	d119      	bne.n	80051f2 <_realloc_r+0xb6>
 80051be:	f108 0010 	add.w	r0, r8, #16
 80051c2:	4287      	cmp	r7, r0
 80051c4:	db3f      	blt.n	8005246 <_realloc_r+0x10a>
 80051c6:	eb09 0308 	add.w	r3, r9, r8
 80051ca:	eba7 0708 	sub.w	r7, r7, r8
 80051ce:	f047 0701 	orr.w	r7, r7, #1
 80051d2:	f8cb 3008 	str.w	r3, [fp, #8]
 80051d6:	605f      	str	r7, [r3, #4]
 80051d8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	ea43 0308 	orr.w	r3, r3, r8
 80051e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80051e8:	4650      	mov	r0, sl
 80051ea:	f7ff fad1 	bl	8004790 <__malloc_unlock>
 80051ee:	4627      	mov	r7, r4
 80051f0:	e7c5      	b.n	800517e <_realloc_r+0x42>
 80051f2:	45b8      	cmp	r8, r7
 80051f4:	dc27      	bgt.n	8005246 <_realloc_r+0x10a>
 80051f6:	68cb      	ldr	r3, [r1, #12]
 80051f8:	688a      	ldr	r2, [r1, #8]
 80051fa:	60d3      	str	r3, [r2, #12]
 80051fc:	609a      	str	r2, [r3, #8]
 80051fe:	eba7 0008 	sub.w	r0, r7, r8
 8005202:	280f      	cmp	r0, #15
 8005204:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005208:	eb09 0207 	add.w	r2, r9, r7
 800520c:	f240 8109 	bls.w	8005422 <_realloc_r+0x2e6>
 8005210:	eb09 0108 	add.w	r1, r9, r8
 8005214:	f003 0301 	and.w	r3, r3, #1
 8005218:	ea43 0308 	orr.w	r3, r3, r8
 800521c:	f040 0001 	orr.w	r0, r0, #1
 8005220:	f8c9 3004 	str.w	r3, [r9, #4]
 8005224:	6048      	str	r0, [r1, #4]
 8005226:	6853      	ldr	r3, [r2, #4]
 8005228:	f043 0301 	orr.w	r3, r3, #1
 800522c:	6053      	str	r3, [r2, #4]
 800522e:	3108      	adds	r1, #8
 8005230:	4650      	mov	r0, sl
 8005232:	f7ff fe91 	bl	8004f58 <_free_r>
 8005236:	4650      	mov	r0, sl
 8005238:	f7ff faaa 	bl	8004790 <__malloc_unlock>
 800523c:	f109 0708 	add.w	r7, r9, #8
 8005240:	e79d      	b.n	800517e <_realloc_r+0x42>
 8005242:	2300      	movs	r3, #0
 8005244:	4619      	mov	r1, r3
 8005246:	07e8      	lsls	r0, r5, #31
 8005248:	f100 8084 	bmi.w	8005354 <_realloc_r+0x218>
 800524c:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8005250:	eba9 0505 	sub.w	r5, r9, r5
 8005254:	6868      	ldr	r0, [r5, #4]
 8005256:	f020 0003 	bic.w	r0, r0, #3
 800525a:	4430      	add	r0, r6
 800525c:	2900      	cmp	r1, #0
 800525e:	d076      	beq.n	800534e <_realloc_r+0x212>
 8005260:	4571      	cmp	r1, lr
 8005262:	d150      	bne.n	8005306 <_realloc_r+0x1ca>
 8005264:	4403      	add	r3, r0
 8005266:	f108 0110 	add.w	r1, r8, #16
 800526a:	428b      	cmp	r3, r1
 800526c:	db6f      	blt.n	800534e <_realloc_r+0x212>
 800526e:	462f      	mov	r7, r5
 8005270:	68ea      	ldr	r2, [r5, #12]
 8005272:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8005276:	60ca      	str	r2, [r1, #12]
 8005278:	6091      	str	r1, [r2, #8]
 800527a:	1f32      	subs	r2, r6, #4
 800527c:	2a24      	cmp	r2, #36	; 0x24
 800527e:	d83b      	bhi.n	80052f8 <_realloc_r+0x1bc>
 8005280:	2a13      	cmp	r2, #19
 8005282:	d936      	bls.n	80052f2 <_realloc_r+0x1b6>
 8005284:	6821      	ldr	r1, [r4, #0]
 8005286:	60a9      	str	r1, [r5, #8]
 8005288:	6861      	ldr	r1, [r4, #4]
 800528a:	60e9      	str	r1, [r5, #12]
 800528c:	2a1b      	cmp	r2, #27
 800528e:	d81c      	bhi.n	80052ca <_realloc_r+0x18e>
 8005290:	f105 0210 	add.w	r2, r5, #16
 8005294:	f104 0108 	add.w	r1, r4, #8
 8005298:	6808      	ldr	r0, [r1, #0]
 800529a:	6010      	str	r0, [r2, #0]
 800529c:	6848      	ldr	r0, [r1, #4]
 800529e:	6050      	str	r0, [r2, #4]
 80052a0:	6889      	ldr	r1, [r1, #8]
 80052a2:	6091      	str	r1, [r2, #8]
 80052a4:	eb05 0208 	add.w	r2, r5, r8
 80052a8:	eba3 0308 	sub.w	r3, r3, r8
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	f8cb 2008 	str.w	r2, [fp, #8]
 80052b4:	6053      	str	r3, [r2, #4]
 80052b6:	686b      	ldr	r3, [r5, #4]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	ea43 0308 	orr.w	r3, r3, r8
 80052c0:	606b      	str	r3, [r5, #4]
 80052c2:	4650      	mov	r0, sl
 80052c4:	f7ff fa64 	bl	8004790 <__malloc_unlock>
 80052c8:	e759      	b.n	800517e <_realloc_r+0x42>
 80052ca:	68a1      	ldr	r1, [r4, #8]
 80052cc:	6129      	str	r1, [r5, #16]
 80052ce:	68e1      	ldr	r1, [r4, #12]
 80052d0:	6169      	str	r1, [r5, #20]
 80052d2:	2a24      	cmp	r2, #36	; 0x24
 80052d4:	bf01      	itttt	eq
 80052d6:	6922      	ldreq	r2, [r4, #16]
 80052d8:	61aa      	streq	r2, [r5, #24]
 80052da:	6960      	ldreq	r0, [r4, #20]
 80052dc:	61e8      	streq	r0, [r5, #28]
 80052de:	bf19      	ittee	ne
 80052e0:	f105 0218 	addne.w	r2, r5, #24
 80052e4:	f104 0110 	addne.w	r1, r4, #16
 80052e8:	f105 0220 	addeq.w	r2, r5, #32
 80052ec:	f104 0118 	addeq.w	r1, r4, #24
 80052f0:	e7d2      	b.n	8005298 <_realloc_r+0x15c>
 80052f2:	463a      	mov	r2, r7
 80052f4:	4621      	mov	r1, r4
 80052f6:	e7cf      	b.n	8005298 <_realloc_r+0x15c>
 80052f8:	4621      	mov	r1, r4
 80052fa:	4638      	mov	r0, r7
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	f7ff fefb 	bl	80050f8 <memmove>
 8005302:	9b01      	ldr	r3, [sp, #4]
 8005304:	e7ce      	b.n	80052a4 <_realloc_r+0x168>
 8005306:	18c7      	adds	r7, r0, r3
 8005308:	45b8      	cmp	r8, r7
 800530a:	dc20      	bgt.n	800534e <_realloc_r+0x212>
 800530c:	68cb      	ldr	r3, [r1, #12]
 800530e:	688a      	ldr	r2, [r1, #8]
 8005310:	60d3      	str	r3, [r2, #12]
 8005312:	609a      	str	r2, [r3, #8]
 8005314:	4628      	mov	r0, r5
 8005316:	68eb      	ldr	r3, [r5, #12]
 8005318:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800531c:	60d3      	str	r3, [r2, #12]
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	1f32      	subs	r2, r6, #4
 8005322:	2a24      	cmp	r2, #36	; 0x24
 8005324:	d842      	bhi.n	80053ac <_realloc_r+0x270>
 8005326:	2a13      	cmp	r2, #19
 8005328:	d93e      	bls.n	80053a8 <_realloc_r+0x26c>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	60ab      	str	r3, [r5, #8]
 800532e:	6863      	ldr	r3, [r4, #4]
 8005330:	60eb      	str	r3, [r5, #12]
 8005332:	2a1b      	cmp	r2, #27
 8005334:	d824      	bhi.n	8005380 <_realloc_r+0x244>
 8005336:	f105 0010 	add.w	r0, r5, #16
 800533a:	f104 0308 	add.w	r3, r4, #8
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	6002      	str	r2, [r0, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	6042      	str	r2, [r0, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	6083      	str	r3, [r0, #8]
 800534a:	46a9      	mov	r9, r5
 800534c:	e757      	b.n	80051fe <_realloc_r+0xc2>
 800534e:	4580      	cmp	r8, r0
 8005350:	4607      	mov	r7, r0
 8005352:	dddf      	ble.n	8005314 <_realloc_r+0x1d8>
 8005354:	4611      	mov	r1, r2
 8005356:	4650      	mov	r0, sl
 8005358:	f7fe fffa 	bl	8004350 <_malloc_r>
 800535c:	4607      	mov	r7, r0
 800535e:	2800      	cmp	r0, #0
 8005360:	d0af      	beq.n	80052c2 <_realloc_r+0x186>
 8005362:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005366:	f023 0301 	bic.w	r3, r3, #1
 800536a:	f1a0 0208 	sub.w	r2, r0, #8
 800536e:	444b      	add	r3, r9
 8005370:	429a      	cmp	r2, r3
 8005372:	d11f      	bne.n	80053b4 <_realloc_r+0x278>
 8005374:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8005378:	f027 0703 	bic.w	r7, r7, #3
 800537c:	4437      	add	r7, r6
 800537e:	e73e      	b.n	80051fe <_realloc_r+0xc2>
 8005380:	68a3      	ldr	r3, [r4, #8]
 8005382:	612b      	str	r3, [r5, #16]
 8005384:	68e3      	ldr	r3, [r4, #12]
 8005386:	616b      	str	r3, [r5, #20]
 8005388:	2a24      	cmp	r2, #36	; 0x24
 800538a:	bf01      	itttt	eq
 800538c:	6923      	ldreq	r3, [r4, #16]
 800538e:	61ab      	streq	r3, [r5, #24]
 8005390:	6962      	ldreq	r2, [r4, #20]
 8005392:	61ea      	streq	r2, [r5, #28]
 8005394:	bf19      	ittee	ne
 8005396:	f105 0018 	addne.w	r0, r5, #24
 800539a:	f104 0310 	addne.w	r3, r4, #16
 800539e:	f105 0020 	addeq.w	r0, r5, #32
 80053a2:	f104 0318 	addeq.w	r3, r4, #24
 80053a6:	e7ca      	b.n	800533e <_realloc_r+0x202>
 80053a8:	4623      	mov	r3, r4
 80053aa:	e7c8      	b.n	800533e <_realloc_r+0x202>
 80053ac:	4621      	mov	r1, r4
 80053ae:	f7ff fea3 	bl	80050f8 <memmove>
 80053b2:	e7ca      	b.n	800534a <_realloc_r+0x20e>
 80053b4:	1f32      	subs	r2, r6, #4
 80053b6:	2a24      	cmp	r2, #36	; 0x24
 80053b8:	d82d      	bhi.n	8005416 <_realloc_r+0x2da>
 80053ba:	2a13      	cmp	r2, #19
 80053bc:	d928      	bls.n	8005410 <_realloc_r+0x2d4>
 80053be:	6823      	ldr	r3, [r4, #0]
 80053c0:	6003      	str	r3, [r0, #0]
 80053c2:	6863      	ldr	r3, [r4, #4]
 80053c4:	6043      	str	r3, [r0, #4]
 80053c6:	2a1b      	cmp	r2, #27
 80053c8:	d80e      	bhi.n	80053e8 <_realloc_r+0x2ac>
 80053ca:	f100 0308 	add.w	r3, r0, #8
 80053ce:	f104 0208 	add.w	r2, r4, #8
 80053d2:	6811      	ldr	r1, [r2, #0]
 80053d4:	6019      	str	r1, [r3, #0]
 80053d6:	6851      	ldr	r1, [r2, #4]
 80053d8:	6059      	str	r1, [r3, #4]
 80053da:	6892      	ldr	r2, [r2, #8]
 80053dc:	609a      	str	r2, [r3, #8]
 80053de:	4621      	mov	r1, r4
 80053e0:	4650      	mov	r0, sl
 80053e2:	f7ff fdb9 	bl	8004f58 <_free_r>
 80053e6:	e76c      	b.n	80052c2 <_realloc_r+0x186>
 80053e8:	68a3      	ldr	r3, [r4, #8]
 80053ea:	6083      	str	r3, [r0, #8]
 80053ec:	68e3      	ldr	r3, [r4, #12]
 80053ee:	60c3      	str	r3, [r0, #12]
 80053f0:	2a24      	cmp	r2, #36	; 0x24
 80053f2:	bf01      	itttt	eq
 80053f4:	6923      	ldreq	r3, [r4, #16]
 80053f6:	6103      	streq	r3, [r0, #16]
 80053f8:	6961      	ldreq	r1, [r4, #20]
 80053fa:	6141      	streq	r1, [r0, #20]
 80053fc:	bf19      	ittee	ne
 80053fe:	f100 0310 	addne.w	r3, r0, #16
 8005402:	f104 0210 	addne.w	r2, r4, #16
 8005406:	f100 0318 	addeq.w	r3, r0, #24
 800540a:	f104 0218 	addeq.w	r2, r4, #24
 800540e:	e7e0      	b.n	80053d2 <_realloc_r+0x296>
 8005410:	4603      	mov	r3, r0
 8005412:	4622      	mov	r2, r4
 8005414:	e7dd      	b.n	80053d2 <_realloc_r+0x296>
 8005416:	4621      	mov	r1, r4
 8005418:	f7ff fe6e 	bl	80050f8 <memmove>
 800541c:	e7df      	b.n	80053de <_realloc_r+0x2a2>
 800541e:	4637      	mov	r7, r6
 8005420:	e6ed      	b.n	80051fe <_realloc_r+0xc2>
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	431f      	orrs	r7, r3
 8005428:	f8c9 7004 	str.w	r7, [r9, #4]
 800542c:	6853      	ldr	r3, [r2, #4]
 800542e:	f043 0301 	orr.w	r3, r3, #1
 8005432:	6053      	str	r3, [r2, #4]
 8005434:	e6ff      	b.n	8005236 <_realloc_r+0xfa>
 8005436:	bf00      	nop
 8005438:	20000180 	.word	0x20000180

0800543c <__ascii_wctomb>:
 800543c:	b149      	cbz	r1, 8005452 <__ascii_wctomb+0x16>
 800543e:	2aff      	cmp	r2, #255	; 0xff
 8005440:	bf85      	ittet	hi
 8005442:	238a      	movhi	r3, #138	; 0x8a
 8005444:	6003      	strhi	r3, [r0, #0]
 8005446:	700a      	strbls	r2, [r1, #0]
 8005448:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800544c:	bf98      	it	ls
 800544e:	2001      	movls	r0, #1
 8005450:	4770      	bx	lr
 8005452:	4608      	mov	r0, r1
 8005454:	4770      	bx	lr
	...

08005458 <sqrt>:
 8005458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800545c:	ed2d 8b02 	vpush	{d8}
 8005460:	b08b      	sub	sp, #44	; 0x2c
 8005462:	ec55 4b10 	vmov	r4, r5, d0
 8005466:	f000 f851 	bl	800550c <__ieee754_sqrt>
 800546a:	4b26      	ldr	r3, [pc, #152]	; (8005504 <sqrt+0xac>)
 800546c:	eeb0 8a40 	vmov.f32	s16, s0
 8005470:	eef0 8a60 	vmov.f32	s17, s1
 8005474:	f993 6000 	ldrsb.w	r6, [r3]
 8005478:	1c73      	adds	r3, r6, #1
 800547a:	d02a      	beq.n	80054d2 <sqrt+0x7a>
 800547c:	4622      	mov	r2, r4
 800547e:	462b      	mov	r3, r5
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fb fb5e 	bl	8000b44 <__aeabi_dcmpun>
 8005488:	4607      	mov	r7, r0
 800548a:	bb10      	cbnz	r0, 80054d2 <sqrt+0x7a>
 800548c:	f04f 0800 	mov.w	r8, #0
 8005490:	f04f 0900 	mov.w	r9, #0
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	4620      	mov	r0, r4
 800549a:	4629      	mov	r1, r5
 800549c:	f7fb fb2a 	bl	8000af4 <__aeabi_dcmplt>
 80054a0:	b1b8      	cbz	r0, 80054d2 <sqrt+0x7a>
 80054a2:	2301      	movs	r3, #1
 80054a4:	9300      	str	r3, [sp, #0]
 80054a6:	4b18      	ldr	r3, [pc, #96]	; (8005508 <sqrt+0xb0>)
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	9708      	str	r7, [sp, #32]
 80054ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80054b0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80054b4:	b9b6      	cbnz	r6, 80054e4 <sqrt+0x8c>
 80054b6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80054ba:	4668      	mov	r0, sp
 80054bc:	f000 f8d6 	bl	800566c <matherr>
 80054c0:	b1d0      	cbz	r0, 80054f8 <sqrt+0xa0>
 80054c2:	9b08      	ldr	r3, [sp, #32]
 80054c4:	b11b      	cbz	r3, 80054ce <sqrt+0x76>
 80054c6:	f000 f8d3 	bl	8005670 <__errno>
 80054ca:	9b08      	ldr	r3, [sp, #32]
 80054cc:	6003      	str	r3, [r0, #0]
 80054ce:	ed9d 8b06 	vldr	d8, [sp, #24]
 80054d2:	eeb0 0a48 	vmov.f32	s0, s16
 80054d6:	eef0 0a68 	vmov.f32	s1, s17
 80054da:	b00b      	add	sp, #44	; 0x2c
 80054dc:	ecbd 8b02 	vpop	{d8}
 80054e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	4640      	mov	r0, r8
 80054ea:	4649      	mov	r1, r9
 80054ec:	f7fb f9ba 	bl	8000864 <__aeabi_ddiv>
 80054f0:	2e02      	cmp	r6, #2
 80054f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80054f6:	d1e0      	bne.n	80054ba <sqrt+0x62>
 80054f8:	f000 f8ba 	bl	8005670 <__errno>
 80054fc:	2321      	movs	r3, #33	; 0x21
 80054fe:	6003      	str	r3, [r0, #0]
 8005500:	e7df      	b.n	80054c2 <sqrt+0x6a>
 8005502:	bf00      	nop
 8005504:	200006fc 	.word	0x200006fc
 8005508:	08005947 	.word	0x08005947

0800550c <__ieee754_sqrt>:
 800550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005510:	ec55 4b10 	vmov	r4, r5, d0
 8005514:	4e54      	ldr	r6, [pc, #336]	; (8005668 <__ieee754_sqrt+0x15c>)
 8005516:	43ae      	bics	r6, r5
 8005518:	ee10 0a10 	vmov	r0, s0
 800551c:	462b      	mov	r3, r5
 800551e:	462a      	mov	r2, r5
 8005520:	4621      	mov	r1, r4
 8005522:	d113      	bne.n	800554c <__ieee754_sqrt+0x40>
 8005524:	ee10 2a10 	vmov	r2, s0
 8005528:	462b      	mov	r3, r5
 800552a:	ee10 0a10 	vmov	r0, s0
 800552e:	4629      	mov	r1, r5
 8005530:	f7fb f86e 	bl	8000610 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4620      	mov	r0, r4
 800553a:	4629      	mov	r1, r5
 800553c:	f7fa feb6 	bl	80002ac <__adddf3>
 8005540:	4604      	mov	r4, r0
 8005542:	460d      	mov	r5, r1
 8005544:	ec45 4b10 	vmov	d0, r4, r5
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	2d00      	cmp	r5, #0
 800554e:	dc10      	bgt.n	8005572 <__ieee754_sqrt+0x66>
 8005550:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005554:	4330      	orrs	r0, r6
 8005556:	d0f5      	beq.n	8005544 <__ieee754_sqrt+0x38>
 8005558:	b15d      	cbz	r5, 8005572 <__ieee754_sqrt+0x66>
 800555a:	ee10 2a10 	vmov	r2, s0
 800555e:	462b      	mov	r3, r5
 8005560:	4620      	mov	r0, r4
 8005562:	4629      	mov	r1, r5
 8005564:	f7fa fea0 	bl	80002a8 <__aeabi_dsub>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	f7fb f97a 	bl	8000864 <__aeabi_ddiv>
 8005570:	e7e6      	b.n	8005540 <__ieee754_sqrt+0x34>
 8005572:	151b      	asrs	r3, r3, #20
 8005574:	d10c      	bne.n	8005590 <__ieee754_sqrt+0x84>
 8005576:	2a00      	cmp	r2, #0
 8005578:	d06d      	beq.n	8005656 <__ieee754_sqrt+0x14a>
 800557a:	2000      	movs	r0, #0
 800557c:	02d6      	lsls	r6, r2, #11
 800557e:	d56e      	bpl.n	800565e <__ieee754_sqrt+0x152>
 8005580:	1e44      	subs	r4, r0, #1
 8005582:	1b1b      	subs	r3, r3, r4
 8005584:	f1c0 0420 	rsb	r4, r0, #32
 8005588:	fa21 f404 	lsr.w	r4, r1, r4
 800558c:	4322      	orrs	r2, r4
 800558e:	4081      	lsls	r1, r0
 8005590:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005594:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005598:	07dd      	lsls	r5, r3, #31
 800559a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800559e:	bf42      	ittt	mi
 80055a0:	0052      	lslmi	r2, r2, #1
 80055a2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 80055a6:	0049      	lslmi	r1, r1, #1
 80055a8:	1058      	asrs	r0, r3, #1
 80055aa:	2500      	movs	r5, #0
 80055ac:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80055b0:	441a      	add	r2, r3
 80055b2:	0049      	lsls	r1, r1, #1
 80055b4:	2316      	movs	r3, #22
 80055b6:	462c      	mov	r4, r5
 80055b8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80055bc:	19a7      	adds	r7, r4, r6
 80055be:	4297      	cmp	r7, r2
 80055c0:	bfde      	ittt	le
 80055c2:	1bd2      	suble	r2, r2, r7
 80055c4:	19bc      	addle	r4, r7, r6
 80055c6:	19ad      	addle	r5, r5, r6
 80055c8:	0052      	lsls	r2, r2, #1
 80055ca:	3b01      	subs	r3, #1
 80055cc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80055d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80055d4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80055d8:	d1f0      	bne.n	80055bc <__ieee754_sqrt+0xb0>
 80055da:	f04f 0e20 	mov.w	lr, #32
 80055de:	469c      	mov	ip, r3
 80055e0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80055e4:	42a2      	cmp	r2, r4
 80055e6:	eb06 070c 	add.w	r7, r6, ip
 80055ea:	dc02      	bgt.n	80055f2 <__ieee754_sqrt+0xe6>
 80055ec:	d112      	bne.n	8005614 <__ieee754_sqrt+0x108>
 80055ee:	428f      	cmp	r7, r1
 80055f0:	d810      	bhi.n	8005614 <__ieee754_sqrt+0x108>
 80055f2:	2f00      	cmp	r7, #0
 80055f4:	eb07 0c06 	add.w	ip, r7, r6
 80055f8:	da34      	bge.n	8005664 <__ieee754_sqrt+0x158>
 80055fa:	f1bc 0f00 	cmp.w	ip, #0
 80055fe:	db31      	blt.n	8005664 <__ieee754_sqrt+0x158>
 8005600:	f104 0801 	add.w	r8, r4, #1
 8005604:	1b12      	subs	r2, r2, r4
 8005606:	428f      	cmp	r7, r1
 8005608:	bf88      	it	hi
 800560a:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800560e:	1bc9      	subs	r1, r1, r7
 8005610:	4433      	add	r3, r6
 8005612:	4644      	mov	r4, r8
 8005614:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8005618:	f1be 0e01 	subs.w	lr, lr, #1
 800561c:	443a      	add	r2, r7
 800561e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005622:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005626:	d1dd      	bne.n	80055e4 <__ieee754_sqrt+0xd8>
 8005628:	430a      	orrs	r2, r1
 800562a:	d006      	beq.n	800563a <__ieee754_sqrt+0x12e>
 800562c:	1c5c      	adds	r4, r3, #1
 800562e:	bf13      	iteet	ne
 8005630:	3301      	addne	r3, #1
 8005632:	3501      	addeq	r5, #1
 8005634:	4673      	moveq	r3, lr
 8005636:	f023 0301 	bicne.w	r3, r3, #1
 800563a:	106a      	asrs	r2, r5, #1
 800563c:	085b      	lsrs	r3, r3, #1
 800563e:	07e9      	lsls	r1, r5, #31
 8005640:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005644:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005648:	bf48      	it	mi
 800564a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800564e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005652:	461c      	mov	r4, r3
 8005654:	e776      	b.n	8005544 <__ieee754_sqrt+0x38>
 8005656:	0aca      	lsrs	r2, r1, #11
 8005658:	3b15      	subs	r3, #21
 800565a:	0549      	lsls	r1, r1, #21
 800565c:	e78b      	b.n	8005576 <__ieee754_sqrt+0x6a>
 800565e:	0052      	lsls	r2, r2, #1
 8005660:	3001      	adds	r0, #1
 8005662:	e78b      	b.n	800557c <__ieee754_sqrt+0x70>
 8005664:	46a0      	mov	r8, r4
 8005666:	e7cd      	b.n	8005604 <__ieee754_sqrt+0xf8>
 8005668:	7ff00000 	.word	0x7ff00000

0800566c <matherr>:
 800566c:	2000      	movs	r0, #0
 800566e:	4770      	bx	lr

08005670 <__errno>:
 8005670:	4b01      	ldr	r3, [pc, #4]	; (8005678 <__errno+0x8>)
 8005672:	6818      	ldr	r0, [r3, #0]
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	2000008c 	.word	0x2000008c

0800567c <_sbrk>:
 800567c:	4b04      	ldr	r3, [pc, #16]	; (8005690 <_sbrk+0x14>)
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	4602      	mov	r2, r0
 8005682:	b909      	cbnz	r1, 8005688 <_sbrk+0xc>
 8005684:	4903      	ldr	r1, [pc, #12]	; (8005694 <_sbrk+0x18>)
 8005686:	6019      	str	r1, [r3, #0]
 8005688:	6818      	ldr	r0, [r3, #0]
 800568a:	4402      	add	r2, r0
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	4770      	bx	lr
 8005690:	20000768 	.word	0x20000768
 8005694:	20000df4 	.word	0x20000df4

08005698 <_init>:
 8005698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569a:	bf00      	nop
 800569c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569e:	bc08      	pop	{r3}
 80056a0:	469e      	mov	lr, r3
 80056a2:	4770      	bx	lr

080056a4 <_fini>:
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a6:	bf00      	nop
 80056a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056aa:	bc08      	pop	{r3}
 80056ac:	469e      	mov	lr, r3
 80056ae:	4770      	bx	lr
