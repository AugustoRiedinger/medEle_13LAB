
13LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010f4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080012a0  080012a0  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080012a0  080012a0  000112a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080012a4  080012a4  000112a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000008c  20000000  080012a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
  7 .bss          00000054  2000008c  2000008c  0002008c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200000e0  200000e0  0002008c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000720f  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ed8  00000000  00000000  000272cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000870  00000000  00000000  000281a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007d8  00000000  00000000  00028a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002b4b  00000000  00000000  000291f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ef8  00000000  00000000  0002bd3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002ec33  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000024d4  00000000  00000000  0002ecb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000008c 	.word	0x2000008c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001288 	.word	0x08001288

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000090 	.word	0x20000090
 80001e8:	08001288 	.word	0x08001288

080001ec <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b085      	sub	sp, #20
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73fb      	strb	r3, [r7, #15]
 80001f8:	2300      	movs	r3, #0
 80001fa:	73bb      	strb	r3, [r7, #14]
 80001fc:	230f      	movs	r3, #15
 80001fe:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d039      	beq.n	800027c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000208:	4b27      	ldr	r3, [pc, #156]	; (80002a8 <NVIC_Init+0xbc>)
 800020a:	68db      	ldr	r3, [r3, #12]
 800020c:	43db      	mvns	r3, r3
 800020e:	0a1b      	lsrs	r3, r3, #8
 8000210:	b2db      	uxtb	r3, r3
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000218:	7bfb      	ldrb	r3, [r7, #15]
 800021a:	f1c3 0304 	rsb	r3, r3, #4
 800021e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000220:	7b7a      	ldrb	r2, [r7, #13]
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	fa42 f303 	asr.w	r3, r2, r3
 8000228:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	785b      	ldrb	r3, [r3, #1]
 800022e:	461a      	mov	r2, r3
 8000230:	7bbb      	ldrb	r3, [r7, #14]
 8000232:	fa02 f303 	lsl.w	r3, r2, r3
 8000236:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	789a      	ldrb	r2, [r3, #2]
 800023c:	7b7b      	ldrb	r3, [r7, #13]
 800023e:	4013      	ands	r3, r2
 8000240:	b2da      	uxtb	r2, r3
 8000242:	7bfb      	ldrb	r3, [r7, #15]
 8000244:	4313      	orrs	r3, r2
 8000246:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000248:	7bfb      	ldrb	r3, [r7, #15]
 800024a:	011b      	lsls	r3, r3, #4
 800024c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800024e:	4a17      	ldr	r2, [pc, #92]	; (80002ac <NVIC_Init+0xc0>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4413      	add	r3, r2
 8000256:	7bfa      	ldrb	r2, [r7, #15]
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800025c:	4a13      	ldr	r2, [pc, #76]	; (80002ac <NVIC_Init+0xc0>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	f003 031f 	and.w	r3, r3, #31
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000276:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800027a:	e00f      	b.n	800029c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800027c:	490b      	ldr	r1, [pc, #44]	; (80002ac <NVIC_Init+0xc0>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	095b      	lsrs	r3, r3, #5
 8000284:	b2db      	uxtb	r3, r3
 8000286:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	f003 031f 	and.w	r3, r3, #31
 8000290:	2201      	movs	r2, #1
 8000292:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000294:	f100 0320 	add.w	r3, r0, #32
 8000298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	e000e100 	.word	0xe000e100

080002b0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80002ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002d2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	791b      	ldrb	r3, [r3, #4]
 80002d8:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 80002da:	683b      	ldr	r3, [r7, #0]
 80002dc:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 80002de:	4313      	orrs	r3, r2
 80002e0:	68fa      	ldr	r2, [r7, #12]
 80002e2:	4313      	orrs	r3, r2
 80002e4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80002f2:	68fa      	ldr	r2, [r7, #12]
 80002f4:	4b18      	ldr	r3, [pc, #96]	; (8000358 <ADC_Init+0xa8>)
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 80002fe:	683b      	ldr	r3, [r7, #0]
 8000300:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000302:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000308:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	795b      	ldrb	r3, [r3, #5]
 800030e:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000310:	4313      	orrs	r3, r2
 8000312:	68fa      	ldr	r2, [r7, #12]
 8000314:	4313      	orrs	r3, r2
 8000316:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000322:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800032a:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	7d1b      	ldrb	r3, [r3, #20]
 8000330:	3b01      	subs	r3, #1
 8000332:	b2da      	uxtb	r2, r3
 8000334:	7afb      	ldrb	r3, [r7, #11]
 8000336:	4313      	orrs	r3, r2
 8000338:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800033a:	7afb      	ldrb	r3, [r7, #11]
 800033c:	051b      	lsls	r3, r3, #20
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	4313      	orrs	r3, r2
 8000342:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800034a:	bf00      	nop
 800034c:	3714      	adds	r7, #20
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	c0fff7fd 	.word	0xc0fff7fd

0800035c <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2200      	movs	r2, #0
 800036e:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2200      	movs	r2, #0
 8000374:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	2201      	movs	r2, #1
 800038c:	751a      	strb	r2, [r3, #20]
}
 800038e:	bf00      	nop
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 80003a8:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <ADC_CommonInit+0x48>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	4b0d      	ldr	r3, [pc, #52]	; (80003e8 <ADC_CommonInit+0x4c>)
 80003b2:	4013      	ands	r3, r2
 80003b4:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	685b      	ldr	r3, [r3, #4]
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003be:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	689b      	ldr	r3, [r3, #8]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 80003c4:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	68db      	ldr	r3, [r3, #12]
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 80003ca:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 80003cc:	68fa      	ldr	r2, [r7, #12]
 80003ce:	4313      	orrs	r3, r2
 80003d0:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 80003d2:	4a04      	ldr	r2, [pc, #16]	; (80003e4 <ADC_CommonInit+0x48>)
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	6053      	str	r3, [r2, #4]
}
 80003d8:	bf00      	nop
 80003da:	3714      	adds	r7, #20
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	40012300 	.word	0x40012300
 80003e8:	fffc30e0 	.word	0xfffc30e0

080003ec <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	2200      	movs	r2, #0
 80003fe:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
 8000420:	460b      	mov	r3, r1
 8000422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000424:	78fb      	ldrb	r3, [r7, #3]
 8000426:	2b00      	cmp	r3, #0
 8000428:	d006      	beq.n	8000438 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	f043 0201 	orr.w	r2, r3, #1
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000436:	e005      	b.n	8000444 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	f023 0201 	bic.w	r2, r3, #1
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	609a      	str	r2, [r3, #8]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000450:	b480      	push	{r7}
 8000452:	b087      	sub	sp, #28
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	4608      	mov	r0, r1
 800045a:	4611      	mov	r1, r2
 800045c:	461a      	mov	r2, r3
 800045e:	4603      	mov	r3, r0
 8000460:	70fb      	strb	r3, [r7, #3]
 8000462:	460b      	mov	r3, r1
 8000464:	70bb      	strb	r3, [r7, #2]
 8000466:	4613      	mov	r3, r2
 8000468:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
 800046e:	2300      	movs	r3, #0
 8000470:	613b      	str	r3, [r7, #16]
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000476:	78fb      	ldrb	r3, [r7, #3]
 8000478:	2b09      	cmp	r3, #9
 800047a:	d923      	bls.n	80004c4 <ADC_InjectedChannelConfig+0x74>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	68db      	ldr	r3, [r3, #12]
 8000480:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8000482:	78fb      	ldrb	r3, [r7, #3]
 8000484:	f1a3 020a 	sub.w	r2, r3, #10
 8000488:	4613      	mov	r3, r2
 800048a:	005b      	lsls	r3, r3, #1
 800048c:	4413      	add	r3, r2
 800048e:	2207      	movs	r2, #7
 8000490:	fa02 f303 	lsl.w	r3, r2, r3
 8000494:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	43db      	mvns	r3, r3
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	4013      	ands	r3, r2
 800049e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80004a0:	7879      	ldrb	r1, [r7, #1]
 80004a2:	78fb      	ldrb	r3, [r7, #3]
 80004a4:	f1a3 020a 	sub.w	r2, r3, #10
 80004a8:	4613      	mov	r3, r2
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	4413      	add	r3, r2
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004b4:	697a      	ldr	r2, [r7, #20]
 80004b6:	693b      	ldr	r3, [r7, #16]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	697a      	ldr	r2, [r7, #20]
 80004c0:	60da      	str	r2, [r3, #12]
 80004c2:	e01e      	b.n	8000502 <ADC_InjectedChannelConfig+0xb2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	691b      	ldr	r3, [r3, #16]
 80004c8:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80004ca:	78fa      	ldrb	r2, [r7, #3]
 80004cc:	4613      	mov	r3, r2
 80004ce:	005b      	lsls	r3, r3, #1
 80004d0:	4413      	add	r3, r2
 80004d2:	2207      	movs	r2, #7
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	43db      	mvns	r3, r3
 80004de:	697a      	ldr	r2, [r7, #20]
 80004e0:	4013      	ands	r3, r2
 80004e2:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80004e4:	7879      	ldrb	r1, [r7, #1]
 80004e6:	78fa      	ldrb	r2, [r7, #3]
 80004e8:	4613      	mov	r3, r2
 80004ea:	005b      	lsls	r3, r3, #1
 80004ec:	4413      	add	r3, r2
 80004ee:	fa01 f303 	lsl.w	r3, r1, r3
 80004f2:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80004f4:	697a      	ldr	r2, [r7, #20]
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	4313      	orrs	r3, r2
 80004fa:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000506:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	0d1b      	lsrs	r3, r3, #20
 800050c:	f003 0303 	and.w	r3, r3, #3
 8000510:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	78ba      	ldrb	r2, [r7, #2]
 8000518:	1ad3      	subs	r3, r2, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	3302      	adds	r3, #2
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	4613      	mov	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	4413      	add	r3, r2
 8000528:	221f      	movs	r2, #31
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	43db      	mvns	r3, r3
 8000534:	697a      	ldr	r2, [r7, #20]
 8000536:	4013      	ands	r3, r2
 8000538:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800053a:	78fa      	ldrb	r2, [r7, #3]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	78b9      	ldrb	r1, [r7, #2]
 8000542:	1acb      	subs	r3, r1, r3
 8000544:	b2db      	uxtb	r3, r3
 8000546:	3302      	adds	r3, #2
 8000548:	b2db      	uxtb	r3, r3
 800054a:	4619      	mov	r1, r3
 800054c:	460b      	mov	r3, r1
 800054e:	009b      	lsls	r3, r3, #2
 8000550:	440b      	add	r3, r1
 8000552:	fa02 f303 	lsl.w	r3, r2, r3
 8000556:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8000558:	697a      	ldr	r2, [r7, #20]
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	4313      	orrs	r3, r2
 800055e:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	697a      	ldr	r2, [r7, #20]
 8000564:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000566:	bf00      	nop
 8000568:	371c      	adds	r7, #28
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8000572:	b480      	push	{r7}
 8000574:	b085      	sub	sp, #20
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	460b      	mov	r3, r1
 800057c:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800058a:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000592:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8000594:	78fb      	ldrb	r3, [r7, #3]
 8000596:	3b01      	subs	r3, #1
 8000598:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	051b      	lsls	r3, r3, #20
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80005aa:	bf00      	nop
 80005ac:	3714      	adds	r7, #20
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b085      	sub	sp, #20
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	6078      	str	r0, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	70fb      	strb	r3, [r7, #3]
 80005c2:	4613      	mov	r3, r2
 80005c4:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 80005ce:	78fa      	ldrb	r2, [r7, #3]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	461a      	mov	r2, r3
 80005da:	883b      	ldrh	r3, [r7, #0]
 80005dc:	6013      	str	r3, [r2, #0]
}
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr

080005ea <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005ea:	b480      	push	{r7}
 80005ec:	b087      	sub	sp, #28
 80005ee:	af00      	add	r7, sp, #0
 80005f0:	6078      	str	r0, [r7, #4]
 80005f2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	2300      	movs	r3, #0
 80005fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	e076      	b.n	80006f4 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000606:	2201      	movs	r2, #1
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	693b      	ldr	r3, [r7, #16]
 8000616:	4013      	ands	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	429a      	cmp	r2, r3
 8000620:	d165      	bne.n	80006ee <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	2103      	movs	r1, #3
 800062c:	fa01 f303 	lsl.w	r3, r1, r3
 8000630:	43db      	mvns	r3, r3
 8000632:	401a      	ands	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	791b      	ldrb	r3, [r3, #4]
 8000640:	4619      	mov	r1, r3
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	005b      	lsls	r3, r3, #1
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	431a      	orrs	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000650:	683b      	ldr	r3, [r7, #0]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d003      	beq.n	8000660 <GPIO_Init+0x76>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	2b02      	cmp	r3, #2
 800065e:	d12e      	bne.n	80006be <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	2103      	movs	r1, #3
 800066a:	fa01 f303 	lsl.w	r3, r1, r3
 800066e:	43db      	mvns	r3, r3
 8000670:	401a      	ands	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689a      	ldr	r2, [r3, #8]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	795b      	ldrb	r3, [r3, #5]
 800067e:	4619      	mov	r1, r3
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	fa01 f303 	lsl.w	r3, r1, r3
 8000688:	431a      	orrs	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	685a      	ldr	r2, [r3, #4]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	b29b      	uxth	r3, r3
 8000696:	4619      	mov	r1, r3
 8000698:	2301      	movs	r3, #1
 800069a:	408b      	lsls	r3, r1
 800069c:	43db      	mvns	r3, r3
 800069e:	401a      	ands	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	685b      	ldr	r3, [r3, #4]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	7992      	ldrb	r2, [r2, #6]
 80006ac:	4611      	mov	r1, r2
 80006ae:	697a      	ldr	r2, [r7, #20]
 80006b0:	b292      	uxth	r2, r2
 80006b2:	fa01 f202 	lsl.w	r2, r1, r2
 80006b6:	b292      	uxth	r2, r2
 80006b8:	431a      	orrs	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	68da      	ldr	r2, [r3, #12]
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	2103      	movs	r1, #3
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	401a      	ands	r2, r3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	68da      	ldr	r2, [r3, #12]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	79db      	ldrb	r3, [r3, #7]
 80006de:	4619      	mov	r1, r3
 80006e0:	697b      	ldr	r3, [r7, #20]
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	431a      	orrs	r2, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3301      	adds	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d985      	bls.n	8000606 <GPIO_Init+0x1c>
    }
  }
}
 80006fa:	bf00      	nop
 80006fc:	371c      	adds	r7, #28
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr

08000706 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	2200      	movs	r2, #0
 800071a:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	2200      	movs	r2, #0
 8000726:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	71da      	strb	r2, [r3, #7]
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
	...

0800073c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000748:	78fb      	ldrb	r3, [r7, #3]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800074e:	490a      	ldr	r1, [pc, #40]	; (8000778 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4313      	orrs	r3, r2
 8000758:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800075a:	e006      	b.n	800076a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800075c:	4906      	ldr	r1, [pc, #24]	; (8000778 <RCC_AHB1PeriphClockCmd+0x3c>)
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000760:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	43db      	mvns	r3, r3
 8000766:	4013      	ands	r3, r2
 8000768:	630b      	str	r3, [r1, #48]	; 0x30
}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40023800 	.word	0x40023800

0800077c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	460b      	mov	r3, r1
 8000786:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d006      	beq.n	800079c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800078e:	490a      	ldr	r1, [pc, #40]	; (80007b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <RCC_APB1PeriphClockCmd+0x3c>)
 8000792:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	4313      	orrs	r3, r2
 8000798:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800079a:	e006      	b.n	80007aa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800079c:	4906      	ldr	r1, [pc, #24]	; (80007b8 <RCC_APB1PeriphClockCmd+0x3c>)
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <RCC_APB1PeriphClockCmd+0x3c>)
 80007a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	43db      	mvns	r3, r3
 80007a6:	4013      	ands	r3, r2
 80007a8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80007aa:	bf00      	nop
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d006      	beq.n	80007dc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007ce:	490a      	ldr	r1, [pc, #40]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d0:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007da:	e006      	b.n	80007ea <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007dc:	4906      	ldr	r1, [pc, #24]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <RCC_APB2PeriphClockCmd+0x3c>)
 80007e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	43db      	mvns	r3, r3
 80007e6:	4013      	ands	r3, r2
 80007e8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40023800 	.word	0x40023800

080007fc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <TIM_TimeBaseInit+0xbc>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d013      	beq.n	8000840 <TIM_TimeBaseInit+0x44>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4a28      	ldr	r2, [pc, #160]	; (80008bc <TIM_TimeBaseInit+0xc0>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d00f      	beq.n	8000840 <TIM_TimeBaseInit+0x44>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000826:	d00b      	beq.n	8000840 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4a25      	ldr	r2, [pc, #148]	; (80008c0 <TIM_TimeBaseInit+0xc4>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d007      	beq.n	8000840 <TIM_TimeBaseInit+0x44>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <TIM_TimeBaseInit+0xc8>)
 8000834:	4293      	cmp	r3, r2
 8000836:	d003      	beq.n	8000840 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <TIM_TimeBaseInit+0xcc>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d108      	bne.n	8000852 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000846:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	885a      	ldrh	r2, [r3, #2]
 800084c:	89fb      	ldrh	r3, [r7, #14]
 800084e:	4313      	orrs	r3, r2
 8000850:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <TIM_TimeBaseInit+0xd0>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d00c      	beq.n	8000874 <TIM_TimeBaseInit+0x78>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <TIM_TimeBaseInit+0xd4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d008      	beq.n	8000874 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000862:	89fb      	ldrh	r3, [r7, #14]
 8000864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000868:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	891a      	ldrh	r2, [r3, #8]
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	4313      	orrs	r3, r2
 8000872:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	89fa      	ldrh	r2, [r7, #14]
 8000878:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685a      	ldr	r2, [r3, #4]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <TIM_TimeBaseInit+0xbc>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d003      	beq.n	800089a <TIM_TimeBaseInit+0x9e>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a09      	ldr	r2, [pc, #36]	; (80008bc <TIM_TimeBaseInit+0xc0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d104      	bne.n	80008a4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	7a9b      	ldrb	r3, [r3, #10]
 800089e:	b29a      	uxth	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2201      	movs	r2, #1
 80008a8:	829a      	strh	r2, [r3, #20]
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40010000 	.word	0x40010000
 80008bc:	40010400 	.word	0x40010400
 80008c0:	40000400 	.word	0x40000400
 80008c4:	40000800 	.word	0x40000800
 80008c8:	40000c00 	.word	0x40000c00
 80008cc:	40001000 	.word	0x40001000
 80008d0:	40001400 	.word	0x40001400

080008d4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
 80008dc:	460b      	mov	r3, r1
 80008de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80008e0:	78fb      	ldrb	r3, [r7, #3]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d008      	beq.n	80008f8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	881b      	ldrh	r3, [r3, #0]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80008f6:	e007      	b.n	8000908 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	f023 0301 	bic.w	r3, r3, #1
 8000902:	b29a      	uxth	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	801a      	strh	r2, [r3, #0]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr

08000914 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	460b      	mov	r3, r1
 800091e:	807b      	strh	r3, [r7, #2]
 8000920:	4613      	mov	r3, r2
 8000922:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000924:	787b      	ldrb	r3, [r7, #1]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d008      	beq.n	800093c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	899b      	ldrh	r3, [r3, #12]
 800092e:	b29a      	uxth	r2, r3
 8000930:	887b      	ldrh	r3, [r7, #2]
 8000932:	4313      	orrs	r3, r2
 8000934:	b29a      	uxth	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800093a:	e009      	b.n	8000950 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	899b      	ldrh	r3, [r3, #12]
 8000940:	b29a      	uxth	r2, r3
 8000942:	887b      	ldrh	r3, [r7, #2]
 8000944:	43db      	mvns	r3, r3
 8000946:	b29b      	uxth	r3, r3
 8000948:	4013      	ands	r3, r2
 800094a:	b29a      	uxth	r2, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	819a      	strh	r2, [r3, #12]
}
 8000950:	bf00      	nop
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800096c:	2300      	movs	r3, #0
 800096e:	81bb      	strh	r3, [r7, #12]
 8000970:	2300      	movs	r3, #0
 8000972:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	8a1b      	ldrh	r3, [r3, #16]
 8000978:	b29a      	uxth	r2, r3
 800097a:	887b      	ldrh	r3, [r7, #2]
 800097c:	4013      	ands	r3, r2
 800097e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	899b      	ldrh	r3, [r3, #12]
 8000984:	b29a      	uxth	r2, r3
 8000986:	887b      	ldrh	r3, [r7, #2]
 8000988:	4013      	ands	r3, r2
 800098a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800098c:	89bb      	ldrh	r3, [r7, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <TIM_GetITStatus+0x42>
 8000992:	897b      	ldrh	r3, [r7, #10]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e001      	b.n	80009a2 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80009a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3714      	adds	r7, #20
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80009bc:	887b      	ldrh	r3, [r7, #2]
 80009be:	43db      	mvns	r3, r3
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	821a      	strh	r2, [r3, #16]
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
	...

080009d4 <INIT_ADC>:
		- Pin		Pin del ADC a inicializar. Ej: GPIO_Pin_X
	* @ej
		- INIT_ADC(GPIOX, GPIO_Pin_X);
******************************************************************************/
/*Inicializacion de dos ADC:*/
void INIT_ADC(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08c      	sub	sp, #48	; 0x30
 80009d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;

	/* Puerto C -------------------------------------------------------------*/
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80009da:	2101      	movs	r1, #1
 80009dc:	2004      	movs	r0, #4
 80009de:	f7ff fead 	bl	800073c <RCC_AHB1PeriphClockCmd>

	/* PC1 para entrada analógica */
	GPIO_StructInit(&GPIO_InitStructure);
 80009e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fe8d 	bl	8000706 <GPIO_StructInit>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_3;
 80009ec:	2309      	movs	r3, #9
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80009f0:	2303      	movs	r3, #3
 80009f2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80009fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4833      	ldr	r0, [pc, #204]	; (8000ad0 <INIT_ADC+0xfc>)
 8000a04:	f7ff fdf1 	bl	80005ea <GPIO_Init>

	/* Activar ADC1 ----------------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000a0e:	f7ff fed5 	bl	80007bc <RCC_APB2PeriphClockCmd>
	/* Activar ADC2 ----------------------------------------------------------*/
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC2, ENABLE);
 8000a12:	2101      	movs	r1, #1
 8000a14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a18:	f7ff fed0 	bl	80007bc <RCC_APB2PeriphClockCmd>

	/* ADC Common Init -------------------------------------------------------*/
	ADC_CommonStructInit(&ADC_CommonInitStructure);
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fce4 	bl	80003ec <ADC_CommonStructInit>
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div4; // max 36 MHz segun datasheet
 8000a28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a2c:	607b      	str	r3, [r7, #4]
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
	ADC_CommonInit(&ADC_CommonInitStructure);
 8000a36:	463b      	mov	r3, r7
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff fcaf 	bl	800039c <ADC_CommonInit>

	/* ADC Init ---------------------------------------------------------------*/
	ADC_StructInit(&ADC_InitStructure);
 8000a3e:	f107 0310 	add.w	r3, r7, #16
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fc8a 	bl	800035c <ADC_StructInit>
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	753b      	strb	r3, [r7, #20]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	757b      	strb	r3, [r7, #21]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	ADC_Init(ADC1, &ADC_InitStructure);
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <INIT_ADC+0x100>)
 8000a6a:	f7ff fc21 	bl	80002b0 <ADC_Init>
	ADC_Init(ADC2, &ADC_InitStructure);
 8000a6e:	f107 0310 	add.w	r3, r7, #16
 8000a72:	4619      	mov	r1, r3
 8000a74:	4818      	ldr	r0, [pc, #96]	; (8000ad8 <INIT_ADC+0x104>)
 8000a76:	f7ff fc1b 	bl	80002b0 <ADC_Init>

	/* Establecer la configuración de conversión ------------------------------*/
	ADC_InjectedSequencerLengthConfig(ADC1, 1);
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	4815      	ldr	r0, [pc, #84]	; (8000ad4 <INIT_ADC+0x100>)
 8000a7e:	f7ff fd78 	bl	8000572 <ADC_InjectedSequencerLengthConfig>
	ADC_SetInjectedOffset(ADC1, ADC_InjectedChannel_1, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	2114      	movs	r1, #20
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <INIT_ADC+0x100>)
 8000a88:	f7ff fd95 	bl	80005b6 <ADC_SetInjectedOffset>
	ADC_InjectedChannelConfig(ADC1, ADC_Channel_10, 1,
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	2201      	movs	r2, #1
 8000a90:	210a      	movs	r1, #10
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <INIT_ADC+0x100>)
 8000a94:	f7ff fcdc 	bl	8000450 <ADC_InjectedChannelConfig>
			ADC_SampleTime_480Cycles);

	/* Establecer la configuración de conversión ------------------------------*/
	ADC_InjectedSequencerLengthConfig(ADC2, 1);
 8000a98:	2101      	movs	r1, #1
 8000a9a:	480f      	ldr	r0, [pc, #60]	; (8000ad8 <INIT_ADC+0x104>)
 8000a9c:	f7ff fd69 	bl	8000572 <ADC_InjectedSequencerLengthConfig>
	ADC_SetInjectedOffset(ADC2, ADC_InjectedChannel_1, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2114      	movs	r1, #20
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <INIT_ADC+0x104>)
 8000aa6:	f7ff fd86 	bl	80005b6 <ADC_SetInjectedOffset>
	ADC_InjectedChannelConfig(ADC2, ADC_Channel_13, 1,
 8000aaa:	2307      	movs	r3, #7
 8000aac:	2201      	movs	r2, #1
 8000aae:	210d      	movs	r1, #13
 8000ab0:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <INIT_ADC+0x104>)
 8000ab2:	f7ff fccd 	bl	8000450 <ADC_InjectedChannelConfig>
			ADC_SampleTime_480Cycles);

	/* Poner en marcha ADC ----------------------------------------------------*/
	ADC_Cmd(ADC1, ENABLE);
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <INIT_ADC+0x100>)
 8000aba:	f7ff fcad 	bl	8000418 <ADC_Cmd>

	/* Poner en marcha ADC ----------------------------------------------------*/
	ADC_Cmd(ADC2, ENABLE);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <INIT_ADC+0x104>)
 8000ac2:	f7ff fca9 	bl	8000418 <ADC_Cmd>
}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	; 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40012000 	.word	0x40012000
 8000ad8:	40012100 	.word	0x40012100

08000adc <INIT_TIM3>:
	* @param
	* @ej
		- INIT_TIM4();
******************************************************************************/
void INIT_TIM3()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
	NVIC_InitTypeDef NVIC_InitStructure;

	/* TIM3 clock enable */
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2002      	movs	r0, #2
 8000ae6:	f7ff fe49 	bl	800077c <RCC_APB1PeriphClockCmd>

	/* Enable the TIM3 gloabal Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8000aea:	231d      	movs	r3, #29
 8000aec:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000aee:	2300      	movs	r3, #0
 8000af0:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000af6:	2301      	movs	r3, #1
 8000af8:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fb75 	bl	80001ec <NVIC_Init>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
	...

08000b0c <SET_TIM3>:

	* @ej
		- INIT_TIM4(GPIOX, GPIO_Pin_X); //Inicialización del Pin PXXX como TIMER4.
******************************************************************************/
void SET_TIM3(uint32_t TimeBase, uint32_t Freq)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	uint16_t PrescalerValue = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	81fb      	strh	r3, [r7, #14]

	//Actualización de los valores del TIM4:
	SystemCoreClockUpdate();
 8000b1a:	f000 fa99 	bl	8001050 <SystemCoreClockUpdate>
	TIM_ITConfig(TIM3, TIM_IT_Update, DISABLE);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2101      	movs	r1, #1
 8000b22:	4818      	ldr	r0, [pc, #96]	; (8000b84 <SET_TIM3+0x78>)
 8000b24:	f7ff fef6 	bl	8000914 <TIM_ITConfig>
	TIM_Cmd(TIM3, DISABLE);
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4816      	ldr	r0, [pc, #88]	; (8000b84 <SET_TIM3+0x78>)
 8000b2c:	f7ff fed2 	bl	80008d4 <TIM_Cmd>

	/* Compute the prescaler value */
	PrescalerValue = (uint16_t) ((SystemCoreClock / 2) / TimeBase) - 1;
 8000b30:	4b15      	ldr	r3, [pc, #84]	; (8000b88 <SET_TIM3+0x7c>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	085a      	lsrs	r2, r3, #1
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	81fb      	strh	r3, [r7, #14]

	/* Time base configuration */
	TIM_TimeBaseStructure.TIM_Period = TimeBase / Freq - 1;
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <SET_TIM3+0x80>)
 8000b4e:	6053      	str	r3, [r2, #4]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8000b50:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <SET_TIM3+0x80>)
 8000b52:	89fb      	ldrh	r3, [r7, #14]
 8000b54:	8013      	strh	r3, [r2, #0]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	; (8000b8c <SET_TIM3+0x80>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	811a      	strh	r2, [r3, #8]
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <SET_TIM3+0x80>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	805a      	strh	r2, [r3, #2]

	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8000b62:	490a      	ldr	r1, [pc, #40]	; (8000b8c <SET_TIM3+0x80>)
 8000b64:	4807      	ldr	r0, [pc, #28]	; (8000b84 <SET_TIM3+0x78>)
 8000b66:	f7ff fe49 	bl	80007fc <TIM_TimeBaseInit>

	/* TIM Interrupts enable */
	TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <SET_TIM3+0x78>)
 8000b70:	f7ff fed0 	bl	8000914 <TIM_ITConfig>

	/* TIM3 enable counter */
	TIM_Cmd(TIM3, ENABLE);
 8000b74:	2101      	movs	r1, #1
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <SET_TIM3+0x78>)
 8000b78:	f7ff feac 	bl	80008d4 <TIM_Cmd>
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40000400 	.word	0x40000400
 8000b88:	20000078 	.word	0x20000078
 8000b8c:	200000a8 	.word	0x200000a8

08000b90 <INIT_LCD_2x16>:
  	  	  	  	  	{TLCD_D7 ,GPIOF,GPIO_Pin_7  ,RCC_AHB1Periph_GPIOF,Bit_RESET},};
	* @ej
		- INIT_LCD_2x16(LCD_2X16);
******************************************************************************/
void INIT_LCD_2x16(LCD_2X16_t* LCD_2X16)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	  //Inicialización de los pines del LCD:
	  P_LCD_2x16_InitIO(LCD_2X16);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f000 f821 	bl	8000be0 <P_LCD_2x16_InitIO>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_INIT_PAUSE);
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <INIT_LCD_2x16+0x4c>)
 8000ba0:	f000 f8b1 	bl	8000d06 <P_LCD_2x16_Delay>
	  // Init Sequenz starten
	  P_LCD_2x16_InitSequenz(LCD_2X16);
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 f8be 	bl	8000d26 <P_LCD_2x16_InitSequenz>
	  // LCD-Settings einstellen
	  P_LCD_2x16_Cmd(TLCD_CMD_INIT_DISPLAY, LCD_2X16);
 8000baa:	6879      	ldr	r1, [r7, #4]
 8000bac:	2028      	movs	r0, #40	; 0x28
 8000bae:	f000 f916 	bl	8000dde <P_LCD_2x16_Cmd>
	  P_LCD_2x16_Cmd(TLCD_CMD_ENTRY_MODE, LCD_2X16);
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	2006      	movs	r0, #6
 8000bb6:	f000 f912 	bl	8000dde <P_LCD_2x16_Cmd>
	  // Display einschalten
	  P_LCD_2x16_Cmd(TLCD_CMD_DISP_M1, LCD_2X16);
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	200c      	movs	r0, #12
 8000bbe:	f000 f90e 	bl	8000dde <P_LCD_2x16_Cmd>
	  // Display l�schen
	  P_LCD_2x16_Cmd(TLCD_CMD_CLEAR, LCD_2X16);
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	f000 f90a 	bl	8000dde <P_LCD_2x16_Cmd>
	  // kleine Pause
	  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000bca:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000bce:	f000 f89a 	bl	8000d06 <P_LCD_2x16_Delay>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	000186a0 	.word	0x000186a0

08000be0 <P_LCD_2x16_InitIO>:
	else return 0;
}

//LCD:
void P_LCD_2x16_InitIO(LCD_2X16_t* LCD_2X16)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;
	TLCD_NAME_t lcd_pin;

	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8000be8:	2300      	movs	r3, #0
 8000bea:	75fb      	strb	r3, [r7, #23]
 8000bec:	e046      	b.n	8000c7c <P_LCD_2x16_InitIO+0x9c>
	{
		//Habilitacion del Clock para cada PIN:
		RCC_AHB1PeriphClockCmd(LCD_2X16[lcd_pin].TLCD_CLK, ENABLE);
 8000bee:	7dfa      	ldrb	r2, [r7, #23]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	2101      	movs	r1, #1
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fd9a 	bl	800073c <RCC_AHB1PeriphClockCmd>

		//Configuracion como salidas digitales:
		GPIO_InitStructure.GPIO_Pin = LCD_2X16[lcd_pin].TLCD_PIN;
 8000c08:	7dfa      	ldrb	r2, [r7, #23]
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	461a      	mov	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	891b      	ldrh	r3, [r3, #8]
 8000c1a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	743b      	strb	r3, [r7, #16]
		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000c20:	2300      	movs	r3, #0
 8000c22:	74bb      	strb	r3, [r7, #18]
		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000c24:	2301      	movs	r3, #1
 8000c26:	74fb      	strb	r3, [r7, #19]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	747b      	strb	r3, [r7, #17]
		GPIO_Init(LCD_2X16[lcd_pin].TLCD_PORT, &GPIO_InitStructure);
 8000c2c:	7dfa      	ldrb	r2, [r7, #23]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f107 020c 	add.w	r2, r7, #12
 8000c42:	4611      	mov	r1, r2
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fcd0 	bl	80005ea <GPIO_Init>

		//Default Wert einstellen
		if(LCD_2X16[lcd_pin].TLCD_INIT == Bit_RESET)
 8000c4a:	7dfa      	ldrb	r2, [r7, #23]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	4413      	add	r3, r2
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	7c1b      	ldrb	r3, [r3, #16]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d105      	bne.n	8000c6c <P_LCD_2x16_InitIO+0x8c>
			P_LCD_2x16_PinLo(lcd_pin, LCD_2X16);
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f810 	bl	8000c8a <P_LCD_2x16_PinLo>
 8000c6a:	e004      	b.n	8000c76 <P_LCD_2x16_InitIO+0x96>
		else
			P_LCD_2x16_PinHi(lcd_pin, LCD_2X16);
 8000c6c:	7dfb      	ldrb	r3, [r7, #23]
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f829 	bl	8000cc8 <P_LCD_2x16_PinHi>
	for (lcd_pin = 0; lcd_pin < TLCD_ANZ; lcd_pin++)
 8000c76:	7dfb      	ldrb	r3, [r7, #23]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	75fb      	strb	r3, [r7, #23]
 8000c7c:	7dfb      	ldrb	r3, [r7, #23]
 8000c7e:	2b05      	cmp	r3, #5
 8000c80:	d9b5      	bls.n	8000bee <P_LCD_2x16_InitIO+0xe>
	}
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <P_LCD_2x16_PinLo>:

void P_LCD_2x16_PinLo(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	4603      	mov	r3, r0
 8000c92:	6039      	str	r1, [r7, #0]
 8000c94:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRH = LCD_2X16[lcd_pin].TLCD_PIN;
 8000c96:	79fa      	ldrb	r2, [r7, #7]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	4413      	add	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	6859      	ldr	r1, [r3, #4]
 8000ca8:	79fa      	ldrb	r2, [r7, #7]
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	891b      	ldrh	r3, [r3, #8]
 8000cba:	834b      	strh	r3, [r1, #26]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <P_LCD_2x16_PinHi>:

void P_LCD_2x16_PinHi(TLCD_NAME_t lcd_pin, LCD_2X16_t* LCD_2X16)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  LCD_2X16[lcd_pin].TLCD_PORT->BSRRL = LCD_2X16[lcd_pin].TLCD_PIN;
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	461a      	mov	r2, r3
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	6859      	ldr	r1, [r3, #4]
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	891b      	ldrh	r3, [r3, #8]
 8000cf8:	830b      	strh	r3, [r1, #24]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <P_LCD_2x16_Delay>:

void P_LCD_2x16_Delay(volatile uint32_t nCount)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  while(nCount--)
 8000d0e:	bf00      	nop
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	1e5a      	subs	r2, r3, #1
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1fa      	bne.n	8000d10 <P_LCD_2x16_Delay+0xa>
  {
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <P_LCD_2x16_InitSequenz>:

void P_LCD_2x16_InitSequenz(LCD_2X16_t* LCD_2X16)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  //Inicializacion de la secuencia:
  P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16);
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	2002      	movs	r0, #2
 8000d32:	f7ff ffc9 	bl	8000cc8 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f7ff ffc5 	bl	8000cc8 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	2004      	movs	r0, #4
 8000d42:	f7ff ffa2 	bl	8000c8a <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2005      	movs	r0, #5
 8000d4a:	f7ff ff9e 	bl	8000c8a <P_LCD_2x16_PinLo>
  // Erster Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f000 f82d 	bl	8000dae <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000d54:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d58:	f7ff ffd5 	bl	8000d06 <P_LCD_2x16_Delay>
  // Zweiter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 f826 	bl	8000dae <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000d62:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d66:	f7ff ffce 	bl	8000d06 <P_LCD_2x16_Delay>
  // Dritter Init Impuls
  P_LCD_2x16_Clk(LCD_2X16);
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f81f 	bl	8000dae <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000d70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000d74:	f7ff ffc7 	bl	8000d06 <P_LCD_2x16_Delay>
  // LCD-Modus einstellen (4Bit-Mode)
  P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8000d78:	6879      	ldr	r1, [r7, #4]
 8000d7a:	2002      	movs	r0, #2
 8000d7c:	f7ff ff85 	bl	8000c8a <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16);
 8000d80:	6879      	ldr	r1, [r7, #4]
 8000d82:	2003      	movs	r0, #3
 8000d84:	f7ff ffa0 	bl	8000cc8 <P_LCD_2x16_PinHi>
  P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	2004      	movs	r0, #4
 8000d8c:	f7ff ff7d 	bl	8000c8a <P_LCD_2x16_PinLo>
  P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000d90:	6879      	ldr	r1, [r7, #4]
 8000d92:	2005      	movs	r0, #5
 8000d94:	f7ff ff79 	bl	8000c8a <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 f808 	bl	8000dae <P_LCD_2x16_Clk>
  P_LCD_2x16_Delay(TLCD_PAUSE);
 8000d9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000da2:	f7ff ffb0 	bl	8000d06 <P_LCD_2x16_Delay>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <P_LCD_2x16_Clk>:

void P_LCD_2x16_Clk(LCD_2X16_t* LCD_2X16)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
  // Pin-E auf Hi
  P_LCD_2x16_PinHi(TLCD_E, LCD_2X16);
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	2001      	movs	r0, #1
 8000dba:	f7ff ff85 	bl	8000cc8 <P_LCD_2x16_PinHi>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8000dbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc2:	f7ff ffa0 	bl	8000d06 <P_LCD_2x16_Delay>
  // Pin-E auf Lo
  P_LCD_2x16_PinLo(TLCD_E, LCD_2X16);
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff ff5e 	bl	8000c8a <P_LCD_2x16_PinLo>
  // kleine Pause
  P_LCD_2x16_Delay(TLCD_CLK_PAUSE);
 8000dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dd2:	f7ff ff98 	bl	8000d06 <P_LCD_2x16_Delay>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <P_LCD_2x16_Cmd>:

void P_LCD_2x16_Cmd(uint8_t wert, LCD_2X16_t* LCD_2X16)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	6039      	str	r1, [r7, #0]
 8000de8:	71fb      	strb	r3, [r7, #7]
  // RS=Lo (Command)
  P_LCD_2x16_PinLo(TLCD_RS, LCD_2X16);
 8000dea:	6839      	ldr	r1, [r7, #0]
 8000dec:	2000      	movs	r0, #0
 8000dee:	f7ff ff4c 	bl	8000c8a <P_LCD_2x16_PinLo>
  // Hi-Nibble ausgeben
  if((wert&0x80)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	da04      	bge.n	8000e04 <P_LCD_2x16_Cmd+0x26>
 8000dfa:	6839      	ldr	r1, [r7, #0]
 8000dfc:	2005      	movs	r0, #5
 8000dfe:	f7ff ff63 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000e02:	e003      	b.n	8000e0c <P_LCD_2x16_Cmd+0x2e>
 8000e04:	6839      	ldr	r1, [r7, #0]
 8000e06:	2005      	movs	r0, #5
 8000e08:	f7ff ff3f 	bl	8000c8a <P_LCD_2x16_PinLo>
  if((wert&0x40)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d004      	beq.n	8000e20 <P_LCD_2x16_Cmd+0x42>
 8000e16:	6839      	ldr	r1, [r7, #0]
 8000e18:	2004      	movs	r0, #4
 8000e1a:	f7ff ff55 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000e1e:	e003      	b.n	8000e28 <P_LCD_2x16_Cmd+0x4a>
 8000e20:	6839      	ldr	r1, [r7, #0]
 8000e22:	2004      	movs	r0, #4
 8000e24:	f7ff ff31 	bl	8000c8a <P_LCD_2x16_PinLo>
  if((wert&0x20)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 0320 	and.w	r3, r3, #32
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d004      	beq.n	8000e3c <P_LCD_2x16_Cmd+0x5e>
 8000e32:	6839      	ldr	r1, [r7, #0]
 8000e34:	2003      	movs	r0, #3
 8000e36:	f7ff ff47 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000e3a:	e003      	b.n	8000e44 <P_LCD_2x16_Cmd+0x66>
 8000e3c:	6839      	ldr	r1, [r7, #0]
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f7ff ff23 	bl	8000c8a <P_LCD_2x16_PinLo>
  if((wert&0x10)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d004      	beq.n	8000e58 <P_LCD_2x16_Cmd+0x7a>
 8000e4e:	6839      	ldr	r1, [r7, #0]
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff ff39 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000e56:	e003      	b.n	8000e60 <P_LCD_2x16_Cmd+0x82>
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	2002      	movs	r0, #2
 8000e5c:	f7ff ff15 	bl	8000c8a <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8000e60:	6838      	ldr	r0, [r7, #0]
 8000e62:	f7ff ffa4 	bl	8000dae <P_LCD_2x16_Clk>
  // Lo-Nibble ausgeben
  if((wert&0x08)!=0) P_LCD_2x16_PinHi(TLCD_D7, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D7, LCD_2X16);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d004      	beq.n	8000e7a <P_LCD_2x16_Cmd+0x9c>
 8000e70:	6839      	ldr	r1, [r7, #0]
 8000e72:	2005      	movs	r0, #5
 8000e74:	f7ff ff28 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000e78:	e003      	b.n	8000e82 <P_LCD_2x16_Cmd+0xa4>
 8000e7a:	6839      	ldr	r1, [r7, #0]
 8000e7c:	2005      	movs	r0, #5
 8000e7e:	f7ff ff04 	bl	8000c8a <P_LCD_2x16_PinLo>
  if((wert&0x04)!=0) P_LCD_2x16_PinHi(TLCD_D6, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D6, LCD_2X16);
 8000e82:	79fb      	ldrb	r3, [r7, #7]
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d004      	beq.n	8000e96 <P_LCD_2x16_Cmd+0xb8>
 8000e8c:	6839      	ldr	r1, [r7, #0]
 8000e8e:	2004      	movs	r0, #4
 8000e90:	f7ff ff1a 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000e94:	e003      	b.n	8000e9e <P_LCD_2x16_Cmd+0xc0>
 8000e96:	6839      	ldr	r1, [r7, #0]
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f7ff fef6 	bl	8000c8a <P_LCD_2x16_PinLo>
  if((wert&0x02)!=0) P_LCD_2x16_PinHi(TLCD_D5, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D5, LCD_2X16);
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d004      	beq.n	8000eb2 <P_LCD_2x16_Cmd+0xd4>
 8000ea8:	6839      	ldr	r1, [r7, #0]
 8000eaa:	2003      	movs	r0, #3
 8000eac:	f7ff ff0c 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000eb0:	e003      	b.n	8000eba <P_LCD_2x16_Cmd+0xdc>
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f7ff fee8 	bl	8000c8a <P_LCD_2x16_PinLo>
  if((wert&0x01)!=0) P_LCD_2x16_PinHi(TLCD_D4, LCD_2X16); else P_LCD_2x16_PinLo(TLCD_D4, LCD_2X16);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <P_LCD_2x16_Cmd+0xf0>
 8000ec4:	6839      	ldr	r1, [r7, #0]
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f7ff fefe 	bl	8000cc8 <P_LCD_2x16_PinHi>
 8000ecc:	e003      	b.n	8000ed6 <P_LCD_2x16_Cmd+0xf8>
 8000ece:	6839      	ldr	r1, [r7, #0]
 8000ed0:	2002      	movs	r0, #2
 8000ed2:	f7ff feda 	bl	8000c8a <P_LCD_2x16_PinLo>
  P_LCD_2x16_Clk(LCD_2X16);
 8000ed6:	6838      	ldr	r0, [r7, #0]
 8000ed8:	f7ff ff69 	bl	8000dae <P_LCD_2x16_Clk>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <main>:
/*------------------------------------------------------------------------------
VARIABLES GLOBALES:
------------------------------------------------------------------------------*/

int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
/*------------------------------------------------------------------------------
CONFIGURACION DEL MICRO:
------------------------------------------------------------------------------*/
	SystemInit();
 8000ee8:	f000 f87c 	bl	8000fe4 <SystemInit>

	/*Inicializacion del DISPLAY LCD:*/
	INIT_LCD_2x16(LCD_2X16);
 8000eec:	4806      	ldr	r0, [pc, #24]	; (8000f08 <main+0x24>)
 8000eee:	f7ff fe4f 	bl	8000b90 <INIT_LCD_2x16>

	/*Inicializacion del ADC:*/
	INIT_ADC();
 8000ef2:	f7ff fd6f 	bl	80009d4 <INIT_ADC>

	/*Inicialización del TIM3:*/
	INIT_TIM3();
 8000ef6:	f7ff fdf1 	bl	8000adc <INIT_TIM3>
	SET_TIM3(TimeBase, FS);
 8000efa:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000efe:	4803      	ldr	r0, [pc, #12]	; (8000f0c <main+0x28>)
 8000f00:	f7ff fe04 	bl	8000b0c <SET_TIM3>

/*------------------------------------------------------------------------------
BUCLE PRINCIPAL:
------------------------------------------------------------------------------*/
	while(1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x20>
 8000f06:	bf00      	nop
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	00030d40 	.word	0x00030d40

08000f10 <TIM3_IRQHandler>:
}
/*------------------------------------------------------------------------------
INTERRUPCIONES:
------------------------------------------------------------------------------*/
/*Interrupcion al vencimiento de cuenta de TIM3 cada 1/FS:*/
void TIM3_IRQHandler(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM3, TIM_IT_Update) != RESET) {
 8000f14:	2101      	movs	r1, #1
 8000f16:	4806      	ldr	r0, [pc, #24]	; (8000f30 <TIM3_IRQHandler+0x20>)
 8000f18:	f7ff fd20 	bl	800095c <TIM_GetITStatus>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <TIM3_IRQHandler+0x1a>

        TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8000f22:	2101      	movs	r1, #1
 8000f24:	4802      	ldr	r0, [pc, #8]	; (8000f30 <TIM3_IRQHandler+0x20>)
 8000f26:	f7ff fd43 	bl	80009b0 <TIM_ClearITPendingBit>
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40000400 	.word	0x40000400

08000f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f6c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f3a:	e003      	b.n	8000f44 <LoopCopyDataInit>

08000f3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f42:	3104      	adds	r1, #4

08000f44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f4c:	d3f6      	bcc.n	8000f3c <CopyDataInit>
  ldr  r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f50:	e002      	b.n	8000f58 <LoopFillZerobss>

08000f52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f54:	f842 3b04 	str.w	r3, [r2], #4

08000f58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f5c:	d3f9      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f5e:	f000 f841 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f62:	f000 f96d 	bl	8001240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f66:	f7ff ffbd 	bl	8000ee4 <main>
  bx  lr    
 8000f6a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f6c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000f70:	080012a8 	.word	0x080012a8
  ldr  r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f78:	2000008c 	.word	0x2000008c
  ldr  r2, =_sbss
 8000f7c:	2000008c 	.word	0x2000008c
  ldr  r3, = _ebss
 8000f80:	200000e0 	.word	0x200000e0

08000f84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC_IRQHandler>

08000f86 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
}
 8000f8a:	bf00      	nop
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <HardFault_Handler+0x4>

08000f9a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <MemManage_Handler+0x4>

08000fa0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <BusFault_Handler+0x4>

08000fa6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000faa:	e7fe      	b.n	8000faa <UsageFault_Handler+0x4>

08000fac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe8:	4a16      	ldr	r2, [pc, #88]	; (8001044 <SystemInit+0x60>)
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <SystemInit+0x60>)
 8000fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ff8:	4a13      	ldr	r2, [pc, #76]	; (8001048 <SystemInit+0x64>)
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <SystemInit+0x64>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001004:	4b10      	ldr	r3, [pc, #64]	; (8001048 <SystemInit+0x64>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <SystemInit+0x64>)
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <SystemInit+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001014:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001018:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800101a:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <SystemInit+0x64>)
 800101c:	4a0b      	ldr	r2, [pc, #44]	; (800104c <SystemInit+0x68>)
 800101e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001020:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SystemInit+0x64>)
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <SystemInit+0x64>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <SystemInit+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001032:	f000 f889 	bl	8001148 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001036:	4b03      	ldr	r3, [pc, #12]	; (8001044 <SystemInit+0x60>)
 8001038:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800103c:	609a      	str	r2, [r3, #8]
#endif
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	40023800 	.word	0x40023800
 800104c:	24003010 	.word	0x24003010

08001050 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	2302      	movs	r3, #2
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	2302      	movs	r3, #2
 8001068:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800106a:	4b32      	ldr	r3, [pc, #200]	; (8001134 <SystemCoreClockUpdate+0xe4>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	2b04      	cmp	r3, #4
 8001078:	d007      	beq.n	800108a <SystemCoreClockUpdate+0x3a>
 800107a:	2b08      	cmp	r3, #8
 800107c:	d009      	beq.n	8001092 <SystemCoreClockUpdate+0x42>
 800107e:	2b00      	cmp	r3, #0
 8001080:	d13d      	bne.n	80010fe <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001082:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <SystemCoreClockUpdate+0xe8>)
 8001084:	4a2d      	ldr	r2, [pc, #180]	; (800113c <SystemCoreClockUpdate+0xec>)
 8001086:	601a      	str	r2, [r3, #0]
      break;
 8001088:	e03d      	b.n	8001106 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <SystemCoreClockUpdate+0xe8>)
 800108c:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <SystemCoreClockUpdate+0xf0>)
 800108e:	601a      	str	r2, [r3, #0]
      break;
 8001090:	e039      	b.n	8001106 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001092:	4b28      	ldr	r3, [pc, #160]	; (8001134 <SystemCoreClockUpdate+0xe4>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	0d9b      	lsrs	r3, r3, #22
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <SystemCoreClockUpdate+0xe4>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010a6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d00c      	beq.n	80010c8 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010ae:	4a24      	ldr	r2, [pc, #144]	; (8001140 <SystemCoreClockUpdate+0xf0>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4a1f      	ldr	r2, [pc, #124]	; (8001134 <SystemCoreClockUpdate+0xe4>)
 80010b8:	6852      	ldr	r2, [r2, #4]
 80010ba:	0992      	lsrs	r2, r2, #6
 80010bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010c0:	fb02 f303 	mul.w	r3, r2, r3
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e00b      	b.n	80010e0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010c8:	4a1c      	ldr	r2, [pc, #112]	; (800113c <SystemCoreClockUpdate+0xec>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	4a18      	ldr	r2, [pc, #96]	; (8001134 <SystemCoreClockUpdate+0xe4>)
 80010d2:	6852      	ldr	r2, [r2, #4]
 80010d4:	0992      	lsrs	r2, r2, #6
 80010d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010da:	fb02 f303 	mul.w	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <SystemCoreClockUpdate+0xe4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	0c1b      	lsrs	r3, r3, #16
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	3301      	adds	r3, #1
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80010f0:	697a      	ldr	r2, [r7, #20]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f8:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <SystemCoreClockUpdate+0xe8>)
 80010fa:	6013      	str	r3, [r2, #0]
      break;
 80010fc:	e003      	b.n	8001106 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <SystemCoreClockUpdate+0xe8>)
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <SystemCoreClockUpdate+0xec>)
 8001102:	601a      	str	r2, [r3, #0]
      break;
 8001104:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <SystemCoreClockUpdate+0xe4>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	091b      	lsrs	r3, r3, #4
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <SystemCoreClockUpdate+0xf4>)
 8001112:	5cd3      	ldrb	r3, [r2, r3]
 8001114:	b2db      	uxtb	r3, r3
 8001116:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <SystemCoreClockUpdate+0xe8>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	fa22 f303 	lsr.w	r3, r2, r3
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemCoreClockUpdate+0xe8>)
 8001124:	6013      	str	r3, [r2, #0]
}
 8001126:	bf00      	nop
 8001128:	371c      	adds	r7, #28
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	20000078 	.word	0x20000078
 800113c:	00f42400 	.word	0x00f42400
 8001140:	007a1200 	.word	0x007a1200
 8001144:	2000007c 	.word	0x2000007c

08001148 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	2300      	movs	r3, #0
 8001154:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001156:	4a36      	ldr	r2, [pc, #216]	; (8001230 <SetSysClock+0xe8>)
 8001158:	4b35      	ldr	r3, [pc, #212]	; (8001230 <SetSysClock+0xe8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001162:	4b33      	ldr	r3, [pc, #204]	; (8001230 <SetSysClock+0xe8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3301      	adds	r3, #1
 8001170:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d103      	bne.n	8001180 <SetSysClock+0x38>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800117e:	d1f0      	bne.n	8001162 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <SetSysClock+0xe8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800118c:	2301      	movs	r3, #1
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	e001      	b.n	8001196 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d142      	bne.n	8001222 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <SetSysClock+0xe8>)
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <SetSysClock+0xe8>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80011a8:	4a22      	ldr	r2, [pc, #136]	; (8001234 <SetSysClock+0xec>)
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <SetSysClock+0xec>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011b2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80011b4:	4a1e      	ldr	r2, [pc, #120]	; (8001230 <SetSysClock+0xe8>)
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <SetSysClock+0xe8>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <SetSysClock+0xe8>)
 80011be:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <SetSysClock+0xe8>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011c6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80011c8:	4a19      	ldr	r2, [pc, #100]	; (8001230 <SetSysClock+0xe8>)
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <SetSysClock+0xe8>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80011d2:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <SetSysClock+0xe8>)
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <SetSysClock+0xf0>)
 80011d8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <SetSysClock+0xe8>)
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <SetSysClock+0xe8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011e4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80011e6:	bf00      	nop
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <SetSysClock+0xe8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f9      	beq.n	80011e8 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <SetSysClock+0xf4>)
 80011f6:	f240 7205 	movw	r2, #1797	; 0x705
 80011fa:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80011fc:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <SetSysClock+0xe8>)
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <SetSysClock+0xe8>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f023 0303 	bic.w	r3, r3, #3
 8001206:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001208:	4a09      	ldr	r2, [pc, #36]	; (8001230 <SetSysClock+0xe8>)
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <SetSysClock+0xe8>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001214:	bf00      	nop
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <SetSysClock+0xe8>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
 800121e:	2b08      	cmp	r3, #8
 8001220:	d1f9      	bne.n	8001216 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40007000 	.word	0x40007000
 8001238:	07402d04 	.word	0x07402d04
 800123c:	40023c00 	.word	0x40023c00

08001240 <__libc_init_array>:
 8001240:	b570      	push	{r4, r5, r6, lr}
 8001242:	4e0d      	ldr	r6, [pc, #52]	; (8001278 <__libc_init_array+0x38>)
 8001244:	4c0d      	ldr	r4, [pc, #52]	; (800127c <__libc_init_array+0x3c>)
 8001246:	1ba4      	subs	r4, r4, r6
 8001248:	10a4      	asrs	r4, r4, #2
 800124a:	2500      	movs	r5, #0
 800124c:	42a5      	cmp	r5, r4
 800124e:	d109      	bne.n	8001264 <__libc_init_array+0x24>
 8001250:	4e0b      	ldr	r6, [pc, #44]	; (8001280 <__libc_init_array+0x40>)
 8001252:	4c0c      	ldr	r4, [pc, #48]	; (8001284 <__libc_init_array+0x44>)
 8001254:	f000 f818 	bl	8001288 <_init>
 8001258:	1ba4      	subs	r4, r4, r6
 800125a:	10a4      	asrs	r4, r4, #2
 800125c:	2500      	movs	r5, #0
 800125e:	42a5      	cmp	r5, r4
 8001260:	d105      	bne.n	800126e <__libc_init_array+0x2e>
 8001262:	bd70      	pop	{r4, r5, r6, pc}
 8001264:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001268:	4798      	blx	r3
 800126a:	3501      	adds	r5, #1
 800126c:	e7ee      	b.n	800124c <__libc_init_array+0xc>
 800126e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001272:	4798      	blx	r3
 8001274:	3501      	adds	r5, #1
 8001276:	e7f2      	b.n	800125e <__libc_init_array+0x1e>
 8001278:	080012a0 	.word	0x080012a0
 800127c:	080012a0 	.word	0x080012a0
 8001280:	080012a0 	.word	0x080012a0
 8001284:	080012a4 	.word	0x080012a4

08001288 <_init>:
 8001288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800128a:	bf00      	nop
 800128c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800128e:	bc08      	pop	{r3}
 8001290:	469e      	mov	lr, r3
 8001292:	4770      	bx	lr

08001294 <_fini>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	bf00      	nop
 8001298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800129a:	bc08      	pop	{r3}
 800129c:	469e      	mov	lr, r3
 800129e:	4770      	bx	lr
